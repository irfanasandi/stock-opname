Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: FTM

; Microsoft Dynamics AX MENUITEM : ERL_ReleaseItem unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #ERL_ReleaseItem
    Type: 3
    PROPERTIES
      Name                #ERL_ReleaseItem
      Label               #Release
      ObjectType          #Class
      Object              #ERL_ReleaseItem
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: CLS

; Microsoft Dynamics AX Class: ERL_ReleaseItem unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #ERL_ReleaseItem
    PROPERTIES
      Name                #ERL_ReleaseItem
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #class ERL_ReleaseItem
        #{
        #    args                    args;
        #    ERL_ReleaseItemCounted      record;
        #}
      ENDSOURCE
      SOURCE #parmArgs
        #public Args parmArgs(args _args=args)
        #{
        #    ;
        #    args = _args;
        #
        #    return args;
        #
        #}
      ENDSOURCE
      SOURCE #unthickItem
        #public void unthickItem()
        #{
        #    InventItemLocation      inv;
        #    ;
        #
        #    record = args.record();
        #    if(record.Posted) {
        #        update_recordset inv
        #        setting CountingStarted = 0, CountingJournalId = ""
        #        where inv.CountingJournalId == record.CountingJournalId;
        #        info(strfmt("Jurnal %1 sukses di rilis.", record.CountingJournalId));
        #        args.caller().refresh();
        #    } else {
        #        warning("Jurnal masih belum di posting");
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args args)
        #{
        #    ERL_ReleaseItem   cls = new ERL_ReleaseItem();
        #    cls.parmArgs(args);
        #    cls.unthickItem();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: QUE

; Microsoft Dynamics AX Query: ERL_ReleaseItemCounted unloaded
; --------------------------------------------------------------------------------
VERSION 18

QUERY #ERL_ReleaseItemCounted
  PROPERTIES
    Name                #ERL_ReleaseItemCounted
    Version             #12
    NextUniqueId        #1003
  ENDPROPERTIES
  
  METHODS
    Version: 3
    SOURCE #classDeclaration
      #public class QueryRun extends ObjectRun
      #{
      #}
    ENDSOURCE
  ENDMETHODS
  BLOCKS
    BLOCK #InventItemLocation
      PROPERTIES
        Name                #InventItemLocation_1
        Table               #InventItemLocation
        UniqueId            #1000
      ENDPROPERTIES
      
      FIELDLIST
        PROPERTIES
        ENDPROPERTIES
        
      ENDFIELDLIST
      SORTING
      ENDSORTING
      LINES
      ENDLINES
      BLOCKS
        BLOCK #InventDim
          PROPERTIES
            Name                #InventDim_1
            Table               #InventDim
            UniqueId            #1001
          ENDPROPERTIES
          
          FIELDLIST
            PROPERTIES
            ENDPROPERTIES
            
          ENDFIELDLIST
          SORTING
          ENDSORTING
          LINES
          ENDLINES
          BLOCKS
            BLOCK #InventJournalTable
              PROPERTIES
                Name                #InventJournalTable_1
                Table               #InventJournalTable
                UniqueId            #1002
                JoinMode            #OuterJoin
              ENDPROPERTIES
              
              FIELDLIST
                PROPERTIES
                ENDPROPERTIES
                
              ENDFIELDLIST
              SORTING
              ENDSORTING
              LINES
              ENDLINES
              BLOCKS
              ENDBLOCKS
              ASSOCIATIONS
                ASSOCIATION
                  JOINDATASOURCE #InventItemLocation_1
                  MASTERFIELD  #CountingJournalId
                  DETAILSFIELD #JournalId
              ENDASSOCIATIONS
            ENDBLOCK
          ENDBLOCKS
          ASSOCIATIONS
            ASSOCIATION
              JOINDATASOURCE #InventItemLocation_1
              MASTERFIELD  #inventDimId
              DETAILSFIELD #inventDimId
          ENDASSOCIATIONS
        ENDBLOCK
      ENDBLOCKS
      GROUPBY
      ENDGROUPBY
      ORDERBY
      ENDORDERBY
    ENDBLOCK
  ENDBLOCKS
  DEPENDENTS
    DEPENDENT
      PROPERTIES
        Name                #ERL_ReleaseItemCounted
        DependentType       #View
      ENDPROPERTIES
      
      Id 51464
  ENDDEPENDENTS
  COMPOSITEQUERIES
  ENDCOMPOSITEQUERIES
ENDQUERY


***Element: VIE

; Microsoft Dynamics AX View : ERL_ReleaseItemCounted unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  VIEW #ERL_ReleaseItemCounted
    PROPERTIES
      Name                #ERL_ReleaseItemCounted
      SaveDataPerCompany  #Yes
      Query               #ERL_ReleaseItemCounted
    ENDPROPERTIES
    
    QUERY #Metadata
      PROPERTIES
        Name                #Metadata
        Version             #9
        NextUniqueId        #1003
      ENDPROPERTIES
      
      BLOCKS
      ENDBLOCKS
      QUERY #ERL_ReleaseItemCounted
      ENDQUERY
      
    ENDQUERY
    
    FIELDS
      VIEWFIELD #InventSiteId
        PROPERTIES
          Name                #InventSiteId
          Table               #ERL_ReleaseItemCounted
          ExtendedDataType    #InventSiteId
          StringSize          #10
          DataSource          #InventDim_1
          DataField           #InventSiteId
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #ItemId
        PROPERTIES
          Name                #ItemId
          Table               #ERL_ReleaseItemCounted
          ExtendedDataType    #ItemId
          StringSize          #20
          DataSource          #InventItemLocation_1
          DataField           #ItemId
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #inventDimId
        PROPERTIES
          Name                #inventDimId
          Table               #ERL_ReleaseItemCounted
          ExtendedDataType    #InventDimId
          StringSize          #20
          DataSource          #InventItemLocation_1
          DataField           #inventDimId
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #InventLocationId
        PROPERTIES
          Name                #InventLocationId
          Table               #ERL_ReleaseItemCounted
          ExtendedDataType    #InventLocationId
          StringSize          #20
          DataSource          #InventDim_1
          DataField           #InventLocationId
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #CountingStarted
        PROPERTIES
          Type                #Enum
          Name                #CountingStarted
          Table               #ERL_ReleaseItemCounted
          ExtendedDataType    #InventCountingStarted
          EnumType            #NoYes
          StringSize          #(Memo)
          DataSource          #InventItemLocation_1
          DataField           #CountingStarted
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #CountingJournalId
        PROPERTIES
          Name                #CountingJournalId
          Table               #ERL_ReleaseItemCounted
          ExtendedDataType    #InventJournalId_Counting
          StringSize          #20
          DataSource          #InventItemLocation_1
          DataField           #CountingJournalId
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #JournalId
        PROPERTIES
          Name                #JournalId
          Table               #ERL_ReleaseItemCounted
          ExtendedDataType    #InventJournalId
          StringSize          #20
          DataSource          #InventJournalTable_1
          DataField           #JournalId
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #Description
        PROPERTIES
          Name                #Description
          Table               #ERL_ReleaseItemCounted
          ExtendedDataType    #JournalDescription
          StringSize          #60
          DataSource          #InventJournalTable_1
          DataField           #Description
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #Posted
        PROPERTIES
          Type                #Enum
          Name                #Posted
          Table               #ERL_ReleaseItemCounted
          ExtendedDataType    #JournalPosted
          EnumType            #NoYes
          StringSize          #(Memo)
          DataSource          #InventJournalTable_1
          DataField           #Posted
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #wMSLocationId
        PROPERTIES
          Name                #wMSLocationId
          Table               #ERL_ReleaseItemCounted
          ExtendedDataType    #WMSLocationId
          StringSize          #10
          DataSource          #InventDim_1
          DataField           #wMSLocationId
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
      VIEWFIELD #PostedDateTime
        PROPERTIES
          Type                #DateTime
          Name                #PostedDateTime
          Table               #ERL_ReleaseItemCounted
          ExtendedDataType    #JournalPostedDateTime
          StringSize          #(Memo)
          DataSource          #InventJournalTable_1
          DataField           #PostedDateTime
        ENDPROPERTIES
        
      ENDVIEWFIELD
      
    ENDFIELDS
    GROUPS
      GROUP #Journal
        PROPERTIES
          Name                #Journal
          Label               #Journal
        ENDPROPERTIES
        
        GROUPFIELDS
          #JournalId
          #Posted
          #Description
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Overview
        PROPERTIES
          Name                #Overview
          Label               #Overview
        ENDPROPERTIES
        
        GROUPFIELDS
          #InventSiteId
          #inventDimId
          #ItemId
          #InventLocationId
          #wMSLocationId
          #CountingStarted
          #CountingJournalId
          #JournalId
          #Posted
          #Description
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
  ENDVIEW
  

***Element: DBT

; Microsoft Dynamics AX Table : InventDim unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #InventDim
    PROPERTIES
      Name                #InventDim
      Label               #@SYS53630
      TitleField1         #inventDimId
      TitleField2         #RecId
      ConfigurationKey    #LedgerBasic
      SecurityKey         #BasicTables
      CacheLookup         #Found
      TableGroup          #Group
      PrimaryIndex        #DimIdIdx
      ClusterIndex        #DimIdIdx
      DeveloperDocumentation  #@SYS123931
    ENDPROPERTIES
    
    FIELDS
      FIELD #inventDimId
        STRING
        PROPERTIES
          Name                #inventDimId
          Mandatory           #Yes
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventDim
          ExtendedDataType    
            ARRAY 
              #InventDimId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #inventBatchId
        STRING
        PROPERTIES
          Name                #inventBatchId
          Table               #InventDim
          ExtendedDataType    
            ARRAY 
              #InventBatchId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #wMSLocationId
        STRING
        PROPERTIES
          Name                #wMSLocationId
          Table               #InventDim
          ExtendedDataType    
            ARRAY 
              #WMSLocationId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #wMSPalletId
        STRING
        PROPERTIES
          Name                #wMSPalletId
          Table               #InventDim
          ExtendedDataType    
            ARRAY 
              #WMSPalletId
              #
            ENDARRAY
          StringSize          #18
        ENDPROPERTIES
        
      FIELD #inventSerialId
        STRING
        PROPERTIES
          Name                #inventSerialId
          Table               #InventDim
          ExtendedDataType    
            ARRAY 
              #InventSerialId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InventLocationId
        STRING
        PROPERTIES
          Name                #InventLocationId
          Table               #InventDim
          ExtendedDataType    
            ARRAY 
              #InventLocationId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #configId
        STRING
        PROPERTIES
          Name                #configId
          Table               #InventDim
          ExtendedDataType    
            ARRAY 
              #ConfigId
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #InventSizeId
        STRING
        PROPERTIES
          Name                #InventSizeId
          Table               #InventDim
          ExtendedDataType    
            ARRAY 
              #InventSizeId
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #InventColorId
        STRING
        PROPERTIES
          Name                #InventColorId
          Table               #InventDim
          ExtendedDataType    
            ARRAY 
              #InventColorId
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #InventSiteId
        STRING
        PROPERTIES
          Name                #InventSiteId
          Table               #InventDim
          ExtendedDataType    
            ARRAY 
              #InventSiteId
              #
            ENDARRAY
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #inventDimId
          #configId
          #InventSizeId
          #InventColorId
          #InventSiteId
          #InventLocationId
          #inventBatchId
          #wMSLocationId
          #wMSPalletId
          #inventSerialId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@SYS5711
        ENDPROPERTIES
        
        GROUPFIELDS
          #inventDimId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #InventDimensions
        PROPERTIES
          Name                #InventDimensions
          Label               #@SYS53630
        ENDPROPERTIES
        
        GROUPFIELDS
          #InventSiteId
          #InventLocationId
          #inventBatchId
          #wMSLocationId
          #wMSPalletId
          #inventSerialId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #InventoryDimensions
        PROPERTIES
          Name                #InventoryDimensions
          Label               #@SYS53630
        ENDPROPERTIES
        
        GROUPFIELDS
          #configId
          #InventSizeId
          #InventColorId
          #InventSiteId
          #InventLocationId
          #inventBatchId
          #wMSLocationId
          #wMSPalletId
          #inventSerialId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ItemDimensions
        PROPERTIES
          Name                #ItemDimensions
          Label               #@SYS54752
        ENDPROPERTIES
        
        GROUPFIELDS
          #configId
          #InventSizeId
          #InventColorId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ReqDimensionsPrioritized
        PROPERTIES
          Name                #ReqDimensionsPrioritized
          Label               #@SYS110615
        ENDPROPERTIES
        
        GROUPFIELDS
          #InventSiteId
          #configId
          #InventSizeId
          #InventColorId
          #InventLocationId
          #inventBatchId
          #wMSLocationId
          #wMSPalletId
          #inventSerialId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #TOCDimensions
        PROPERTIES
          Name                #TOCDimensions
        ENDPROPERTIES
        
        GROUPFIELDS
          #configId
          #InventSizeId
          #InventColorId
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #DimIdIdx
      PROPERTIES
        Name                #DimIdIdx
        AllowDuplicates     #No
      ENDPROPERTIES
      
      INDEXFIELDS
        #inventDimId
      ENDINDEXFIELDS
      
      #PalletIdIdx
      PROPERTIES
        Name                #PalletIdIdx
        Enabled             #No
        ConfigurationKey    #WMSPallet
      ENDPROPERTIES
      
      INDEXFIELDS
        #wMSPalletId
      ENDINDEXFIELDS
      
      #LocationIdIdx
      PROPERTIES
        Name                #LocationIdIdx
        ConfigurationKey    #WMSBasic
      ENDPROPERTIES
      
      INDEXFIELDS
        #InventLocationId
        #wMSLocationId
      ENDINDEXFIELDS
      
      #BatchIdIdx
      PROPERTIES
        Name                #BatchIdIdx
        Enabled             #No
        ConfigurationKey    #LogisticsAdvanced
      ENDPROPERTIES
      
      INDEXFIELDS
        #inventBatchId
      ENDINDEXFIELDS
      
      #SerialIdIdx
      PROPERTIES
        Name                #SerialIdIdx
        Enabled             #No
        ConfigurationKey    #LogisticsAdvanced
      ENDPROPERTIES
      
      INDEXFIELDS
        #inventSerialId
      ENDINDEXFIELDS
      
      #DimIdx
      PROPERTIES
        Name                #DimIdx
        AllowDuplicates     #No
      ENDPROPERTIES
      
      INDEXFIELDS
        #configId
        #InventSizeId
        #InventColorId
        #InventSiteId
        #InventLocationId
        #inventBatchId
        #wMSLocationId
        #wMSPalletId
        #inventSerialId
      ENDINDEXFIELDS
      
      #SiteIdx
      PROPERTIES
        Name                #SiteIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #InventSiteId
      ENDINDEXFIELDS
      
    ENDINDICES
    REFERENCES
      REFERENCE #InventDim
        PROPERTIES
          Name                #InventDim
          Table               #InventDim
          EntityRelationshipRole  #@SYS123902
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #inventDimId
            RelatedField        #inventDimId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventSum
        PROPERTIES
          Name                #InventSum
          Table               #InventSum
          EntityRelationshipRole  #@SYS123816
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #inventDimId
            RelatedField        #InventDimId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventSumDelta
        PROPERTIES
          Name                #InventSumDelta
          Table               #InventSumDelta
          EntityRelationshipRole  #@SYS123816
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #inventDimId
            RelatedField        #InventDimId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventTrans
        PROPERTIES
          Name                #InventTrans
          Table               #InventTrans
          EntityRelationshipRole  #@SYS123903
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #inventDimId
            RelatedField        #inventDimId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TOCNorms
        PROPERTIES
          Name                #TOCNorms
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #inventDimId
            RelatedField        #
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #WMSLocation
        PROPERTIES
          Name                #WMSLocation
          Table               #WMSLocation
          EntityRelationshipRole  #@SYS123914
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #InventLocationId
            RelatedField        #inventLocationId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #wMSLocationId
            RelatedField        #wMSLocationId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #WMSPallet
        PROPERTIES
          Name                #WMSPallet
          Table               #WMSPallet
          EntityRelationshipRole  #@SYS123932
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #InventLocationId
            RelatedField        #inventLocationId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #wMSLocationId
            RelatedField        #wMSLocationId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #wMSPalletId
            RelatedField        #wMSPalletId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
      #InventSum
      PROPERTIES
        Table               #InventSum
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #InventTrans
      PROPERTIES
        Table               #InventTrans
        DeleteAction        #Restricted
      ENDPROPERTIES
      
    ENDDELETEACTIONS
    
    METHODS
      Version: 3
      SOURCE #AxInventDim
        #public AxInventDim axInventDim()
        #{
        #    AxInventDim axInventDim = AxInventDim::newInventDim(this);
        #    return axInventDim;
        #}
      ENDSOURCE
      SOURCE #checkDimCountingFieldsValid
        #public boolean checkDimCountingFieldsValid(
        #        ItemId              _itemId,
        #        InventDimParm       _inventDimParm)
        #{
        #    InventDimSearch     dimSearch  = new InventDimSearch();
        #    InventTable         inventTable = InventTable::find(_itemId);
        #    InventDimGroupId    dimGroupId = inventTable.DimGroupId;
        #    Integer             x,y;
        #
        #    if (dimSearch.first(dimGroupId))
        #    do
        #    {
        #        x = dimSearch.dimFieldId();
        #        if (dimSearch.dimActive())
        #        {
        #            y = InventDim::dim2dimParm(x);
        #            if (_inventDimParm.(y))
        #            {
        #                if (!this.(x) && !dimSearch.dimAllowBlankReceipt() && !dimSearch.dimAllowBlankIssue())
        #                    return false;
        #            }
        #        }
        #        else if (this.(x))
        #        {
        #            return false;
        #        }
        #    } while (dimSearch.next(dimGroupId));
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkDimFieldsValid
        #public boolean checkDimFieldsValid(
        #        InventDimGroupId    _dimGroupId,
        #        ItemId              _itemId,
        #        InventDim           _inventDim_orig,
        #        boolean             _errorIfNotActive           = true,
        #        container           _conDimFieldIdAllowEmpty    = connull())
        #{
        #    InventTable     inventTable = InventTable::find(_itemId);
        #    InventDimSearch dimSearch  = new InventDimSearch();
        #    boolean         ok = true;
        #    Integer         x;
        #    ;
        #
        #    if (dimSearch.first(_dimGroupId))
        #    do
        #    {
        #        x = dimSearch.dimFieldId();
        #
        #        if (dimSearch.dimActive())
        #        {
        #            if (!this.checkDimSearchFieldId(dimSearch,
        #                                            inventTable,
        #                                            _inventDim_orig,
        #                                            null,
        #                                            _conDimFieldIdAllowEmpty))
        #            {
        #                ok = false;
        #            }
        #        }
        #        else if (_errorIfNotActive && this.(x))
        #        {
        #            ok = checkFailed(strfmt("@SYS54773",fieldid2pname(this.TableId, x)));
        #        }
        #    } while (dimSearch.next(_dimGroupId));
        #
        #    return ok && this.checkItemDimCombination(_itemId,_dimGroupId);
        #}
      ENDSOURCE
      SOURCE #checkDimSearchFieldId
        #public boolean checkDimSearchFieldId(InventDimSearch    _dimSearch,
        #                                     InventTable        _inventTable,
        #                                     InventDim          _inventDim_Orig,
        #                                     InventMovement     _movement                   = null,
        #                                     container          _conDimFieldIdAllowEmpty    = connull())
        #{
        #    boolean         ok              = true;
        #    Integer         x               = _dimSearch.dimFieldId();
        #    boolean         allowEmptyDim   = confind(_conDimFieldIdAllowEmpty, -1) || confind(_conDimFieldIdAllowEmpty, x);
        #    ;
        #    #InventDimDevelop
        #
        #    if(_dimSearch.dimMandatory() && !this.(x) && !allowEmptyDim)
        #    {
        #        if(_dimSearch.dimItemDimension())
        #        {
        #            ok = checkFailed(strfmt("@SYS54774",fieldid2pname(this.TableId, x)));
        #        }
        #        else
        #        {
        #            ok = checkFailed(strfmt("@SYS103633",fieldid2pname(this.TableId, x)));
        #        }
        #    }
        #
        #    if (_dimSearch.dimItemDimension())
        #    {
        #        if (x == fieldnum(InventDim,ConfigId))
        #        {
        #            if(this.ConfigId || (!this.ConfigId && !allowEmptyDim))
        #            {
        #                if (!_inventTable.checkConfigId(this.ConfigId))
        #                {
        #                    ok = false;
        #                }
        #            }
        #        }
        #        else if (x == fieldnum(InventDim,InventSizeId))
        #        {
        #            if(this.InventSizeId || (!this.InventSizeId && !allowEmptyDim))
        #            {
        #                if (!_inventTable.checkSizeId(this.InventSizeId))
        #                {
        #                    ok = false;
        #                }
        #            }
        #        }
        #        else if (x == fieldnum(InventDim,InventColorId))
        #        {
        #            if(this.InventColorId || (!this.InventColorId && !allowEmptyDim))
        #            {
        #                if (!_inventTable.checkColorId(this.InventColorId))
        #                {
        #                    ok = false;
        #                }
        #            }
        #        }
        #        else if (this.(x) != _inventDim_Orig.(x) && _movement)
        #        {
        #            if (_movement.childBuffer().RecId || _movement.transIdSum().estimated() != _movement.transQty())
        #            {
        #                ok = checkFailed(strfmt("@SYS54775",fieldid2pname(this.TableId, x),_inventDim_Orig.(x),this.(x)));
        #            }
        #        }
        #    }
        #
        #    if (x == fieldnum(InventDim,InventBatchId)              &&
        #        this.InventBatchId                                  &&
        #        this.InventBatchId != _inventDim_Orig.InventBatchId &&
        #        !InventBatch::find(this.InventBatchId,_inventTable.ItemId))
        #    {
        #        ok = checkFailed(strfmt("@SYS54778",this.InventBatchId,_inventTable.ItemId));
        #    }
        #
        #    if (x == fieldnum(InventDim,wmsLocationId)              &&
        #        this.wmsLocationId                                  &&
        #        this.wmsLocationId != _inventDim_Orig.wmsLocationId &&
        #        !WMSLocation::find(this.wmsLocationId,this.InventLocationId))
        #    {
        #        ok = checkFailed(strfmt("@SYS53781",this.wmsLocationId,this.InventLocationId));
        #    }
        #
        #    if (x == fieldnum(InventDim, InventSiteId)              &&
        #        this.InventSiteId                                   &&
        #        this.InventSiteId != _inventDim_Orig.InventSiteId   &&
        #        !InventSite::exist(this.InventSiteId))
        #    {
        #        ok = checkFailed(strfmt("@SYS111931", this.InventSiteId));
        #    }
        #
        #    if (x == fieldnum(InventDim, InventLocationId)                  &&
        #        this.InventLocationId                                       &&
        #        this.InventLocationId != _inventDim_Orig.InventLocationId   &&
        #        !InventLocation::exist(this.InventLocationId))
        #    {
        #        ok = checkFailed(strfmt("@SYS5001", this.InventLocationId));
        #    }
        #
        #    if (x == fieldnum(InventDim,InventSiteId)                    &&
        #        this.InventSiteId                                        &&
        #        this.InventLocationId                                    &&
        #        InventLocation::find(this.InventLocationId).InventSiteId != this.InventSiteId)
        #    {
        #        ok = checkFailed(strfmt("@SYS104861",this.InventLocationId,this.InventSiteId));
        #    }
        #
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #checkInventDimCopyTo
        #public boolean checkInventDimCopyTo(
        #    ItemId              _itemId,
        #    InventDim           _toInventDim
        #    )
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::consistentFields(InventTable::find(_itemId).DimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        if (this.(x) != _toInventDim.(x))
        #            return checkFailed(strfmt("@SYS68246",fieldid2pname(this.TableId, x)));
        #    }
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #checkItemDimCombination
        #public boolean checkItemDimCombination(
        #        ItemId           _itemId,
        #        InventDimGroupId _dimGroupId)
        #{
        #    ;
        #    if (!this.mustCheckItemDimCombination(_dimGroupId))
        #        return true;
        #
        #    if (InventDimCombination::exist(_itemId,this))
        #        return true;
        #
        #    return checkFailed(strfmt("@SYS73899",this.preFixItemDim(_dimGroupId),_itemId));
        #}
      ENDSOURCE
      SOURCE #checkMandatoryCovPrDim
        #public boolean checkMandatoryCovPrDim(InventDimGroupId _dimGroupId, boolean _errorIfNotSpecified = true)
        #{
        #    InventDimSearch dimSearch = new InventDimSearch();
        #    boolean         ok = true;
        #    Integer         x;
        #    ;
        #
        #    if (dimSearch.first(_dimGroupId))
        #    do
        #    {
        #        x = dimSearch.dimFieldId();
        #
        #        if ((dimSearch.dimActive() && dimSearch.dimCovPrDimension()) && dimSearch.dimMandatory() && !this.(x))
        #        {
        #            ok = false;
        #            if (_errorIfNotSpecified)
        #                ok = checkFailed(strfmt('@SYS113334',fieldid2pname(this.TableId, x)));
        #            break;
        #        }
        #    } while (dimSearch.next(_dimGroupId));
        #
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #clearItemDimension
        #public void clearItemDimension(InventDimGroupId    _dimGroupId)
        #{
        #    InventDimParm inventDimParm;
        #    ;
        #    inventDimParm.initItemDimension(_dimGroupId);
        #    inventDimParm.toggleAllInventDim();
        #    this.clearNotSelectedDim(inventDimParm);
        #}
      ENDSOURCE
      SOURCE #clearNotActiveDim
        #public boolean clearNotActiveDim(InventDimGroupId _dimGroupId)
        #{
        #    InventDimSearch dimSearch = new InventDimSearch();
        #    boolean         ret = false;
        #    Integer         x;
        #
        #    if (dimSearch.first(_dimGroupId))
        #    do
        #    {
        #        x = dimSearch.dimFieldId();
        #
        #        if (!dimSearch.dimActive() && this.(x))
        #        {
        #            this.(x) = InventDim::emptyDimField(x);
        #            ret = true;
        #        }
        #    } while (dimSearch.next(_dimGroupId));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #clearNotCovPrDim
        #public boolean clearNotCovPrDim(InventDimGroupId _dimGroupId)
        #{
        #    InventDimSearch dimSearch = new InventDimSearch();
        #    boolean         ret = false;
        #    Integer         x;
        #
        #    if (dimSearch.first(_dimGroupId))
        #    do
        #    {
        #        x = dimSearch.dimFieldId();
        #
        #        if ((!dimSearch.dimActive() || ! dimSearch.dimCovPrDimension()) && this.(x))
        #        {
        #            this.(x) = InventDim::emptyDimField(x);
        #            ret = true;
        #        }
        #    } while (dimSearch.next(_dimGroupId));
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #clearNotItemDim
        #public void clearNotItemDim(InventDimGroupId    _dimGroupId)
        #{
        #    InventDimParm inventDimParm;
        #    ;
        #    inventDimParm.initItemDimension(_dimGroupId);
        #    this.clearNotSelectedDim(inventDimParm);
        #}
      ENDSOURCE
      SOURCE #clearNotSelectedDim
        #public void clearNotSelectedDim(InventDimParm inventDimParm)
        #{
        #    container dimFields = InventDim::dimFieldList();
        #    int       h,len;
        #    fieldId   x,y;
        #
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        if (this.(x))
        #        {
        #            y = InventDim::dim2dimParm(x);
        #            if (!inventDimParm.(y))
        #                this.(x) = InventDim::emptyDimField(x);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #clearNotSiteAndItemDim
        #/// <summary>
        #/// Clear all information in inventDim, but keep the values of the site and inventory dimensions.
        #/// </summary>
        #/// <param name="_dimGroupId">
        #/// Information about which dimensions that are active.
        #/// </param>
        #
        #public void clearNotSiteAndItemDim(InventDimGroupId _dimGroupId)
        #{
        #    InventDimParm inventDimParm;
        #    ;
        #    inventDimParm.setActiveSiteAndItemDimensions(_dimGroupId);
        #    this.clearNotSelectedDim(inventDimParm);
        #}
      ENDSOURCE
      SOURCE #clearOneCovDim
        #public boolean clearOneCovDim()
        #{
        #    container           sortedCovDimFields  = classfactory.inventDimGlobal().dimCovDimEnabledFieldList(false);
        #    int                 h;
        #    fieldId             x;
        #    ;
        #
        #    for (h=conlen(sortedCovDimFields); h>=1; h--)
        #    {
        #        x = conpeek(sortedCovDimFields, h);
        #        if (this.(x))
        #        {
        #            this.(x) = InventDim::emptyDimField(x);
        #            return true;
        #        }
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #commonDenominatorUsedDim
        #public void commonDenominatorUsedDim(InventDimGroupId _dimGroupId,
        #                              InventDim        _origDim)
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::activeFields(_dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        if (this.(x) != _origDim.(x))
        #            _origDim.(x) = InventDim::emptyDimField(x);
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #copyActivatePurchPriceAll
        #public void copyActivatePurchPriceAll(
        #        InventDimGroupId  _dimGroupId,
        #        InventDim         _fromInventDim)
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::activatePurchPriceAllFields(_dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        this.(x) = _fromInventDim.(x);
        #    }
        #}
      ENDSOURCE
      SOURCE #copyActivateSalesPriceAll
        #public void copyActivateSalesPriceAll(
        #        InventDimGroupId  _dimGroupId,
        #        InventDim         _fromInventDim)
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::activateSalesPriceAllFields(_dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        this.(x) = _fromInventDim.(x);
        #    }
        #}
      ENDSOURCE
      SOURCE #copyDimFinancial
        #public void copyDimFinancial(
        #    InventDimGroupId  _dimGroupId,
        #    InventDim         _fromInventDim
        #    )
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::financialInventFields(_dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        this.(x) = _fromInventDim.(x);
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #copyDimParmDim
        #public void copyDimParmDim(
        #        InventDimGroupId _dimGroupId,
        #        InventDim        _fromInventDim,
        #        InventDimParm    _inventDimParmSelected)
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::activeFields(_dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        if (_inventDimParmSelected.(InventDim::dim2dimParm(x)))
        #        {
        #            this.(x) = _fromInventDim.(x);
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #copyItemDim
        #public void copyItemDim(
        #        InventDimGroupId  _dimGroupId,
        #        InventDim         _fromInventDim)
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::itemDimensionFields(_dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        this.(x) = _fromInventDim.(x);
        #    }
        #}
      ENDSOURCE
      SOURCE #copyPrimaryDim
        #public void copyPrimaryDim(
        #        InventDimGroupId _dimGroupId,
        #        InventDim        _fromInventDim)
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::primaryDimFields(_dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        this.(x) = _fromInventDim.(x);
        #    }
        #}
      ENDSOURCE
      SOURCE #delete
        #public void delete(boolean doDelete = false)
        #{
        #    if (doDelete)
        #        super();
        #}
      ENDSOURCE
      SOURCE #dimValue2str
        #public str dimValue2str(fieldId dimFieldId)
        #{
        #    DictField df = new DictField(tablenum(InventDim),dimFieldId);
        #    switch(df.baseType())
        #    {
        #        case Types::String  : return this.(dimFieldId);
        #        case Types::Integer : return int2str(this.(dimFieldId));
        #        case Types::Real    : return num2str(this.(dimFieldId),-1,-1,-1,-1);
        #        case Types::Date    : return date2str(this.(dimFieldId),123,-1,-1,-1,-1,-1, DateFlags::FormatAll);
        #        case Types::Enum    : return enum2str(this.(dimFieldId));
        #        case Types::Int64   : return int642str(this.(dimFieldId));
        #        case Types::Guid    : return this.(dimFieldId);
        #    }
        #
        #    throw error(strfmt("@SYS76481",df.baseType()));
        #}
      ENDSOURCE
      SOURCE #initFromInventDim
        #public void initFromInventDim(
        #        InventDim _inventDim,
        #        container dimFields = InventDim::dimFieldList())
        #{
        #    int h,y;
        #    ;
        #    for (h=1;h<=conlen(dimFields);h++)
        #    {
        #        y = conpeek(dimFields,h);
        #        this.(y) = _inventDim.(y);
        #    }
        #}
      ENDSOURCE
      SOURCE #initFromInventDimCombination
        #public void initFromInventDimCombination(InventDimCombination inventDimCombination)
        #{
        #    ;
        #    #InventDimDevelop
        #
        #    this.ConfigId      = inventDimCombination.ConfigId;
        #    this.InventSizeId  = inventDimCombination.InventSizeId;
        #    this.InventColorId = inventDimCombination.InventColorId;
        #}
      ENDSOURCE
      SOURCE #initFromInventLocation
        #public void initFromInventLocation(InventLocation _inventLocation, InventDimGroupId _dimGroupId = '')
        #{
        #    if (prmisdefault(_dimGroupId))
        #    {
        #        this.InventStorageDimMap::initFromInventLocation(_inventLocation);
        #    }
        #    else
        #    {
        #        this.InventStorageDimMap::initFromInventLocation(_inventLocation,_dimGroupId);
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #initFromInventLocationAndDefault
        #/// <summary>
        #/// Initializes the current InventDim record based on an InventLocation record and an itemID.
        #/// </summary>
        #/// <param name="_inventLocation">
        #/// A record of type inventLocation.
        #/// </param>
        #/// <param name="_itemId">
        #/// A string that holds the itemID.
        #/// </param>
        #/// <param name="_inventDirection">
        #/// An enum of type InventDirection that determines whether this relates to an issue or receipt.
        #/// </param>
        #/// <param name="_inventDimParm">
        #/// A record of type inventDimParm. This record determines which of the inventDim fields that should be initialized.
        #/// </param>
        #/// <param name="_dimGroupId">
        #/// A string that holds the inventory dimensiong group ID.
        #/// </param>
        #public void initFromInventLocationAndDefault(   InventLocation     _inventLocation,
        #                                                ItemId             _itemId,
        #                                                InventDirection    _inventDirection,
        #                                                InventDimParm      _inventDimParm,
        #                                                InventDimGroupId   _dimGroupId = InventTable::find(_itemId).DimGroupId)
        #{
        #    InventDim   inventDim;
        #    ;
        #
        #    if (_inventDimParm.InventSiteIdFlag)
        #    {
        #        this.initFromInventLocation(_inventLocation, _dimGroupId);
        #    }
        #
        #    if (_inventDimParm.InventLocationIdFlag)
        #    {
        #        this.InventLocationId = _inventLocation.InventLocationId;
        #
        #        if (   _inventDimParm.wmsLocationIdFlag
        #           && _inventDirection != InventDirection::None)
        #        {
        #            inventDim = InventDim::findOrCreate(this);
        #            this.wmsLocationId = WMSLocation::defaultItemLocation(_itemId,_inventDirection,inventDim).wmsLocationId;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #initFromInventTable
        #/// <summary>
        #/// Initializes the current InventDim buffer with default inventory dimensions from an item.
        #/// </summary>
        #/// <param name="_inventTable">
        #/// The InventTable buffer that the default inventory dimensions should be taken from.
        #/// </param>
        #/// <param name="_setupType">
        #/// The type of the item order settings that the default site and warehouse dimensions should be taken from.
        #/// </param>
        #/// <param name="_inventDimDefault">
        #/// The InventDim buffer with the preferred dimensions that should be used.
        #/// If the default site and warehouse values on the item order settings do not have Mandatory flags set, then the preferred values will be used.
        #/// Note, if the preferred warehouse dimension does not belong to the default site, e.g. when a Mandatory site has been taken from the item order settings,
        #/// then the default warehouse from the item order settings will be used instead.
        #/// If there is passed configuration and/or size and/or color in the InventDim buffer the values will be kept if the item dimension is active for the item
        #/// </param>
        #
        #public void initFromInventTable(InventTable                 _inventTable,
        #                                InventItemOrderSetupType    _setupType          = InventItemOrderSetupType::Invent,
        #                                InventDim                   _inventDimDefault   = null)
        #{
        #    InventDim   inventDim;
        #    ;
        #    // default site
        #    this.InventSiteId       = _inventTable.inventItemOrderSetupMap(_setupType).inventSiteId(_inventDimDefault.InventSiteId, _inventTable);
        #
        #    // default warehouse
        #    inventDim.clear();
        #    inventDim.InventSiteId  = this.InventSiteId;
        #
        #    if(inventDim.InventSiteId)
        #    {
        #        this.InventLocationId   = _inventTable.inventItemOrderSetupMap(_setupType,
        #                                                                       InventDim::findOrCreate(inventDim).InventDimId).inventLocationId(_inventDimDefault.InventLocationId,
        #                                                                                                                                        _inventTable,
        #                                                                                                                                        this.InventSiteId);
        #    }
        #    else
        #    {
        #        this.InventLocationId   = _inventTable.inventItemOrderSetupMap(_setupType,
        #                                                                       InventDim::inventDimIdBlank()).inventLocationId(_inventDimDefault.InventLocationId,
        #                                                                                                                       _inventTable,
        #                                                                                                                       this.InventSiteId);
        #    }
        #
        #    this.initFromInventLocation(this.inventLocation(), _inventTable.DimGroupId);
        #
        #    // default item dimensions
        #    this.ConfigId       = _inventTable.configActive() ? _inventDimDefault.ConfigId      ? _inventDimDefault.ConfigId      : _inventTable.StandardConfigId      : '';
        #    this.InventSizeId   = _inventTable.sizeActive()   ? _inventDimDefault.InventSizeId  ? _inventDimDefault.InventSizeId  : _inventTable.StandardInventSizeId  : '';
        #    this.InventColorId  = _inventTable.colorActive()  ? _inventDimDefault.InventColorId ? _inventDimDefault.InventColorId : _inventTable.StandardInventColorId : '';
        #}
        #
      ENDSOURCE
      SOURCE #initItemDimFromInventTable
        #public void initItemDimFromInventTable(InventTable inventTable)
        #{
        #    this.initFromInventTable(inventTable);
        #    this.clearNotItemDim(inventTable.DimGroupId);
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert(boolean doInsert = false)
        #{
        #    if (doInsert)
        #    {
        #        if (!this.InventDimId)
        #            throw(error(Error::wrongUseOfFunction(funcname())));
        #
        #        super();
        #    }
        #}
      ENDSOURCE
      SOURCE #inventLocation
        #public InventLocation inventLocation(boolean _update = false)
        #{
        #    return InventLocation::find(this.InventLocationId, _update);
        #}
      ENDSOURCE
      SOURCE #inventSite
        #public InventSite inventSite(boolean _update = false)
        #{
        #    return InventSite::find(this.InventSiteId, _update);
        #}
      ENDSOURCE
      SOURCE #mapKey
        #public str mapKey(container dimFields = InventDim::dimFieldList())
        #{
        #    Counter             i;
        #    fieldId             fieldId;
        #    str                 s;
        #
        #    for (i=1;i<=conlen(dimFields);i++)
        #    {
        #        fieldId = conpeek(dimFields,i);
        #
        #        s+= (s ? '#' : '') + this.dimValue2str(fieldId);
        #    }
        #
        #    return s;
        #}
      ENDSOURCE
      SOURCE #mapKeyCov
        #public str mapKeyCov()
        #{
        #    container           sortedCovDimFields  = classfactory.inventDimGlobal().dimCovDimEnabledFieldList(false);
        #    Counter             i;
        #    fieldId             fieldId;
        #    str                 s;
        #
        #    for (i=conlen(sortedCovDimFields);i>=1;i--)
        #    {
        #        fieldId = conpeek(sortedCovDimFields,i);
        #        if (this.(fieldId))
        #        {
        #            s+= (s ? '#' : '') + this.dimValue2str(fieldId);
        #        }
        #    }
        #
        #    return s;
        #}
      ENDSOURCE
      SOURCE #mergeUsedDim
        #public void mergeUsedDim(
        #        InventDimGroupId _dimGroupId,
        #        InventDim        _fromInventDim,
        #        InventDim        _origFromDim = _fromInventDim)
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::activeFields(_dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        if (_fromInventDim.(x))
        #            this.(x) = _fromInventDim.(x);
        #        else
        #        if (this.(x) && this.(x) == _origFromDim.(x))   // clearing a dimension on the movement, but not on transaction
        #        {
        #            if ((x != fieldnum(InventDim,wmsLocationId) || (x == fieldnum(InventDim,wmsLocationId) && (!this.wmsLocationId || this.wmsLocation())))) // HF21_394
        #            {
        #                if (x != fieldnum(InventDim,InventLocationId)
        #                || (_fromInventDim.InventLocationId || _fromInventDim.InventSiteId == this.inventLocation().InventSiteId))
        #                    info(strfmt("@SYS73455",  new DictField(tablenum(InventDim),x).label(), this.(x)));
        #            }
        #        }
        #    }
        #
        #    if (this.InventSiteId && this.InventLocationId && this.InventSiteId != this.inventLocation().InventSiteId)
        #        this.InventLocationId = '';
        #
        #    if (this.wmsLocationId && !this.wmsLocation())
        #    {
        #        this.wmsLocationId = '';
        #        this.wmsPalletId = '';
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #modifiedField
        #public void modifiedField(fieldId _fieldId)
        #{
        #    AxInventDim  axInventDim;
        #    Object       formDataSource;
        #    ;
        #
        #    super(_fieldId);
        #
        #    if (this.isFormDataSource())
        #    {
        #        if (formDataSourceHasMethod(this.dataSource(),classstr(AxInventDim)))
        #        {
        #            formDataSource = this.dataSource();
        #            axInventDim = formDataSource.axInventDim();
        #        }
        #    }
        #    else
        #    {
        #        axInventDim = this.axInventDim();
        #    }
        #
        #    if (axInventDim)
        #    {
        #        axInventDim.setFieldAsTouched(_fieldId);
        #        axInventDim.modify();
        #        if (this.isFormDataSource())
        #        {
        #            if (formDataSourceHasMethod(this.dataSource(),identifierstr(fieldModified)))
        #            {
        #                formDataSource = this.dataSource();
        #                formDataSource.fieldModified();
        #            }
        #        }
        #    }
        #    else
        #    {
        #        switch (_fieldId)
        #        {
        #            case fieldnum(InventDim, InventSiteId):
        #                this.InventStorageDimMap::modifiedField(fieldnum(InventStorageDimMap, InventSiteId));
        #                break;
        #
        #            case fieldnum(InventDim, InventLocationId):
        #                this.InventStorageDimMap::modifiedField(fieldnum(InventStorageDimMap, InventLocationId));
        #                break;
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #modifiedInventSiteFromParent
        #/// <summary>
        #/// Defaults values on the current or the parent record because the InventSiteId field is modified.
        #/// </summary>
        #/// <param name="_parent">
        #/// Parent record buffer which is joined to the InventDim record buffer.
        #/// </param>
        #public void modifiedInventSiteFromParent(Common _parent)
        #{
        #    ;
        #    this.InventStorageDimMap::modifiedInventSiteFromParent(_parent);
        #}
      ENDSOURCE
      SOURCE #mustCheckItemDimCombination
        #public boolean mustCheckItemDimCombination(
        #        InventDimGroupId  _dimGroupId,
        #        boolean           _allFieldsMustbeFilled = true)
        #{
        #    int       h,z,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::itemDimensionFields(_dimGroupId);
        #
        #    if (!InventDim::systemHasMultipleItemDim())
        #        return false;
        #
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        if (this.(x) != InventDim::emptyDimField(x))
        #            z++;
        #    }
        #
        #    if (!_allFieldsMustbeFilled)
        #        return (len > 1 && z > 1) ? true : false;
        #
        #    return (len > 1 && len == z) ? true : false;
        #}
      ENDSOURCE
      SOURCE #PreFix
        #public str preFix(container dimFields = InventDim::dimFieldList())
        #{
        #    str     text;
        #    int     h,len;
        #    fieldId x;
        #
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields,h);
        #        if (this.(x))
        #            text = (text ? text + ',' : '') + new DictField(tablenum(InventDim),x).label() + '=' + this.dimValue2str(x);
        #    }
        #    return text;
        #}
      ENDSOURCE
      SOURCE #preFixItemDim
        #public FieldLabelValue preFixItemDim(InventDimGroupId  dimGroupId)
        #{
        #    FieldLabelValue text;
        #    int             h,len;
        #    fieldId         x;
        #    container       dimFields = InventDimSearch::itemDimensionFields(dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        if (this.(x))
        #            text = (text ? text + ', ' : '') + new DictField(tablenum(InventDim),x).label() + '=' + this.dimValue2str(x);
        #    }
        #    return text;
        #}
      ENDSOURCE
      SOURCE #preFixNotItemDim
        #public FieldLabelValue preFixNotItemDim(InventDimGroupId  dimGroupId)
        #{
        #    FieldLabelValue text;
        #    InventDimSearch dimSearch = new InventDimSearch();
        #    ;
        #    if (dimSearch.first(dimGroupId))
        #    do
        #    {
        #        if (this.(dimSearch.dimFieldId()) && ! dimSearch.dimItemDimension())
        #            text = (text ? text + ',' : '') + new DictField(tablenum(InventDim),dimSearch.dimFieldId()).label() + '=' + this.dimValue2str(dimSearch.dimFieldId());
        #    } while (dimSearch.next(dimGroupId));
        #    return text;
        #}
      ENDSOURCE
      SOURCE #preFixValue
        #public str preFixValue(container dimFields = InventDim::dimFieldList())
        #{
        #    Counter             i;
        #    fieldId             fieldId;
        #    str                 s;
        #
        #    for (i=1;i<=conlen(dimFields);i++)
        #    {
        #        fieldId = conpeek(dimFields,i);
        #        if (this.(fieldId))
        #            s += (s ? '/' : '') + this.dimValue2str(fieldId);
        #    }
        #
        #    return s;
        #}
      ENDSOURCE
      SOURCE #reqCovDimId
        #public ReqCovInventDimId reqCovDimId(InventDimGroupId  _dimGroupId)
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::covPrDimensionFields(_dimGroupId);
        #    InventDim inventDim;
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        inventDim.(x)  = this.(x);
        #    }
        #
        #    return InventDim::findOrCreate(inventDim).InventDimId;
        #}
      ENDSOURCE
      SOURCE #setInventSiteFromParentIfModified
        #/// <summary>
        #/// Checks whether the InventSiteId field has changed. If the field has been modified then defaulting based is InventSiteId is executed.
        #/// </summary>
        #/// <param name="_parent">
        #/// Common parent record buffer which is joined to the InventDim record buffer.
        #/// </param>
        #/// <param name="_oldInventDim">
        #/// InventDim record buffer previously referenced by the parent record buffer.
        #/// </param>
        #public void setInventSiteFromParentIfModified(Common _parent, InventDim _oldInventDim)
        #{
        #    ;
        #    if (this.InventSiteId != _oldInventDim.InventSiteId)
        #    {
        #        this.modifiedInventSiteFromParent(_parent);
        #    }
        #}
      ENDSOURCE
      SOURCE #toolTipField
        #public str toolTipField(fieldId _fieldId)
        #{
        #    str             ret;
        #    FormDataSource  formDataSource;
        #    FormDataSource  formDatasourceJoined;
        #    fieldId         fieldId;
        #    ItemId          itemId;
        #
        #    ret = super(_fieldId);
        #
        #    switch(_fieldId)
        #    {
        #        case fieldnum(InventDim, ConfigId):
        #        case fieldnum(InventDim, InventSizeId):
        #        case fieldnum(InventDim, InventColorId):
        #        case fieldnum(InventDim, InventBatchId):
        #            formDataSource = this.dataSource();
        #            if (formDataSource && formDataSource.table() == tablenum(InventDim))
        #            {
        #                formDatasourceJoined = formGetParentDatasource(formDataSource);
        #                if (formDatasourceJoined)
        #                {
        #                    fieldId = fieldname2id(formDatasourceJoined.table(),fieldstr(InventTable,ItemId));
        #                    if (fieldId)
        #                    {
        #                        itemId = formDatasourceJoined.cursor().(fieldId);
        #                        if (itemId)
        #                        {
        #                            ret = strfmt("@SYS79527", itemId, this.(_fieldId));
        #                            return ret;
        #                        }
        #                    }
        #                }
        #            }
        #            return strfmt("@SYS82282", this.(_fieldId));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #update
        #public void update(boolean doUpdate = false)
        #{
        #    if (doUpdate)
        #        super();
        #}
      ENDSOURCE
      SOURCE #validateField
        #client public boolean validateField(fieldId p1)
        #{
        #    boolean             ret;
        #    FormDataSource      parentDatasource;
        #    fieldId             itemFieldId;
        #    InventTable         inventTable;
        #    InventTable         inventTableLocal;
        #    Common              parentBuffer;
        #
        #    InventTable getInventTable()
        #    {
        #        parentDatasource = formGetParentDatasource(this.dataSource());
        #        if (parentDatasource)
        #        {
        #            // Could return zero
        #            itemFieldId = fieldname2id(parentDatasource.table(),fieldstr(InventTable,ItemId));
        #            if (itemFieldId)
        #            {
        #                inventTableLocal = InventTable::find(parentDatasource.cursor().(itemFieldId));
        #            }
        #            else if (parentDatasource.table())
        #            {
        #                parentBuffer = parentDatasource.cursor();
        #                if (parentBuffer.TableId && tableHasInstanceMethod(new DictTable(parentBuffer.TableId),identifierstr(ItemId))) // method Name
        #                    inventTableLocal = InventTable::find(parentBuffer.itemId());
        #            }
        #        }
        #        return inventTableLocal;
        #    }
        #    ;
        #    #InventDimDevelop
        #
        #    if (p1 == fieldnum(InventDim,InventSerialId))
        #        ret = true;
        #    else
        #        ret = super(p1);
        #
        #    if (ret && this.isFormDataSource() && InventDim::isFieldIdConsistentDim(p1))
        #    {
        #        parentBuffer = this.dataSource().cursor().joinParent();
        #        if (parentBuffer.TableId == tablenum(InventTrans))
        #        {
        #            if (p1 == fieldnum(InventDim, InventSiteId) && InventParameters::find().MultiSiteDimensionLink == InventMultiSiteDimensionLink::Locked)
        #                ret = checkFailed(strfmt("@SYS113048", fieldpname(InventDim, InventSiteId)));
        #            else
        #            // It is assumed that it will only be possible to edit consistent dimensions on an InventTrans record from the Edit dimensions form
        #            // In all other forms the consistent dimensions should be disabled and thereby not editable
        #                ret = Box::yesNo("@SYS107928" + '\n\n'+"@SYS62458", DialogButton::No, "@SYS6998") == DialogButton::Yes;
        #        }
        #    }
        #
        #    switch(p1)
        #    {
        #        case fieldnum(InventDim,InventBatchId):
        #            if (ret && this.InventBatchId && this.isFormDataSource())
        #            {
        #                inventTable = getInventTable();
        #                if (inventTable && inventTable.ItemId)
        #                    ret = InventBatch::checkExist(inventTable.ItemId,this.InventBatchId) && ret;
        #            }
        #            break;
        #
        #        case fieldnum(InventDim,ConfigId):
        #            if (ret && this.ConfigId && this.isFormDataSource())
        #            {
        #                inventTable = getInventTable();
        #                if (inventTable && inventTable.ItemId)
        #                {
        #                    ret = inventTable.checkConfigId(this.ConfigId);
        #                    ret = ret && InventDim::validateFieldCombination(this.dataSource(),inventTable);
        #                }
        #            }
        #            break;
        #
        #        case fieldnum(InventDim,InventSizeId):
        #            if (ret && this.InventSizeId && this.isFormDataSource())
        #            {
        #                inventTable = getInventTable();
        #                if (inventTable && inventTable.ItemId)
        #                {
        #                    ret = inventTable.checkSizeId(this.InventSizeId);
        #                    ret = ret && InventDim::validateFieldCombination(this.dataSource(),inventTable);
        #                }
        #            }
        #            break;
        #
        #        case fieldnum(InventDim,InventColorId):
        #            if (ret && this.InventColorId && this.isFormDataSource())
        #            {
        #                inventTable = getInventTable();
        #                if (inventTable)
        #                {
        #                    ret = inventTable.checkColorId(this.InventColorId);
        #                    ret = ret && InventDim::validateFieldCombination(this.dataSource(),inventTable);
        #                }
        #            }
        #            break;
        #
        #        case fieldnum (InventDim, InventLocationId):
        #            ret = ret & this.InventStorageDimMap::validateField(fieldnum(InventStorageDimMap, InventLocationId));
        #            break;
        #    }
        #    return ret;
        #}
        #
        #
      ENDSOURCE
      SOURCE #validateItemDimension
        #public boolean validateItemDimension(fieldId f, InventTable inventTable)
        #{
        #    boolean             ok = true;
        #
        #    // Check item dimension 'ConfigId' in related main table
        #    if (f == fieldnum(InventDim,ConfigId) && this.(f) && !inventTable.checkConfigId(this.ConfigId))
        #        ok = false;
        #
        #    // Check item dimension 'InventSizeId' in related main table
        #    if (f == fieldnum(InventDim,InventSizeId) && this.(f) && !inventTable.checkSizeId(this.InventSizeId))
        #        ok = false;
        #
        #    // Check item dimension 'InventColorId' in related main table
        #    if (f == fieldnum(InventDim,InventColorId) && this.(f) && !inventTable.checkColorId(this.InventColorId))
        #        ok = false;
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #validateWrite
        #public boolean validateWrite(boolean doValidate = false)
        #{
        #    boolean ret;
        #
        #    if (!doValidate)
        #        return true;
        #
        #    ret = super();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateWriteItemDim
        #public boolean validateWriteItemDim(ItemId _itemId, boolean _checkMandatory = true)
        #{
        #    InventTable         inventTable = InventTable::find(_itemId);
        #    boolean             ok = true;
        #    int                 h,len;
        #    fieldId             x;
        #    container           dimFields = InventDimSearch::itemDimensionFields(inventTable.DimGroupId);
        #    ;
        #    #InventDimDevelop  // If further item dimensions are added, they must be checked too
        #
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #
        #        if (_checkMandatory && !this.(x))
        #            ok = checkFailed(strfmt("@SYS54774",fieldid2pname(this.TableId, x)));
        #
        #        if( ! this.validateItemDimension(x, inventTable) )
        #            ok = false;
        #    }
        #
        #    return ok && this.validateWriteItemDimCombination(_itemId,_checkMandatory);
        #}
        #
      ENDSOURCE
      SOURCE #validateWriteItemDimCombination
        #public boolean validateWriteItemDimCombination(ItemId _itemId, boolean _checkMandatory = true)
        #{
        #
        #    if (!this.mustCheckItemDimCombination(InventTable::find(_itemId).DimGroupId,_checkMandatory))
        #        return true;
        #
        #    if (_checkMandatory)
        #    {
        #        if (InventDimCombination::exist(_itemId,this))
        #            return true;
        #    }
        #    else
        #    {
        #        if (InventDimCombination::existEntry(_itemId,this))
        #            return true;
        #    }
        #    return checkFailed(strfmt("@SYS73899",this.preFixItemDim(InventTable::find(_itemId).DimGroupId),_itemId));
        #}
      ENDSOURCE
      SOURCE #validateWriteMandatoryAndItemDim
        #public boolean validateWriteMandatoryAndItemDim(ItemId _itemId)
        #{
        #    InventTable         inventTable = InventTable::find(_itemId);
        #    boolean             ok = true;
        #    int                 h,len;
        #    fieldId             x;
        #    container           mandatoryFields = InventDimSearch::mandatoryFields(inventTable.DimGroupId);
        #    container           itemDimensionFields = InventDimSearch::itemDimensionFields(inventTable.DimGroupId);
        #    ;
        #    #InventDimDevelop  // If further item dimensions are added, they must be checked too
        #
        #    len = conlen(mandatoryFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(mandatoryFields, h);
        #
        #        if (confind(itemDimensionFields, x))
        #        {
        #            if (!this.(x))
        #                ok = checkFailed(strfmt("@SYS54774",fieldid2pname(this.TableId, x)));
        #
        #            if( ! this.validateItemDimension(x, inventTable) )
        #                ok = false;
        #        }
        #        else
        #        {
        #            if(!this.(x))
        #                ok = checkFailed(strfmt("@SYS103633",fieldid2pname(this.TableId, x)));
        #        }
        #    }
        #
        #    return ok && this.validateWriteItemDimCombination(_itemId, true);
        #}
        #
      ENDSOURCE
      SOURCE #wMSLocation
        #public WMSLocation wmsLocation(boolean _update = false)
        #{
        #    return WMSLocation::find(this.wmsLocationId, this.InventLocationId, _update);
        #}
      ENDSOURCE
      SOURCE #callerInventDimDatasource
        #client server static public FormDataSource callerInventDimDatasource(Args callerArgs)
        #{
        #
        #    FormDataSource          callerDS;
        #    InventTrans             inventTrans;
        #    InventSum               inventSum;
        #    InventDim               inventDim;
        #    ;
        #    switch (callerArgs.dataset())
        #    {
        #        case tablenum(InventTrans):
        #            inventTrans = callerArgs.record();
        #            callerDS    = inventTrans.joinChild().dataSource();
        #            break;
        #
        #        case tablenum(InventSum):
        #            inventSum   = callerArgs.record();
        #            callerDS    = inventSum.joinChild().dataSource();
        #            break;
        #
        #        case tablenum(InventDim) :
        #            inventDim   = callerArgs.record();
        #            callerDS    = inventDim.dataSource();
        #            break;
        #    }
        #
        #    return callerDS;
        #
        #}
      ENDSOURCE
      SOURCE #checkRenameItemDim
        #static client server public boolean checkRenameItemDim(fieldId _dimFieldId)
        #{
        #    ;
        #    #InventDimDevelop
        #
        #    if (!InventDim::isFieldIdItemDim(_dimFieldId))
        #        return checkFailed(strfmt("@SYS73720"));
        #
        #    if (_dimFieldId == fieldnum(InventDim,ConfigId))
        #        return checkFailed(strfmt("@SYS73722",new DictType(extendedtypenum(ConfigId)).label()));
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkUpdateConsistent
        #static public boolean checkUpdateConsistent(InventDimGroupId _dimGroupId,InventDim _fromInventDim, InventDim _toInventDim)
        #{
        #    boolean   ok          = true;
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::consistentFields(_dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        if (_fromInventDim.(x) != _toInventDim.(x))
        #            ok = checkFailed(strfmt("@SYS107444",fieldid2pname(tablenum(InventDim), x)));
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #checkUpdateEstimatedMarked
        #server static public boolean checkUpdateEstimatedMarked(InventMovement _movement, InventMovement _movement_orig)
        #{
        #    InventDim       inventDim;
        #    InventDim       inventDimOrig;
        #    InventTrans     inventTrans;
        #    int             h,len;
        #    fieldId         x;
        #    container       dimFields;
        #    ;
        #
        #    if (_movement_orig && _movement.inventDimId() != _movement_orig.inventDimId())
        #    {
        #        if (( select firstonly RecId from inventTrans
        #                index hint TransIdIdx
        #                    where inventTrans.InventTransId == _movement.transId()              &&
        #                         (inventTrans.StatusReceipt == StatusReceipt::Ordered           ||
        #                          inventTrans.StatusReceipt == StatusReceipt::QuotationReceipt  ||
        #                          inventTrans.StatusIssue   == StatusIssue::OnOrder             ||
        #                          inventTrans.StatusIssue   == StatusIssue::ReservPhysical      ||
        #                          inventTrans.StatusIssue   == StatusIssue::ReservOrdered       ||
        #                          inventTrans.StatusIssue   == StatusIssue::QuotationIssue)     &&
        #                          inventTrans.InventRefTransId != '').RecId)
        #        {
        #
        #            inventDim       = _movement.inventdim();
        #            inventDimOrig   = _movement_orig.inventdim();
        #            dimFields       = InventDimSearch::financialInventFields(_movement.dimGroupId());
        #            len             = conlen(dimFields);
        #            for (h=1;h<=len;h++)
        #            {
        #                x = conpeek(dimFields, h);
        #                if (inventDim.(x) != inventDimOrig.(x))
        #                    return false;
        #            }
        #        }
        #    }
        #
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #checkUpdateEstimatedMovement
        #server static public boolean checkUpdateEstimatedMovement(InventMovement  _movement, InventMovement  _movement_orig)
        #{
        #    InventDimSearch     dimSearch;
        #    InventDim           inventDim;
        #    InventDim           inventDim_orig;
        #    InventTable         inventTable;
        #    Integer             x;
        #    boolean             ok = true;
        #    boolean             updateDim;
        #    ;
        #
        #    if (!_movement_orig || _movement.inventDimId() != _movement_orig.inventDimId())
        #    {
        #        dimSearch       = _movement.dimSearch();
        #        inventDim       = _movement.inventdim();
        #        inventTable     = _movement.inventTable();
        #
        #        if (_movement_orig)
        #            inventDim_orig  = _movement_orig.inventdim();
        #
        #        if (dimSearch.first(_movement.dimGroupId()))
        #        do
        #        {
        #            x = dimSearch.dimFieldId();
        #
        #            if (dimSearch.dimActive())
        #            {
        #                if (!inventDim.checkDimSearchFieldId(dimSearch,inventTable,inventDim_orig,(_movement && _movement_orig ? _movement : null)))
        #                    ok = false;
        #            }
        #            else
        #            {
        #                x = dimSearch.dimFieldId();
        #
        #                if (inventDim.(x))
        #                {
        #                    inventDim.(x)   = InventDim::emptyDimField(x);
        #                    updateDim       = true;
        #                }
        #            }
        #
        #        } while (dimSearch.next(_movement.dimGroupId()));
        #
        #        ok = ok && inventDim.checkItemDimCombination(_movement.itemId(),_movement.dimGroupId());
        #    }
        #
        #    if (updateDim && ok)
        #    {
        #        inventDim = InventDim::findOrCreate(inventDim);
        #        _movement.setInventDimId(inventDim.InventDimId);
        #        _movement.inventdim(inventDim);
        #    }
        #    return ok;
        #}
        #
        #
      ENDSOURCE
      SOURCE #create
        #/// <summary>
        #/// Creates a new <c>InventDim</c> record with the same values as specified in the calling <c>_inventDim</c> buffer.
        #/// </summary>
        #/// <param name="_inventDim">
        #/// The _inventDim buffer contains all the inventory dimensions for the new record.
        #/// </param>
        #/// <returns>
        #/// A buffer from the InventDim table.
        #/// </returns>
        #/// <remarks>
        #/// Will fail if a record with the exact same dimensions already exists.
        #/// </remarks>
        #/// <exception cref="Exception::Error">
        #/// Number sequence for InventDimId has not been properly configured.
        #/// </exception>
        #server static public InventDim create(InventDim  _inventDim)
        #{
        #    InventDim   inventDim;
        #    InventDimId inventDimId;
        #    ;
        #    ttsbegin;
        #
        #    inventDimId = InventDim::newDimId();
        #    if (!inventDimId)
        #    {
        #        info("@SYS72790");
        #        throw error("@SYS18447");
        #    }
        #    inventDim.InventDimId      =  inventDimId;
        #    inventDim.ConfigId         = _inventDim.ConfigId;
        #    inventDim.InventSizeId     = _inventDim.InventSizeId;
        #    inventDim.InventColorId    = _inventDim.InventColorId;
        #    inventDim.InventSiteId     = _inventDim.InventSiteId;
        #    inventDim.InventLocationId = _inventDim.InventLocationId;
        #    inventDim.InventBatchId    = _inventDim.InventBatchId;
        #    inventDim.wmsLocationId    = _inventDim.wmsLocationId;
        #    inventDim.wmsPalletId      = _inventDim.wmsPalletId;
        #    inventDim.InventSerialId   = _inventDim.InventSerialId;
        #    inventDim.insert(true);
        #
        #    #inventDimDevelop
        #
        #    ttscommit;
        #
        #    return inventDim;
        #}
      ENDSOURCE
      SOURCE #dim2dimCombination
        #static public fieldId dim2dimCombination(fieldId dimField)
        #{
        #    ;
        #    #InventDimDevelop
        #
        #    switch (dimField)
        #    {
        #        case (fieldnum(InventDim,ConfigId))         : return fieldnum(InventDimCombination,ConfigId);
        #        case (fieldnum(InventDim,InventSizeId))     : return fieldnum(InventDimCombination,InventSizeId);
        #        case (fieldnum(InventDim,InventColorId))    : return fieldnum(InventDimCombination,InventColorId);
        #    }
        #    throw error(strfmt("@SYS54431",funcname()));
        #}
        #
      ENDSOURCE
      SOURCE #dim2dimParm
        #static public fieldId dim2dimParm(fieldId dimField)
        #{
        #    ;
        #    #InventDimDevelop
        #
        #    switch (dimField)
        #    {
        #        case (fieldnum(InventDim,ConfigId))         : return fieldnum(InventDimParm,ConfigIdFlag);
        #        case (fieldnum(InventDim,InventSizeId))     : return fieldnum(InventDimParm,InventSizeIdFlag);
        #        case (fieldnum(InventDim,InventColorId))    : return fieldnum(InventDimParm,InventColorIdFlag);
        #        case (fieldnum(InventDim,InventSiteId))     : return fieldnum(InventDimParm,InventSiteIdFlag);
        #        case (fieldnum(InventDim,InventLocationId)) : return fieldnum(InventDimParm,InventLocationIdFlag);
        #        case (fieldnum(InventDim,InventBatchId))    : return fieldnum(InventDimParm,InventBatchIdFlag);
        #        case (fieldnum(InventDim,wmsLocationId))    : return fieldnum(InventDimParm,wmsLocationIdFlag);
        #        case (fieldnum(InventDim,wmsPalletId))      : return fieldnum(InventDimParm,wmsPalletIdFlag);
        #        case (fieldnum(InventDim,InventSerialId))   : return fieldnum(InventDimParm,InventSerialIdFlag);
        #    }
        #
        #    throw error(strfmt("@SYS54431",funcname()));
        #}
        #
      ENDSOURCE
      SOURCE #dimEnabledFieldList
        #static public container dimEnabledFieldList(boolean fieldnames = false)
        #{
        #    return classfactory.inventDimGlobal().dimEnabledFieldList(fieldnames);
        #}
      ENDSOURCE
      SOURCE #dimFieldList
        #static public container dimFieldList(boolean fieldNames = false)
        #{
        #    return classfactory.inventDimGlobal().dimFieldList(fieldNames);
        #}
      ENDSOURCE
      SOURCE #dimId2ReqCovDimId
        #static public ReqCovInventDimId dimId2ReqCovDimId(InventDimId  _inventDimId,InventDimGroupId _dimGroupId)
        #{
        #    return InventDim::find(_inventDimId).reqCovDimId(_dimGroupId);
        #}
      ENDSOURCE
      SOURCE #dimItemDimEnabledFieldList
        #static public container dimItemDimEnabledFieldList(boolean fieldnames = false)
        #{
        #    return classfactory.inventDimGlobal().dimItemDimEnabledFieldList(fieldnames);
        #}
      ENDSOURCE
      SOURCE #dimParm2dim
        #static public fieldId dimParm2dim(fieldId dimParmField)
        #{
        #    ;
        #    #InventDimDevelop
        #
        #    switch (dimParmField)
        #    {
        #        case (fieldnum(InventDimParm,ConfigIdFlag))         : return fieldnum(InventDim,ConfigId);
        #        case (fieldnum(InventDimParm,InventSizeIdFlag))     : return fieldnum(InventDim,InventSizeId);
        #        case (fieldnum(InventDimParm,InventColorIdFlag))    : return fieldnum(InventDim,InventColorId);
        #        case (fieldnum(InventDimParm,InventSiteIdFlag))     : return fieldnum(InventDim,InventSiteId);
        #        case (fieldnum(InventDimParm,InventLocationIdFlag)) : return fieldnum(InventDim,InventLocationId);
        #        case (fieldnum(InventDimParm,InventBatchIdFlag))    : return fieldnum(InventDim,InventBatchId);
        #        case (fieldnum(InventDimParm,wmsLocationIdFlag))    : return fieldnum(InventDim,wmsLocationId);
        #        case (fieldnum(InventDimParm,wmsPalletIdFlag))      : return fieldnum(InventDim,wmsPalletId);
        #        case (fieldnum(InventDimParm,InventSerialIdFlag))   : return fieldnum(InventDim,InventSerialId);
        #    }
        #
        #    throw error(strfmt("@SYS54431",funcname()));
        #}
        #
        #
      ENDSOURCE
      SOURCE #dimReportStr
        #static public str 255 dimReportStr(
        #        InventDim     inventDim,
        #        fieldId       fieldId,
        #        ReportDesign  rd)
        #{
        #    Label   label;
        #    ;
        #
        #    if (inventDim.(fieldId))
        #    {
        #        label = new Label(rd.languageID() ? rd.languageID() : infolog.language());
        #        return label.extractString(new SysDictField(tablenum(InventDim), fieldId).labelLabel()) + ' : ' + inventDim.(fieldId);
        #    }
        #
        #    return '';
        #}
        #
        #
      ENDSOURCE
      SOURCE #dimReportStrAll
        #static public str 255 dimReportStrAll(
        #        InventDim    inventDim,
        #        container    dimfields,
        #        ReportDesign rd)
        #{
        #    int         h,f;
        #    str         a = '';
        #    Label       label;
        #    ;
        #
        #    for (h=1;h<=conlen(dimfields);h++)
        #    {
        #        f = conpeek(dimFields,h);
        #        if (inventDim.(f))
        #        {
        #            label = new Label(rd.languageID() ? rd.languageID() : infolog.language());
        #            a += label.extractString(new SysDictField(tablenum(InventDim), f).labelLabel()) + ' : ' + inventDim.(f) + '   ';
        #        }
        #    }
        #
        #    return a;
        #}
        #
      ENDSOURCE
      SOURCE #dimStorageDimEnabledFieldList
        #static public container dimStorageDimEnabledFieldList(boolean fieldnames = false)
        #{
        #    return classfactory.inventDimGlobal().dimStorageDimEnabledFieldList(fieldnames);
        #}
      ENDSOURCE
      SOURCE #emptyDimField
        #static public anytype emptyDimField(fieldId dimFieldId)
        #{
        #    DictField df;
        #    #InventDimDevelop
        #
        #    switch (dimFieldId)
        #    {
        #        case fieldnum(InventDim,ConfigId)         :
        #        case fieldnum(InventDim,InventSizeId)     :
        #        case fieldnum(InventDim,InventColorId)    :
        #        case fieldnum(InventDim,InventSiteId)     :
        #        case fieldnum(InventDim,InventLocationId) :
        #        case fieldnum(InventDim,InventBatchId)    :
        #        case fieldnum(InventDim,wmsLocationId)    :
        #        case fieldnum(InventDim,wmsPalletId)      :
        #        case fieldnum(InventDim,InventSerialId)   :
        #            return '';
        #    }
        #
        #    df = new DictField(tablenum(InventDim),dimFieldId);
        #    switch(df.baseType())
        #    {
        #        case Types::String  : return '';
        #        case Types::Integer : return 0;
        #        case Types::Real    : return 0;
        #        case Types::Date    : return dateNull();
        #        case Types::Enum    : return 0;
        #        case Types::Int64   : return 0;
        #        case Types::Guid    : return '';
        #    }
        #
        #    throw error(strfmt("@SYS76481",df.baseType()));
        #}
        #
      ENDSOURCE
      SOURCE #exist
        #static public boolean exist(InventDimId _inventDimId)
        #{
        #    return _inventDimId && (select firstonly inventDim
        #                index hint DimIdIdx
        #                where inventDim.InventDimId == _inventDimId
        #           ).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #find
        #static public InventDim find(InventDimId inventDimId, boolean _forupdate = false)
        #{
        #    InventDim inventDim;
        #    ;
        #
        #    if (inventDimId)
        #    {
        #        if (_forupdate)
        #            inventDim.selectForUpdate(_forupdate);
        #
        #        select firstonly inventDim
        #            index hint DimIdIdx
        #            where inventDim.InventDimId  == inventDimId;
        #    }
        #
        #    return inventDim;
        #}
      ENDSOURCE
      SOURCE #findByBatch
        #static public InventDim findByBatch(InventBatchId inventBatchId, boolean _forupdate = false)
        #{
        #    InventDim inventDim;
        #    ;
        #
        #    if (inventBatchId)
        #    {
        #        if (_forupdate)
        #            inventDim.selectForUpdate(_forupdate);
        #
        #        select firstonly inventDim
        #            index hint DimIdIdx
        #            where inventDim.inventBatchId  == inventBatchId;
        #    }
        #
        #    return inventDim;
        #}
      ENDSOURCE
      SOURCE #findDim
        #client server static public InventDim findDim(InventDim  _inventDim, boolean _forupdate = false)
        #{
        #    InventDim   inventDim;
        #    ;
        #    if (_forupdate)
        #        inventDim.selectForUpdate(_forupdate);
        #
        #    select firstonly inventDim
        #        where inventDim.ConfigId         == _inventDim.ConfigId
        #           && inventDim.InventSizeId     == _inventDim.InventSizeId
        #           && inventDim.InventColorId    == _inventDim.InventColorId
        #           && inventDim.InventSiteId     == _inventDim.InventSiteId
        #           && inventDim.InventLocationId == _inventDim.InventLocationId
        #           && inventDim.InventBatchId    == _inventDim.InventBatchId
        #           && inventDim.wmsLocationId    == _inventDim.wmsLocationId
        #           && inventDim.wmsPalletId      == _inventDim.wmsPalletId
        #           && inventDim.InventSerialId   == _inventDim.InventSerialId;
        #
        #    #inventDimDevelop
        #
        #    return inventDim;
        #}
        #
        #
      ENDSOURCE
      SOURCE #findItemIdFromJumpRef
        #static public ItemId findItemIdFromJumpRef(Args args)
        #{
        #    FormRun         formRun;
        #    FormDataSource  formDataSource;
        #    fieldId         fieldId;
        #    PriceDiscTable  priceDiscTable;
        #    ;
        #    if (args && args.caller())
        #    {
        #        if (SysDictClass::isEqualOrSuperclass(classidget(args.caller()), classnum(FormRun)))
        #        {
        #            formRun = args.caller();
        #            formDataSource = formRun.dataSource();
        #            if (formDataSource.table() == tablenum(InventDim) && formDataSource.joinSource())
        #            {
        #                formDataSource = formGetParentDatasource(formDataSource);
        #                fieldId = fieldname2id(formDataSource.table(),fieldstr(InventTable,ItemId));
        #                if (fieldId)
        #                {
        #                    return formDataSource.cursor().(fieldId);
        #                }
        #                else
        #                {
        #                    switch(formDataSource.table())
        #                    {
        #                        case tablenum(PriceDiscTable):
        #                            priceDiscTable = formDataSource.cursor();
        #                            if (priceDiscTable.ItemCode == TableGroupAll::Table)
        #                                return priceDiscTable.ItemRelation;
        #                            break;
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                switch(formDataSource.table())
        #                {
        #                    case tablenum(ConfigTable):
        #                        return formDataSource.cursor().(fieldnum(ConfigTable, ItemId));
        #                    case tablenum(InventBatch):
        #                        return formDataSource.cursor().(fieldnum(InventBatch, ItemId));
        #                    case tablenum(InventSize):
        #                        return formDataSource.cursor().(fieldnum(InventSize, ItemId));
        #                }
        #            }
        #        }
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #findOrCreate
        #client server static public InventDim findOrCreate(InventDim  _inventDim)
        #{
        #    InventDim   inventDim;
        #    ;
        #    inventDim = InventDim::findDim(_inventDim);
        #    if (!inventDim.RecId)
        #    {
        #        inventDim =  InventDim::create(_inventDim);
        #    }
        #    return inventDim;
        #}
      ENDSOURCE
      SOURCE #findOrCreateBlank
        #server static public InventDim findOrCreateBlank(boolean testConfigurationKey = true)
        #{
        #    #define.blank('AllBlank')
        #    InventDim   inventDim;
        #    InventDim   inventDimAllBlank;
        #    InventDimId inventDimIdBlank = #blank;
        #    ;
        #    if (testConfigurationKey && isConfigurationkeyEnabled(configurationkeynum(LogisticsAdvanced)))
        #        return inventDim;
        #
        #    inventDim = InventDim::find(inventDimIdBlank);
        #    if (inventDim.RecId && InventDim::isInventDimEqual(inventDim, inventDimAllBlank))
        #        return inventDim;
        #
        #    if (inventDim.RecId)
        #        inventDimIdBlank += '2';
        #
        #    inventDim = InventDim::findDim(inventDimAllBlank);
        #    if (inventDim.RecId)
        #        return inventDim;
        #
        #    ttsbegin;
        #
        #    inventDim.InventDimId = inventDimIdBlank;
        #    inventDim.insert(true);
        #
        #    ttscommit;
        #
        #    return inventDim;
        #}
      ENDSOURCE
      SOURCE #formQueryAddDynalink
        #client static public void formQueryAddDynalink(FormDataSource inventDim_DS,Args args,boolean linkInventDim = false)
        #{
        #
        #    InventDimParm           inventDimParm;
        #    InventTrans             callerInventTrans;
        #    Object                  callerForm;
        #    InventDimCtrl_Frm       callerInventDimFormSetup;
        #    ;
        #    #InventDimDevelop
        #
        #    switch(args.dataset())
        #    {
        #        case tablenum(ConfigTable):
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addDynalink(
        #                fieldnum(InventDim, ConfigId),
        #                args.record(),
        #                fieldname2id(args.dataset(),fieldstr(ConfigTable,ConfigId)));
        #
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addSortField(fieldnum(InventDim,ConfigId));
        #            break;
        #
        #        case tablenum(InventSize):
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addDynalink(
        #                fieldnum(InventDim, InventSizeId),
        #                args.record(),
        #                fieldname2id(args.dataset(),fieldstr(InventSize,InventSizeId)));
        #
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addSortField(fieldnum(InventDim,InventSizeId));
        #
        #            break;
        #
        #        case tablenum(InventColor):
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addDynalink(
        #                fieldnum(InventDim, InventColorId),
        #                args.record(),
        #                fieldname2id(args.dataset(),fieldstr(InventColor,InventColorId)));
        #
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addSortField(fieldnum(InventDim,InventColorId));
        #
        #            break;
        #
        #        case tablenum(InventDimCombination):
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addDynalink(
        #                fieldnum(InventDim, ConfigId),
        #                args.record(),
        #                fieldname2id(args.dataset(),fieldstr(InventDimCombination,ConfigId)));
        #
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addSortField(fieldnum(InventDim,ConfigId));
        #
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addDynalink(
        #                fieldnum(InventDim, InventSizeId),
        #                args.record(),
        #                fieldname2id(args.dataset(),fieldstr(InventDimCombination,InventSizeId)));
        #
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addSortField(fieldnum(InventDim,InventSizeId));
        #
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addDynalink(
        #                fieldnum(InventDim, InventColorId),
        #                args.record(),
        #                fieldname2id(args.dataset(),fieldstr(InventDimCombination,InventColorId)));
        #
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addSortField(fieldnum(InventDim,InventColorId));
        #
        #            break;
        #
        #        case tablenum(WMSLocation):
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addDynalink(
        #                fieldnum(InventDim, wmsLocationId),
        #                args.record(),
        #                fieldname2id(args.dataset(),fieldstr(WMSLocation,wmsLocationId)));
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addDynalink(
        #                fieldnum(InventDim, InventLocationId),
        #                args.record(),
        #                fieldname2id(args.dataset(),fieldstr(WMSLocation,InventLocationId)));
        #
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addSortField(fieldnum(InventDim,wmsLocationId));
        #
        #            break;
        #        case tablenum(WMSPallet):
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addDynalink(
        #                fieldnum(InventDim, wmsPalletId),
        #                args.record(),
        #                fieldname2id(args.dataset(),fieldstr(WMSPallet,wmsPalletId)));
        #
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addSortField(fieldnum(InventDim,wmsPalletId));
        #
        #            break;
        #        case tablenum(InventBatch):
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addDynalink(
        #                fieldnum(InventDim, InventBatchId),
        #                args.record(),
        #                fieldname2id(args.dataset(),fieldstr(InventBatch,InventBatchId)));
        #
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addSortField(fieldnum(InventDim,InventBatchId));
        #
        #            break;
        #
        #        case tablenum(InventSerial):
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addDynalink(
        #                fieldnum(InventDim, InventSerialId),
        #                args.record(),
        #                fieldname2id(args.dataset(),fieldstr(InventSerial,InventSerialId)));
        #
        #            inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addSortField(fieldnum(InventDim,InventSerialId));
        #
        #            break;
        #
        #        case(tablenum(InventTrans)):
        #
        #            if (linkInventDim)
        #            {
        #                callerForm                  = args.caller();
        #                callerInventTrans           = args.record();
        #                if (InventDimParm::inventDimFormRightClick(callerForm))
        #                {
        #                    callerInventDimFormSetup    = callerForm.inventDimSetupObject();
        #                    inventDimParm = callerInventDimFormSetup.parmDimParmVisibleGrid();
        #                    inventDimParm.queryAddDynalink(inventDim_DS.query().dataSourceTable(tablenum(InventDim)),callerInventTrans.joinChild());
        #                }
        #
        #            }
        #            break;
        #
        #       /*
        #        case(tablenum(TOCNorms)):
        #
        #              if (linkInventDim)
        #            {
        #                callerForm                  = args.caller();
        #                callerInventTrans           = args.record();
        #                if (InventDimParm::inventDimFormRightClick(callerForm))
        #                {
        #                    callerInventDimFormSetup    = callerForm.inventDimSetupObject();
        #                    inventDimParm = callerInventDimFormSetup.parmDimParmVisibleGrid();
        #                    inventDimParm.queryAddDynalink(inventDim_DS.query().dataSourceTable(tablenum(InventDim)),callerInventTrans.joinChild());
        #                }
        #
        #            }
        #            break;
        #          */
        #
        #        default:
        #            break;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #getHeaderFields
        #static public container getHeaderFields(QueryBuildDataSource qbd)
        #{
        #    Counter     x;
        #    container   headerFields;
        #
        #    for (x=1; x<=qbd.sortFieldCount();x++)
        #    {
        #        if (qbd.autoHeader(x))
        #            headerFields+=qbd.sortField(x);
        #    }
        #
        #    return headerFields;
        #}
      ENDSOURCE
      SOURCE #getSumFields
        #static public container getSumFields(QueryBuildDataSource qbd)
        #{
        #    Counter     x;
        #    container   sumFields;
        #
        #    for (x=1; x<=qbd.sortFieldCount();x++)
        #    {
        #        if (qbd.autoSum(x))
        #            sumFields+=qbd.sortField(x);
        #    }
        #
        #    return sumFields;
        #}
      ENDSOURCE
      SOURCE #hasItemDimActive
        #static public boolean hasItemDimActive(InventDimGroupId  _dimGroupId)
        #{
        #    return (conlen(InventDimSearch::itemDimensionFields(_dimGroupId)) != 0);
        #}
      ENDSOURCE
      SOURCE #hasMultipleItemDimActive
        #static public boolean hasMultipleItemDimActive(InventDimGroupId  _dimGroupId)
        #{
        #    return (conlen(InventDimSearch::itemDimensionFields(_dimGroupId))> 1);
        #}
      ENDSOURCE
      SOURCE #inventDimIdBlank
        #static public InventDimId inventDimIdBlank()
        #{
        #    return classfactory.inventDimGlobal().inventDimIdBlank();
        #}
      ENDSOURCE
      SOURCE #isFieldIdAffectingPrice
        #/// <summary>
        #/// Returns true if the given field id is affecting price calculation.
        #/// </summary>
        #/// <param name="dimFieldId">
        #/// The field id to check if it affects prices.
        #/// </param>
        #/// <returns>
        #/// true if the field id is affecting prices; otherwise false.
        #/// </returns>
        #/// <exception cref="Exception::Error">
        #/// An exextion is thrown if this method is called with an unknown field id.
        #/// </exception>
        #static public boolean isFieldIdAffectingPrice(fieldId dimFieldId)
        #{
        #    ;
        #    #InventDimDevelop
        #
        #    switch (dimFieldId)
        #    {
        #        case (fieldnum(InventDim,ConfigId))         :
        #        case (fieldnum(InventDim,InventSizeId))     :
        #        case (fieldnum(InventDim,InventColorId))    :
        #        case (fieldnum(InventDim,InventSiteId))     :
        #            return true;
        #
        #        case (fieldnum(InventDim,InventLocationId)) :
        #        case (fieldnum(InventDim,InventBatchId))    :
        #        case (fieldnum(InventDim,wmsLocationId))    :
        #        case (fieldnum(InventDim,wmsPalletId))      :
        #        case (fieldnum(InventDim,InventSerialId))   :
        #            return false;
        #
        #    }
        #
        #    throw error("@SYS70108");
        #}
        #
      ENDSOURCE
      SOURCE #isFieldIdConsistentDim
        #static public boolean isFieldIdConsistentDim(fieldId dimFieldId)
        #{
        #    ;
        #    #InventDimDevelop
        #
        #    switch (dimFieldId)
        #    {
        #        case fieldnum(InventDim,ConfigId)           :
        #        case fieldnum(InventDim,InventSizeId)       :
        #        case fieldnum(InventDim,InventColorId)      :
        #        case fieldnum(InventDim,InventSiteId)       :
        #            return true;
        #
        #        case fieldnum(InventDim,InventLocationId)   :
        #        case fieldnum(InventDim,InventBatchId)      :
        #        case fieldnum(InventDim,wmsLocationId)      :
        #        case fieldnum(InventDim,wmsPalletId)        :
        #        case fieldnum(InventDim,InventSerialId)     :
        #            return false;
        #
        #    }
        #
        #    throw error("@SYS70108");
        #}
      ENDSOURCE
      SOURCE #isFieldIdInventItemSetupRelevant
        #/// <summary>
        #/// Returns true if the given field id is relevant for item order settings.
        #/// </summary>
        #/// <param name="dimFieldId">
        #/// The field id to check if it is relevant for item order settings
        #/// </param>
        #/// <returns>
        #/// true if the field id is relevant for item order settings; otherwise false.
        #/// </returns>
        #/// <exception cref="Exception::Error">
        #/// An exextion is thrown if this method is called with an unknown field id.
        #/// </exception>
        #static public boolean isFieldIdInventItemSetupRelevant(fieldId dimFieldId)
        #{
        #    ;
        #    #InventDimDevelop
        #
        #    switch (dimFieldId)
        #    {
        #        case (fieldnum(InventDim,InventSiteId))     :
        #            return true;
        #
        #        case (fieldnum(InventDim,ConfigId))         :
        #        case (fieldnum(InventDim,InventSizeId))     :
        #        case (fieldnum(InventDim,InventColorId))    :
        #        case (fieldnum(InventDim,InventLocationId)) :
        #        case (fieldnum(InventDim,wmsLocationId))    :
        #        case (fieldnum(InventDim,InventBatchId))    :
        #        case (fieldnum(InventDim,wmsPalletId))      :
        #        case (fieldnum(InventDim,InventSerialId))   :
        #            return false;
        #    }
        #
        #    throw error("@SYS70108");
        #}
        #
      ENDSOURCE
      SOURCE #isFieldIdItemCovDim
        #static public boolean isFieldIdItemCovDim(fieldId dimFieldId)
        #{
        #    ;
        #    #InventDimDevelop
        #
        #    switch (dimFieldId)
        #    {
        #        case (fieldnum(InventDim,ConfigId))         :
        #        case (fieldnum(InventDim,InventSizeId))     :
        #        case (fieldnum(InventDim,InventColorId))    :
        #        case (fieldnum(InventDim,InventSiteId))     :
        #        case (fieldnum(InventDim,InventLocationId)) :
        #        case (fieldnum(InventDim,wmsLocationId))    :
        #            return true;
        #
        #        case (fieldnum(InventDim,InventBatchId))    :
        #        case (fieldnum(InventDim,wmsPalletId))      :
        #        case (fieldnum(InventDim,InventSerialId))   :
        #            return false;
        #    }
        #
        #    throw error("@SYS70108");
        #}
        #
      ENDSOURCE
      SOURCE #isFieldIdItemDim
        #static public boolean isFieldIdItemDim(fieldId dimFieldId)
        #{
        #    ;
        #    #InventDimDevelop
        #
        #    switch (dimFieldId)
        #    {
        #        case (fieldnum(InventDim,ConfigId))         :
        #        case (fieldnum(InventDim,InventSizeId))     :
        #        case (fieldnum(InventDim,InventColorId))    :
        #            return true;
        #
        #        case (fieldnum(InventDim,InventSiteId))     :
        #        case (fieldnum(InventDim,InventLocationId)) :
        #        case (fieldnum(InventDim,InventBatchId))    :
        #        case (fieldnum(InventDim,wmsLocationId))    :
        #        case (fieldnum(InventDim,wmsPalletId))      :
        #        case (fieldnum(InventDim,InventSerialId))   :
        #            return false;
        #
        #    }
        #
        #    throw error("@SYS70108");
        #}
        #
      ENDSOURCE
      SOURCE #isFieldIdTransferReceiptMergeable
        #/*
        #    This method should return true if the fieldId corresponds
        #    to a dimension field that can be merged on a transfer receipt (on the To-warehouse)
        #*/
        #static boolean isFieldIdTransferReceiptMergeable(fieldId _dimFieldId)
        #{
        #    #InventDimDevelop
        #
        #    switch (_dimFieldId)
        #    {
        #        case (fieldnum(InventDim,ConfigId))         :
        #        case (fieldnum(InventDim,InventSizeId))     :
        #        case (fieldnum(InventDim,InventColorId))    :
        #        case (fieldnum(InventDim,InventBatchId))    :
        #        case (fieldnum(InventDim,InventSerialId))   :   return true;
        #
        #        case (fieldnum(InventDim,InventSiteId))     :
        #        case (fieldnum(InventDim,InventLocationId)) :
        #        case (fieldnum(InventDim,wmsLocationId))    :
        #        case (fieldnum(InventDim,wmsPalletId))      :   return false;
        #    }
        #
        #    throw error("@SYS70108");
        #}
      ENDSOURCE
      SOURCE #isFieldIdTransferTransitReceiptMergeable
        #/*
        #    This method should return true if the fieldId corresponds
        #    to a dimension field that can be merged on a transfer receipt (on the Transit-warehouse)
        #*/
        #static boolean isFieldIdTransferTransitReceiptMergeable(fieldId _dimFieldId)
        #{
        #    #InventDimDevelop
        #
        #    switch (_dimFieldId)
        #    {
        #        case (fieldnum(InventDim,ConfigId))         :
        #        case (fieldnum(InventDim,InventSizeId))     :
        #        case (fieldnum(InventDim,InventColorId))    :
        #        case (fieldnum(InventDim,InventBatchId))    :
        #        case (fieldnum(InventDim,InventSerialId))   :
        #        case (fieldnum(InventDim,wmsPalletId))      :   return true;
        #
        #        case (fieldnum(InventDim,InventSiteId))     :
        #        case (fieldnum(InventDim,InventLocationId)) :
        #        case (fieldnum(InventDim,wmsLocationId))    :   return false;
        #    }
        #
        #    throw error("@SYS70108");
        #}
      ENDSOURCE
      SOURCE #isInventDimEqual
        #static public boolean isInventDimEqual(InventDim inventDim, InventDim inventDim_Orig,container  dimFields = InventDim::dimFieldList())
        #{
        #    int         h;
        #    ;
        #    for (h=1;h<=conlen(dimFields);h++)
        #        if (inventDim.(conpeek(dimFields,h)) != inventDim_Orig.(conpeek(dimFields,h)))
        #            return false;
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #isInventDimEqualConsistent
        #static public boolean isInventDimEqualConsistent(InventDimGroupId _dimGroupId,InventDim _fromInventDim, InventDim _toInventDim)
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::consistentFields(_dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        if (_fromInventDim.(x) != _toInventDim.(x))
        #            return false;
        #    }
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #isInventDimEqualCovDim
        #static public boolean isInventDimEqualCovDim(InventDimGroupId _dimGroupId,InventDim _fromInventDim, InventDim _toInventDim)
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::covPrDimensionFields(_dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        if (_fromInventDim.(x) != _toInventDim.(x))
        #            return false;
        #    }
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #isInventDimEqualFinancialDim
        #static public boolean isInventDimEqualFinancialDim(InventDimGroupId _dimGroupId,InventDim _fromInventDim, InventDim _toInventDim)
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::financialInventFields(_dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        if (_fromInventDim.(x) != _toInventDim.(x))
        #            return false;
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #isInventDimEqualItemDim
        #static public boolean isInventDimEqualItemDim(InventDimGroupId _dimGroupId,InventDim _fromInventDim, InventDim _toInventDim)
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::itemDimensionFields(_dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        if (_fromInventDim.(x) != _toInventDim.(x))
        #            return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #isInventDimFixedEqual
        #static public boolean isInventDimFixedEqual(InventDim inventDimRequired, InventDim inventDimRequested, InventDimFixed inventDimFixed, boolean info = true)
        #{
        #    InventDimParm   inventDimParm;
        #    ;
        #    inventDimParm.initFromInventDimFixed(inventDimFixed);
        #    return InventDim::isInventDimParmEqual(inventDimRequired, inventDimRequested, inventDimParm, info);
        #}
      ENDSOURCE
      SOURCE #isInventDimParmEqual
        #static public boolean isInventDimParmEqual(InventDim inventDimRequired, InventDim inventDimRequested, InventDimParm inventDimParm, boolean info = true)
        #{
        #    boolean         ok = true;
        #    int             h, x, y;
        #    container       dimFields = InventDim::dimFieldList();
        #    ;
        #    for (h=1; h<=conlen(dimFields); h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        y = InventDim::dim2dimParm(x);
        #        if (inventDimParm.(y))
        #        {
        #            if (inventDimRequired.(x) != inventDimRequested.(x))
        #                ok = (info) ? checkFailed(strfmt("@SYS58831", fieldid2pname(inventDimRequired.TableId, x), inventDimRequired.(x))) : false;
        #        }
        #    }
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #lookupinventlocation
        #public client static void lookupinventlocation(FormStringControl _ctrl, inventsiteid _ctrl2)
        #{
        #
        #    SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(inventdim), _ctrl);
        #
        #    Query query = new Query();
        #    QueryBuildDataSource qbds,qbds1,qbds2;
        #    QueryBuildRange vehicleVendorFuelFilter;
        #    ;
        #
        #    /*sysTableLookup.addLookupfield(fieldnum(inventlocation, inventlocationid), true);
        #    sysTableLookup.addLookupfield(fieldnum(inventlocation, name));
        #
        #    qbds = query.addDataSource(tablenum(inventlocation));
        #    qbds.addRange(fieldnum(inventlocation, agr_consignment)).value(enum2str(noyes::No));*/
        #
        #   sysTableLookup.addLookupfield(fieldnum(erl_viewlocation, inventlocationid),true);
        #   sysTableLookup.addLookupfield(fieldnum(erl_viewlocation, name));
        #   sysTableLookup.addLookupfield(fieldnum(erl_viewlocation, inventsiteid));
        #   /*sysTableLookup.addLookupfield(fieldnum(inventlocation, name));
        #   sysTableLookup.addLookupfield(fieldnum(inventlocation, inventsiteid));*/
        #
        #   qbds = query.addDataSource(tablenum(inventdim));
        #   qbds1 = qbds.addDataSource(tableNum(inventlocation), tableStr(inventlocation));
        #   qbds1.relations(true);
        #   qbds1.joinMode(JoinMode::InnerJoin);
        #   qbds1.addRange(fieldnum(inventlocation,agr_consignment)).value(enum2str(noyes::yes));
        #   qbds1.addRange(fieldnum(inventlocation,inventsiteid)).value(_ctrl2);
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupinventlocation2
        #public client static void lookupinventlocation2(FormStringControl _ctrl, inventsiteid _ctrl2)
        #{
        #
        #    SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(erl_viewlocation), _ctrl);
        #
        #    Query query = new Query();
        #    QueryBuildDataSource qbds,qbds1,qbds2;
        #    QueryBuildRange vehicleVendorFuelFilter;
        #    ;
        #
        #    /*sysTableLookup.addLookupfield(fieldnum(inventlocation, inventlocationid), true);
        #    sysTableLookup.addLookupfield(fieldnum(inventlocation, name));
        #
        #    qbds = query.addDataSource(tablenum(inventlocation));
        #    qbds.addRange(fieldnum(inventlocation, agr_consignment)).value(enum2str(noyes::No));*/
        #
        #   sysTableLookup.addLookupfield(fieldnum(erl_viewlocation, inventlocationid),true);
        #   sysTableLookup.addLookupfield(fieldnum(erl_viewlocation, name));
        #   sysTableLookup.addLookupfield(fieldnum(erl_viewlocation, inventsiteid));
        #   /*sysTableLookup.addLookupfield(fieldnum(inventlocation, name));
        #   sysTableLookup.addLookupfield(fieldnum(inventlocation, inventsiteid));*/
        #
        #   qbds = query.addDataSource(tablenum(erl_viewlocation));
        #   /*qbds1 = qbds.addDataSource(tableNum(inventlocation), tableStr(inventlocation));
        #   qbds1.relations(true);
        #   qbds1.joinMode(JoinMode::InnerJoin);*/
        #   qbds.addRange(fieldnum(erl_viewlocation,agr_consignment)).value(enum2str(noyes::No));
        #   qbds.addRange(fieldnum(erl_viewlocation,inventsiteid)).value(_ctrl2);
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #mustCheckDimChange
        #static public boolean mustCheckDimChange(InventDimGroupId _dimGroupId,InventDim _fromInventDim, InventDim _toInventDim)
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::physicalInventFields(_dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        if (_fromInventDim.(x) != _toInventDim.(x))
        #            return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #mustUseFieldPurchPriceDisc
        #static public boolean mustUseFieldPurchPriceDisc(
        #        fieldId              _dimFieldId,
        #        InventDimGroupId     _dimGroupId)
        #{
        #    InventDimSearch dimSearch = new InventDimSearch();
        #    ;
        #    if (dimSearch.find(_dimGroupId, _dimFieldId) && dimSearch.dimPriceDiscPurch())
        #        return true;
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #mustUseFieldSalesPriceDisc
        #static public boolean mustUseFieldSalesPriceDisc(
        #        fieldId              _dimFieldId,
        #        InventDimGroupId     _dimGroupId)
        #{
        #    InventDimSearch dimSearch = new InventDimSearch();
        #    ;
        #    if (dimSearch.find(_dimGroupId, _dimFieldId) && dimSearch.dimPriceDiscSales())
        #        return true;
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #newDimId
        #server static public InventDimId newDimId()
        #{
        #    return NumberSeq::newGetNum(InventParameters::numRefInventDimId()).num();
        #}
        #
      ENDSOURCE
      SOURCE #newQueryInventSum
        #client server static public Query newQueryInventSum(
        #    Query           query,
        #    ItemId          itemId,
        #    InventDim       inventDimCriteria,
        #    InventDimParm   inventDimParmCriteria,
        #    InventDimParm   inventDimParmGroupBy,
        #    container       dimFields = InventDim::dimFieldList()
        #    )
        #{
        #    QueryBuildDataSource    qbsSum;
        #    QueryBuildDataSource    qbsDim;
        #    QueryBuildRange         queryRange;
        #
        #    boolean                 doFindRange;
        #    container               headerFields;
        #    container               sumFields;
        #    ;
        #
        #    if (!query)
        #        query = new Query();
        #
        #    if (query.dataSourceTable(tablenum(InventDim)))
        #    {
        #        qbsDim      = query.dataSourceTable(tablenum(InventDim));
        #        doFindRange = true;
        #    }
        #    else
        #        qbsDim      = query.addDataSource(tablenum(InventDim));
        #
        #    if (query.dataSourceTable(tablenum(InventSum)))
        #    {
        #        qbsSum      = query.dataSourceTable(tablenum(InventSum));
        #        doFindRange = true;
        #    }
        #    else
        #        qbsSum = qbsDim.addDataSource(tablenum(InventSum));
        #
        #    if (!inventDimParmCriteria.ClosedFlag)
        #        qbsSum.addRange(fieldnum(InventSum,Closed)).value(queryValue(NoYes::No));
        #
        #    qbsSum.joinMode(JoinMode::InnerJoin);
        #    qbsSum.relations(true);
        #
        #    InventSum::queryAddSumFields(qbsSum);
        #
        #    headerFields = InventDim::getHeaderFields(qbsDim);
        #    sumFields    = InventDim::getSumFields(qbsDim);
        #    qbsDim.sortClear();
        #    InventDim::queryDatasourceAddRangeSortFromParms(qbsDim,doFindRange,inventDimCriteria,inventDimParmCriteria,inventDimParmGroupBy,dimFields);
        #    InventDim::setHeaderFields(qbsDim,headerFields);
        #    InventDim::setSumFields(qbsDim,sumFields);
        #
        #    if (inventDimParmCriteria.ItemIdFlag)
        #    {
        #        queryRange = doFindRange ? qbsSum.findRange(fieldnum(InventSum,ItemId)) : null;
        #        if (! queryRange)
        #            queryRange = qbsSum.addRange(fieldnum(InventSum,ItemId));
        #
        #        if (itemId)
        #            queryRange.value(queryValue(itemId));
        #        else
        #            queryRange.value(SysQuery::valueEmptyString());
        #    }
        #
        #    if (inventDimParmGroupBy.ItemIdFlag)
        #    {
        #        qbsSum.addSortField(fieldnum(InventSum,ItemId));
        #        qbsSum.orderMode(OrderMode::GroupBy);
        #    }
        #    else
        #        qbsSum.orderMode(OrderMode::OrderBy);
        #
        #    return query;
        #}
      ENDSOURCE
      SOURCE #queryAddHintFromCaller
        #client server static public boolean queryAddHintFromCaller(QueryBuildDataSource qbs,Args callerArgs)
        #{
        #    boolean ret = false;
        #    ;
        #    #InventDimDevelop
        #
        #    switch(callerArgs.dataset())
        #    {
        #        case(tablenum(ConfigTable)):
        #
        #            qbs.addSortIndex(indexnum(InventDim,DimIdx));
        #            qbs.indexIsHint(true);
        #            ret = true;
        #            break;
        #
        #        case(tablenum(InventBatch)):
        #
        #            qbs.addSortIndex(indexnum(InventDim,BatchIdIdx));
        #            qbs.indexIsHint(true);
        #            ret = true;
        #            break;
        #
        #        case(tablenum(InventSerial)):
        #
        #            qbs.addSortIndex(indexnum(InventDim,SerialIdIdx));
        #            qbs.indexIsHint(true);
        #            ret = true;
        #            break;
        #
        #        case(tablenum(WMSPallet)):
        #
        #            qbs.addSortIndex(indexnum(InventDim,PalletIdIdx));
        #            qbs.indexIsHint(true);
        #            ret = true;
        #            break;
        #
        #        case(tablenum(WMSLocation)):
        #
        #            qbs.addSortIndex(indexnum(InventDim,LocationIdIdx));
        #            qbs.indexIsHint(true);
        #            ret = true;
        #            break;
        #
        #
        #        default:
        #            break;
        #    }
        #
        #    return ret;
        #}
        #
        #
      ENDSOURCE
      SOURCE #queryAddRangeAndValueItemDim
        #client server static public void queryAddRangeAndValueItemDim(
        #        QueryBuildDataSource    qbs,
        #        InventDim               inventDim,
        #        InventDimGroupId        dimGroupId,
        #        boolean                 throwErrorIfBlank = true)
        #{
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::itemDimensionFields(dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        if (!inventDim.(x))
        #        {
        #            if (throwErrorIfBlank)
        #            {
        #                throw error(strfmt("@SYS54774",fieldid2pname(inventDim.TableId,x)));
        #            }
        #        }
        #        else
        #        {
        #            qbs.addRange(x).value(queryValue(inventDim.(x)));
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #queryAddRangeFromCaller
        #client static public void queryAddRangeFromCaller(QueryBuildDataSource qbs,Args callerArgs)
        #{
        #    InventDimParm           inventDimParm;
        #    InventTrans             callerInventTrans;
        #    Object                  callerForm;
        #    InventDimCtrl_Frm       callerInventDimFormSetup;
        #
        #    switch(callerArgs.dataset())
        #    {
        #        case(tablenum(InventTrans)):
        #
        #            callerForm                  = callerArgs.caller();
        #            callerInventTrans           = callerArgs.record();
        #            if (InventDimParm::inventDimFormRightClick(callerForm))
        #            {
        #                callerInventDimFormSetup    = callerForm.inventDimSetupObject();
        #                inventDimParm = callerInventDimFormSetup.parmDimParmVisibleGrid();
        #                inventDimParm.queryAddRange(qbs,callerInventTrans.joinChild());
        #            }
        #            break;
        #
        #        default:
        #            break;
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #queryAddRangeFromCallerSort
        #client static public void queryAddRangeFromCallerSort(QueryBuildDataSource qbs,Args callerArgs,boolean addSortField = false)
        #{
        #    Counter                 i;
        #    FormDataSource          callerDS;
        #    Query                   callerQuery;
        #    QueryBuildDataSource    callerQbs;
        #    boolean                 doGroupBy;
        #    ;
        #    callerDS     = InventDim::callerInventDimDatasource(callerArgs);
        #    callerQuery  = callerDS.query();
        #    callerQbs    = callerQuery.dataSourceTable(tablenum(InventDim));
        #
        #    qbs.clearRanges();
        #    qbs.sortClear();
        #
        #    for (i=1;i<=callerQbs.sortFieldCount();i++)
        #    {
        #        if (callerDS.cursor().(callerQbs.sortField(i)))
        #        {
        #            qbs.addRange(callerQbs.sortField(i)).value(queryValue(callerDS.cursor().(callerQbs.sortField(i))));
        #
        #            if (addSortField)
        #            {
        #                qbs.addSortField(callerQbs.sortField(i));
        #                doGroupBy = true;
        #            }
        #        }
        #        else
        #            qbs.addRange(callerQbs.sortField(i)).value(SysQuery::valueUnlimited());
        #
        #    }
        #
        #    if (doGroupBy)
        #        qbs.orderMode(OrderMode::GroupBy);
        #}
      ENDSOURCE
      SOURCE #queryAddRangeFromDSSort
        #client static public void queryAddRangeFromDSSort(QueryBuildDataSource _qbs,FormDataSource _ds,boolean _addSortField = false)
        #{
        #    Counter                 i;
        #    Query                   dsQuery;
        #    QueryBuildDataSource    dsQbs;
        #
        #    boolean                 doGroupBy;
        #    ;
        #
        #    dsQuery  = _ds.query();
        #    dsQbs    = dsQuery.dataSourceTable(tablenum(InventDim));
        #    _qbs.clearRanges();
        #    _qbs.sortClear();
        #
        #    for (i=1;i<=dsQbs.sortFieldCount();i++)
        #    {
        #        if (_ds.cursor().(dsQbs.sortField(i)))
        #        {
        #            _qbs.addRange(dsQbs.sortField(i)).value(queryValue(_ds.cursor().(dsQbs.sortField(i))));
        #
        #            if (_addSortField)
        #            {
        #                _qbs.addSortField(dsQbs.sortField(i));
        #                doGroupBy = true;
        #            }
        #        }
        #        else
        #            _qbs.addRange(dsQbs.sortField(i)).value(SysQuery::valueEmptyString());
        #
        #    }
        #
        #    if (doGroupBy)
        #        _qbs.orderMode(OrderMode::GroupBy);
        #}
      ENDSOURCE
      SOURCE #queryAddSortFinancialInvent
        #static public void queryAddSortFinancialInvent(
        #    InventDimGroupId        _dimGroupId,
        #    QueryBuildDataSource    _qbS)
        #{
        #    boolean   doGroupBy;
        #    int       h,len;
        #    fieldId   x;
        #    container dimFields = InventDimSearch::financialInventFields(_dimGroupId);
        #    ;
        #    len = conlen(dimFields);
        #    for (h=1;h<=len;h++)
        #    {
        #        x = conpeek(dimFields, h);
        #        _qbS.addSortField(x);
        #
        #        doGroupBy = true;
        #    }
        #
        #    if (doGroupBy)
        #        _qbS.orderMode(OrderMode::GroupBy);
        #}
        #
      ENDSOURCE
      SOURCE #queryAddSortFromCaller
        #client static public void queryAddSortFromCaller(QueryBuildDataSource qbs,Args callerArgs,boolean _doGroupBy = true)
        #{
        #    Counter                 i;
        #    FormDataSource          callerDS;
        #    Query                   callerQuery;
        #    QueryBuildDataSource    callerQbs;
        #    boolean                 doGroupBy;
        #    ;
        #    callerDS     = InventDim::callerInventDimDatasource(callerArgs);
        #    callerQuery  = callerDS.query();
        #    callerQbs    = callerQuery.dataSourceTable(tablenum(InventDim));
        #
        #    qbs.clearRanges();
        #    qbs.sortClear();
        #
        #    for (i=1;i<=callerQbs.sortFieldCount();i++)
        #    {
        #        if (callerDS.cursor().(callerQbs.sortField(i)))
        #        {
        #            qbs.addSortField(callerQbs.sortField(i));
        #            doGroupBy = true;
        #        }
        #    }
        #
        #    if (doGroupBy && _doGroupBy)
        #        qbs.orderMode(OrderMode::GroupBy);
        #}
      ENDSOURCE
      SOURCE #queryDatasourceAddRangeSortFromParms
        #static public void queryDatasourceAddRangeSortFromParms(
        #    QueryBuildDataSource    qbsDim,
        #    boolean                 doFindRange,
        #    InventDim               inventDimCriteria,
        #    InventDimParm           inventDimParmCriteria,
        #    InventDimParm           inventDimParmGroupBy,
        #    container               dimFields = InventDim::dimFieldList()
        #    )
        #{
        #    Counter             h;
        #    fieldId             x,y;
        #    QueryBuildRange     queryRange;
        #    boolean             doGroupByDim;
        #
        #    for (h=1;h<=conlen(dimFields);h++)
        #    {
        #        y = conpeek(dimFields, h);
        #        x = InventDim::dim2dimParm(conpeek(dimFields, h));
        #
        #        if (inventDimParmCriteria.(x))
        #        {
        #            queryRange = doFindRange ? qbsDim.findRange(y) : null;
        #            if (! queryRange)
        #                queryRange = qbsDim.addRange(y);
        #
        #            if (inventDimCriteria.(y))
        #                queryRange.value(queryValue(inventDimCriteria.(y)));
        #            else
        #                queryRange.value(SysQuery::valueEmptyString());
        #        }
        #
        #        if (inventDimParmGroupBy.(x))
        #        {
        #            qbsDim.addSortField(y);
        #            doGroupByDim = true;
        #        }
        #    }
        #
        #    if (doGroupByDim)
        #        qbsDim.orderMode(OrderMode::GroupBy);
        #    else
        #        qbsDim.orderMode(OrderMode::OrderBy);
        #}
      ENDSOURCE
      SOURCE #setHeaderFields
        #static public void setHeaderFields(
        #    QueryBuildDataSource    qbd,
        #    container               headerFields
        #    )
        #{
        #    Counter     x;
        #
        #    for (x=1; x<=qbd.sortFieldCount();x++)
        #    {
        #        if (confind(headerFields,qbd.sortField(x)))
        #            qbd.autoHeader(x,true);
        #    }
        #}
      ENDSOURCE
      SOURCE #setSumFields
        #static public void setSumFields(
        #    QueryBuildDataSource    qbd,
        #    container               sumFields
        #    )
        #{
        #    Counter     x;
        #
        #    for (x=1; x<=qbd.sortFieldCount();x++)
        #    {
        #        if (confind(sumFields,qbd.sortField(x)))
        #            qbd.autoSum(x,true);
        #    }
        #}
      ENDSOURCE
      SOURCE #startUpCreateBlank
        #client server static public void startUpCreateBlank()
        #{
        #    if (isConfigurationkeyEnabled(configurationkeynum(LogisticsAdvanced)))
        #        return;
        #
        #    InventDim::findOrCreateBlank(false);
        #}
      ENDSOURCE
      SOURCE #systemHasMultipleItemDim
        #static public boolean systemHasMultipleItemDim()
        #{
        #    return classfactory.inventDimGlobal().systemHasMultipleItemDim();
        #}
      ENDSOURCE
      SOURCE #validateFieldCombination
        #static client private boolean validateFieldCombination(FormObjectSet   dimDataSource = null,
        #                                                       InventTable     inventTable   = null)
        #{
        #    InventDim inventDim;
        #    ;
        #    if (!dimDataSource || !inventTable.RecId)
        #        return true;
        #
        #    inventDim = dimDataSource.cursor();
        #
        #    if (!inventDim.mustCheckItemDimCombination(inventTable.DimGroupId))
        #        return true;
        #
        #    if (InventDimCombination::exist(inventTable.ItemId,inventDim))
        #        return true;
        #
        #    return checkFailed(strfmt("@SYS73899",inventDim.preFixItemDim(inventTable.DimGroupId),inventTable.ItemId));
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : InventJournalTrans unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #InventJournalTrans
    PROPERTIES
      Name                #InventJournalTrans
      Label               #@SYS22126
      TitleField1         #JournalId
      TitleField2         #LineNum
      ConfigurationKey    #LogisticsBasic
      SecurityKey         #InventTables
      TableGroup          #WorksheetLine
      PrimaryIndex        #LineIdx
      ClusterIndex        #LineIdx
      CreatedDateTime     #Yes
      DeveloperDocumentation  #@SYS123821
    ENDPROPERTIES
    
    FIELDS
      FIELD #JournalId
        STRING
        PROPERTIES
          Name                #JournalId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #InventJournalId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #LineNum
        REAL
        PROPERTIES
          Name                #LineNum
          AllowEditOnCreate   #No
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #LineNum
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #TransDate
        DATE
        PROPERTIES
          Name                #TransDate
          Mandatory           #Yes
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #JournalTransDate
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Voucher
        STRING
        PROPERTIES
          Name                #Voucher
          AllowEdit           #No
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #Voucher
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #JournalType
        ENUM
        PROPERTIES
          Name                #JournalType
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTrans
          EnumType            #InventJournalType
        ENDPROPERTIES
        
      FIELD #ItemId
        STRING
        PROPERTIES
          Name                #ItemId
          HelpText            #@SYS16397
          Mandatory           #Yes
          AllowEdit           #No
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #ItemId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #DEL_CorrectiveReason
        STRING
        PROPERTIES
          Name                #DEL_CorrectiveReason
          Visible             #No
          ConfigurationKey    #SysDeletedObjects40
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #DEL_CustVendCorrectiveReason_ES
              #
            ENDARRAY
          StringSize          #(Memo)
        ENDPROPERTIES
        
      FIELD #Qty
        REAL
        PROPERTIES
          Name                #Qty
          Label               #Invent quantity
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #InventQtyJournal
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #CostPrice
        REAL
        PROPERTIES
          Name                #CostPrice
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #ItemCostPrice
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #PriceUnit
        REAL
        PROPERTIES
          Name                #PriceUnit
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #PriceUnit
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #CostMarkup
        REAL
        PROPERTIES
          Name                #CostMarkup
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #CostMarkup
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #CostAmount
        REAL
        PROPERTIES
          Name                #CostAmount
          HelpText            #@SYS10618
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #CostAmount
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #SalesAmount
        REAL
        PROPERTIES
          Name                #SalesAmount
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #SalesAmount
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ProjTransId
        STRING
        PROPERTIES
          Name                #ProjTransId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #ProjItemTransId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InventTransId
        STRING
        PROPERTIES
          Name                #InventTransId
          HelpText            #@SYS17594
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #InventTransId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InventTransIdFather
        STRING
        PROPERTIES
          Name                #InventTransIdFather
          Label               #@SYS28922
          HelpText            #@SYS21786
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #InventTransId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #LedgerAccountIdOffset
        STRING
        PROPERTIES
          Name                #LedgerAccountIdOffset
          Label               #@Sys11162
          HelpText            #@SYS4451
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #LedgerAccount
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InventOnHand
        REAL
        PROPERTIES
          Name                #InventOnHand
          HelpText            #@SYS4957
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #InventQtyOnHand
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Counted
        REAL
        PROPERTIES
          Name                #Counted
          Label               #@SYS16439
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #InventQtyCounted
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Dimension
        STRING
        PROPERTIES
          Name                #Dimension
          HelpText            #@SYS4325
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #Dimension
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #BOMLine
        ENUM
        PROPERTIES
          Name                #BOMLine
          GroupPrompt         #@SYS15449
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #BOMLine
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #InventTransIdReturn
        STRING
        PROPERTIES
          Name                #InventTransIdReturn
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #InventTransIdReturn
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ProjCategoryId
        STRING
        PROPERTIES
          Name                #ProjCategoryId
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #ProjCategoryId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ProjId
        STRING
        PROPERTIES
          Name                #ProjId
          AllowEdit           #No
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #ProjId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #DEL_CorrectedInvoiceId
        STRING
        PROPERTIES
          Name                #DEL_CorrectedInvoiceId
          Visible             #No
          ConfigurationKey    #SysDeletedObjects40
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #DEL_CustVendCorrectedInvoiceId_ES
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ToInventTransId
        STRING
        PROPERTIES
          Name                #ToInventTransId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #InventTransIdTo
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ReasonRefRecId
        INT64
        PROPERTIES
          Name                #ReasonRefRecId
          Visible             #No
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #ReasonRefRecID
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #InventDimId
        STRING
        PROPERTIES
          Name                #InventDimId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #InventDimId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ToInventDimId
        STRING
        PROPERTIES
          Name                #ToInventDimId
          Label               #@SYS54704
          HelpText            #@SYS15702
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #InventDimId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ReqPOId
        STRING
        PROPERTIES
          Name                #ReqPOId
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #ReqPOId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #EmplId
        STRING
        PROPERTIES
          Name                #EmplId
          HelpText            #@SYS62798
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #EmplId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #AssetTransType
        ENUM
        PROPERTIES
          Name                #AssetTransType
          Table               #InventJournalTrans
          EnumType            #AssetTransTypeJournal
        ENDPROPERTIES
        
      FIELD #AssetId
        STRING
        PROPERTIES
          Name                #AssetId
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #AssetId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #AssetBookId
        STRING
        PROPERTIES
          Name                #AssetBookId
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #AssetBookIdPurchSalesInvent
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ProjTaxGroupId
        STRING
        PROPERTIES
          Name                #ProjTaxGroupId
          HelpText            #@SYS67872
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #ProjTaxGroup
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #ProjSalesCurrencyId
        STRING
        PROPERTIES
          Name                #ProjSalesCurrencyId
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #ProjSalesCurrencyCode
              #
            ENDARRAY
          StringSize          #3
        ENDPROPERTIES
        
      FIELD #ProjLinePropertyId
        STRING
        PROPERTIES
          Name                #ProjLinePropertyId
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #ProjLinePropertyId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ProjTaxItemGroupId
        STRING
        PROPERTIES
          Name                #ProjTaxItemGroupId
          HelpText            #@SYS67873
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #ProjTaxItemGroup
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #ProjUnitID
        STRING
        PROPERTIES
          Name                #ProjUnitID
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #UnitID
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #ProjSalesPrice
        REAL
        PROPERTIES
          Name                #ProjSalesPrice
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #ProjSalesPriceCost
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #InventRefType
        ENUM
        PROPERTIES
          Name                #InventRefType
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTrans
          EnumType            #InventRefType
        ENDPROPERTIES
        
      FIELD #InventRefId
        STRING
        PROPERTIES
          Name                #InventRefId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #InventRefId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InventRefTransId
        STRING
        PROPERTIES
          Name                #InventRefTransId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #InventRefTransId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ProfitSet
        ENUM
        PROPERTIES
          Name                #ProfitSet
          Table               #InventJournalTrans
          EnumType            #CostProfitSet
        ENDPROPERTIES
        
      FIELD #ActivityNumber
        STRING
        PROPERTIES
          Name                #ActivityNumber
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #ProjActivityNumber
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ReleaseDate
        DATETIME
        PROPERTIES
          Name                #ReleaseDate
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #PostReleaseDate
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #UnitInvent
        STRING
        PROPERTIES
          Name                #UnitInvent
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #InventUnitId
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #Unit
        STRING
        PROPERTIES
          Name                #Unit
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #UnitID
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #QtyUnit
        REAL
        PROPERTIES
          Name                #QtyUnit
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #Qty
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #AGR_SummaryDONum
        STRING
        PROPERTIES
          Name                #AGR_SummaryDONum
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #AGR_SummaryDONum
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #AGR_InventTransId
        STRING
        PROPERTIES
          Name                #AGR_InventTransId
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #InventTransId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #AGR_Calculate
        ENUM
        PROPERTIES
          Name                #AGR_Calculate
          Label               #Calculate
          AllowEdit           #No
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #NoYesId
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #AGR_DoQty
        REAL
        PROPERTIES
          Name                #AGR_DoQty
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #SalesQty
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #AGR_RefRecId
        INT64
        PROPERTIES
          Name                #AGR_RefRecId
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #recId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #AGR_RefTableID
        INT
        PROPERTIES
          Name                #AGR_RefTableID
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #SysTableID
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #AGR_POPackQtyInventUnit
        REAL
        PROPERTIES
          Name                #AGR_POPackQtyInventUnit
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #Qty
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #AGR_DeliveryOrderId
        STRING
        PROPERTIES
          Name                #AGR_DeliveryOrderId
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #SLT_DeliveryOrderId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ERL_QtyCorrection
        REAL
        PROPERTIES
          Name                #ERL_QtyCorrection
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #InventTransferQtyRemain
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ERL_SalesPrice
        REAL
        PROPERTIES
          Name                #ERL_SalesPrice
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #SalesPrice
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ERL_LinePercent
        REAL
        PROPERTIES
          Name                #ERL_LinePercent
          Table               #InventJournalTrans
          ExtendedDataType    
            ARRAY 
              #SalesLinePercent
              #
            ENDARRAY
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #JournalId
          #LineNum
          #Voucher
          #TransDate
          #ItemId
          #Qty
          #CostAmount
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #BOM
        PROPERTIES
          Name                #BOM
          Label               #@SYS7916
        ENDPROPERTIES
        
        GROUPFIELDS
          #BOMLine
          #ProfitSet
          #SalesAmount
          #InventTransIdFather
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Counting
        PROPERTIES
          Name                #Counting
          Label               #@SYS2828
        ENDPROPERTIES
        
        GROUPFIELDS
          #InventOnHand
          #Counted
          #EmplId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Dimension
        PROPERTIES
          Name                #Dimension
          Label               #@SYS14926
        ENDPROPERTIES
        
        GROUPFIELDS
          #Dimension
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #FixedAssets
        PROPERTIES
          Name                #FixedAssets
          Label               #@SYS12578
        ENDPROPERTIES
        
        GROUPFIELDS
          #AssetId
          #AssetBookId
          #AssetTransType
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@sys5711
        ENDPROPERTIES
        
        GROUPFIELDS
          #JournalId
          #LineNum
          #TransDate
          #Voucher
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Inventory
        PROPERTIES
          Name                #Inventory
          Label               #@SYS981
        ENDPROPERTIES
        
        GROUPFIELDS
          #InventTransId
          #InventDimId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Item
        PROPERTIES
          Name                #Item
          Label               #@SYS7407
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ItemReference
        PROPERTIES
          Name                #ItemReference
          Label               #@SYS24659
        ENDPROPERTIES
        
        GROUPFIELDS
          #InventRefType
          #InventRefId
          #InventRefTransId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Journal
        PROPERTIES
          Name                #Journal
          Label               #@SYS6790
        ENDPROPERTIES
        
        GROUPFIELDS
          #JournalId
          #Voucher
          #TransDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #JournalLine
        PROPERTIES
          Name                #JournalLine
          Label               #@SYS23949
        ENDPROPERTIES
        
        GROUPFIELDS
          #Unit
          #QtyUnit
          #UnitInvent
          #Qty
          #CostPrice
          #PriceUnit
          #CostMarkup
          #CostAmount
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #LedgerPosting
        PROPERTIES
          Name                #LedgerPosting
          Label               #@SYS3881
        ENDPROPERTIES
        
        GROUPFIELDS
          #LedgerAccountIdOffset
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PostingRelease
        PROPERTIES
          Name                #PostingRelease
          Label               #@sys114594
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReleaseDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ProjectCostPrice
        PROPERTIES
          Name                #ProjectCostPrice
          Label               #@SYS13134
        ENDPROPERTIES
        
        GROUPFIELDS
          #Qty
          #CostPrice
          #CostAmount
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ProjectIdentification
        PROPERTIES
          Name                #ProjectIdentification
          Label               #@SYS89920
        ENDPROPERTIES
        
        GROUPFIELDS
          #TransDate
          #ProjId
          #ActivityNumber
          #ProjCategoryId
          #ItemId
          #ProjLinePropertyId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ProjectSalesPrice
        PROPERTIES
          Name                #ProjectSalesPrice
          Label               #@SYS5755
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjSalesCurrencyId
          #ProjUnitID
          #ProjSalesPrice
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ProjectSalesTax
        PROPERTIES
          Name                #ProjectSalesTax
          Label               #@SYS67871
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjTaxGroupId
          #ProjTaxItemGroupId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ProjectTransaction
        PROPERTIES
          Name                #ProjectTransaction
          Label               #@SYS15191
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjTransId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ReturnLot
        PROPERTIES
          Name                #ReturnLot
          Label               #@SYS53022
        ENDPROPERTIES
        
        GROUPFIELDS
          #InventTransIdReturn
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #System
        PROPERTIES
          Name                #System
          Label               #@SYS4278
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReqPOId
          #JournalType
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Transfer
        PROPERTIES
          Name                #Transfer
          Label               #@SYS13891
        ENDPROPERTIES
        
        GROUPFIELDS
          #ToInventTransId
          #ToInventDimId
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #LineIdx
      PROPERTIES
        Name                #LineIdx
        AllowDuplicates     #No
      ENDPROPERTIES
      
      INDEXFIELDS
        #JournalId
        #LineNum
      ENDINDEXFIELDS
      
      #VoucherIdx
      PROPERTIES
        Name                #VoucherIdx
        AllowDuplicates     #No
      ENDPROPERTIES
      
      INDEXFIELDS
        #JournalId
        #Voucher
        #LineNum
      ENDINDEXFIELDS
      
      #ToTransIdIdx
      PROPERTIES
        Name                #ToTransIdIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #ToInventTransId
      ENDINDEXFIELDS
      
      #TransIdIdx
      PROPERTIES
        Name                #TransIdIdx
        Enabled             #No
      ENDPROPERTIES
      
      INDEXFIELDS
        #InventTransId
      ENDINDEXFIELDS
      
      #JournalDateItemIdx
      PROPERTIES
        Name                #JournalDateItemIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #JournalId
        #TransDate
        #ItemId
      ENDINDEXFIELDS
      
      #RefRecIDX
      PROPERTIES
        Name                #RefRecIDX
      ENDPROPERTIES
      
      INDEXFIELDS
        #TableId
        #RecId
        #AGR_RefRecId
        #AGR_RefTableID
      ENDINDEXFIELDS
      
      #AGR_InventTransIdIdx
      PROPERTIES
        Name                #AGR_InventTransIdIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #AGR_InventTransId
        #AGR_SummaryDONum
      ENDINDEXFIELDS
      
      #JournalTransIdx
      PROPERTIES
        Name                #JournalTransIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #JournalId
        #AGR_InventTransId
        #InventDimId
      ENDINDEXFIELDS
      
    ENDINDICES
    REFERENCES
      REFERENCE #AssetBook
        PROPERTIES
          Name                #AssetBook
          Table               #AssetBook
          EntityRelationshipRole  #@SYS123822
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AssetId
            RelatedField        #AssetId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AssetBookId
            RelatedField        #BookId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #JournalError
        PROPERTIES
          Name                #JournalError
          Table               #JournalError
          Validate            #No
          EntityRelationshipRole  #@SYS123823
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #154
            Table               #JournalError
            RelatedField        #RefTableId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #LineNum
            RelatedField        #LineNum
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #JournalId
            RelatedField        #JournalId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
      #JournalError
      PROPERTIES
        Table               #JournalError
        DeleteAction        #Cascade
      ENDPROPERTIES
      
    ENDDELETEACTIONS
    
    METHODS
      Version: 3
      SOURCE #activityNumberModified
        #void activityNumberModified()
        #{
        #    this.initFromProjActivity(ProjActivity::find(this.ActivityNumber));
        #
        #    this.ProjLinePropertyId   = ProjLinePropertySetup::findLinePropertyId(this.ProjId,this.ProjCategoryId);
        #    this.ProjTaxItemGroupId   = ProjParameters::taxItemGroupItem(this.ProjCategoryId,this.ItemId);
        #}
        #
      ENDSOURCE
      SOURCE #AGR_QtyUnAvaible
        #display server Qty AGR_QtyUnavaible()
        #{
        #    InventJournalTrans          _journalTrans;
        #    UnitId                      _UnitId;
        #    ;
        #
        #    if ( this.AGR_RefTableID && this.AGR_RefRecId ) {
        #
        #        Select firstonly firstfast sum(qtyunit) from _journalTrans
        #                index hint RefRecIDX
        #            where   _journalTrans.AGR_RefTableID    ==  this.AGR_RefTableID
        #            &&      _journalTrans.AGR_RefRecId      ==  this.AGR_RefRecId
        #            &&      _journalTrans.RecId             !=  this.RecId;
        #
        #        return _journalTrans.QtyUnit;
        #    }
        #
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #CalcCostAmount
        #//BP Deviation documented
        #display CostAmount calcCostAmount(InventQty  _qty   = intMin())
        #{
        #    InventQty qty = _qty;
        #    ;
        #    if (qty   == intMin())
        #    {
        #        qty   = this.Qty;
        #        if (this.ProjUnitID)
        #        {
        #            qty = UnitConvert::qty(this.Qty,
        #                             this.ProjUnitID,
        #                             InventTable::find(this.ItemId).inventUnitId(),
        #                             this.ItemId);
        #        }
        #    }
        #
        #    return PriceDisc::price2Amount(this.CostPrice,
        #                                   this.priceUnit(),
        #                                   0,
        #                                   qty,
        #                                   qty,
        #                                   this.CostMarkup,
        #                                   0,
        #                                   '',
        #                                   this.CostAmount,
        #                                   true);
        #}
        #
      ENDSOURCE
      SOURCE #calcCostAmountFinishItem
        #void calcCostAmountFinishItem(boolean _research = true)
        #{
        #    InventJournalTrans  journalTrans,journalTransFinishItem;
        #    CostAmount          costAmount;
        #    ;
        #    if (this.bomLine)
        #    {
        #        select sum(CostAmount) from journalTrans
        #            where journalTrans.JournalId            == this.JournalId  &&
        #                  journalTrans.bomLine              == NoYes::Yes      &&
        #                  journalTrans.InventTransIdFather  == this.InventTransIdFather;
        #
        #        if (journalTrans.CostAmount)
        #        {
        #            select firstonly forupdate journalTransFinishItem
        #                where   journalTransFinishItem.JournalId        ==  this.JournalId  &&
        #                        journalTransFinishItem.bomLine          ==  NoYes::No       &&
        #                        journalTransFinishItem.InventTransId    ==  this.InventTransIdFather;
        #
        #            if (journalTransFinishItem)
        #            {
        #                costAmount = Currency::price(-journalTrans.CostAmount);
        #
        #                if (costAmount != journalTransFinishItem.CostAmount)
        #                {
        #                    journalTransFinishItem.CostAmount   =   costAmount;
        #                    journalTransFinishItem.CostPrice    =   PriceDisc::amount2Price(journalTransFinishItem.CostAmount,
        #                                                            0,
        #                                                            0,
        #                                                            journalTransFinishItem.Qty,
        #                                                            0,
        #                                                            journalTransFinishItem.PriceUnit,
        #                                                            '',
        #                                                            0);
        #                    journalTransFinishItem.update();
        #
        #                    if (this.isFormDataSource() && _research)
        #                        this.dataSource().research();
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #calcSalesAmountBOMLine
        #SalesAmount calcSalesAmountBOMLine()
        #{
        #    if (this.bomLine)
        #        return Currency::price(BOMCostProfit::calcSalesPrice(this.CostAmount, this.ProfitSet, this.inventTable().bomCalcGroup().CalcGroupId));
        #
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #calcSalesAmountFinishItem
        #void calcSalesAmountFinishItem(boolean _research = true)
        #{
        #    InventJournalTrans  journalTrans,journalTransFinishItem;
        #    ;
        #    if (this.bomLine)
        #    {
        #        select sum(SalesAmount) from journalTrans
        #            where journalTrans.JournalId            == this.JournalId  &&
        #                  journalTrans.bomLine              == NoYes::Yes      &&
        #                  journalTrans.InventTransIdFather  == this.InventTransIdFather;
        #
        #        if (journalTrans.SalesAmount)
        #        {
        #            journalTransFinishItem.selectForUpdate(true);
        #
        #            select firstonly forupdate journalTransFinishItem
        #                where   journalTransFinishItem.JournalId        ==  this.JournalId  &&
        #                        journalTransFinishItem.bomLine          ==  NoYes::No       &&
        #                        journalTransFinishItem.InventTransId    ==  this.InventTransIdFather;
        #
        #            if (journalTransFinishItem)
        #            {
        #                journalTransFinishItem.SalesAmount = Currency::price(-journalTrans.SalesAmount);
        #                journalTransFinishItem.update();
        #
        #                if (this.isFormDataSource() && _research)
        #                    this.dataSource().research();
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkActivity
        #private boolean checkActivity()
        #{
        #    RecId                       projRecId;
        #    ;
        #
        #    if (this.ActivityNumber)
        #    {
        #        if (!ProjActivity::find(this.ActivityNumber))
        #        {
        #            return checkFailed(strfmt("@SYS50966",this.ActivityNumber));
        #        }
        #
        #        //validate activity is associated to Project
        #        projRecId = ProjTable::find(this.ProjId).RecId;
        #        if (smmActivityParentLinkTable::find(this.ActivityNumber, smmActivityParentType::Project, projRecId).RecId == 0)
        #        {
        #            return checkFailed(strfmt('%1 is not associated to project %2.',this.ActivityNumber, this.ProjId));
        #        }
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #CheckAmount
        #boolean  checkAmount()
        #{
        #    boolean         ok  = true;
        #
        #    if (this.CostAmount* this.Qty   < 0)
        #        ok = checkFailed("@SYS3985");
        #
        #    if (this.CostAmount != Currency::amount(this.CostAmount))
        #        ok = checkFailed("@SYS2602");
        #
        #    if (this.CostAmount* this.SalesAmount < 0)
        #        ok = checkFailed("@SYS15179");
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #checkBatch
        #server boolean checkBatch()
        #{
        #    boolean ok = true;
        #    ;
        #    if(this.inventTable().batchActive())
        #    {
        #        if(!this.inventDim().inventBatchId)
        #            ok = checkFailed(strfmt("Batch not specified for item %1",this.ItemId));
        #
        #        if(ok && this.JournalType == InventJournalType::Transfer && !this.toInventDim().inventBatchId)
        #            ok = checkFailed(strfmt("Batch not specified for item %1",this.ItemId));
        #
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #CheckInitFromInventTable
        #boolean checkInitFromInventTable(InventTable _inventTable)
        #{
        #    InventDim inventDim;
        #    ;
        #
        #    if (! _inventTable.checkValid(_inventTable.ItemId))
        #    {
        #        return false;
        #    }
        #
        #    inventDim.InventSiteId  = _inventTable.inventInventSiteId();
        #    inventDim               = InventDim::findOrCreate(inventDim);
        #
        #    if (! this.inventTableModuleInvent().checkValid()                               ||
        #        ! _inventTable.inventItemInventSetup(inventDim.InventDimId).checkValid()    ||
        #        ! _inventTable.inventItemInventSetup(inventDim.InventDimId).checkNotStopped())
        #    {
        #        return false;
        #    }
        #
        #    if (this.InventTransId)
        #    {
        #        return checkFailed("@SYS10546");
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkProjCategoryId
        #public boolean checkProjCategoryId()
        #{
        #    ProjCategory        projCategory;
        #    boolean             ret = true;
        #    ;
        #
        #    if (this.ProjCategoryId)
        #    {
        #        projCategory = ProjCategory::find(this.ProjCategoryId);
        #
        #        if (projCategory.CategoryType != ProjCategoryType::Item)
        #            ret = checkFailed(strfmt("@SYS54897",this.ProjCategoryId));
        #
        #        ret = ret && projCategory.validateIfInactiveAllowed();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkProjId
        #public boolean checkProjId()
        #{
        #    if (this.ProjId && !ProjTable::find(this.ProjId).status().activeInTree())
        #        return checkFailed(strfmt("@SYS96612",this.ProjId));
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkReleaseDate
        #/// <summary>
        #/// Checks the release date against the current date.
        #/// </summary>
        #/// <returns>
        #/// true if the release date is satisfied (in the past) and the transaction can be posted; otherwise, false
        #/// </returns>
        #public boolean checkReleaseDate()
        #{
        #    boolean ok = true;
        #    PostReleaseDate localReleaseDate;
        #    ;
        #
        #    if (this.ReleaseDate != utcDateTimeNull() && this.ReleaseDate > DateTimeUtil::utcNow())
        #    {
        #        localReleaseDate = DateTimeUtil::applyTimeZoneOffset(this.ReleaseDate, DateTimeUtil::getUserPreferredTimeZone());
        #        ok = checkFailed(strfmt("@SYS114593", datetime2str(localReleaseDate, DateFlags::FormatAll)));
        #    }
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #checkReqActivity
        #public boolean checkReqActivity(InventJournalTrans   inventJournalTrans)
        #{
        #    RequireActivity             requireActivity;
        #    boolean                     ret = true;
        #    ;
        #
        #    requireActivity = ProjTable::checkRequireActivity(inventJournalTrans.ProjId,tablenum(ProjItemTrans));
        #    if (requireActivity && (!inventJournalTrans.ActivityNumber))
        #    {
        #        ret = false;
        #    }
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #copyDimension
        #/// <summary>
        #/// Returns a dimension set that can be applied to the InventJournalTrans.dimension field.
        #/// The method ensures that potential linked dimensions are not overwritten.
        #/// </summary>
        #/// <param name="_dimension">
        #/// A dimension set that should be applied to the InventJournalTrans.dimension field.
        #/// </param>
        #/// <param name="_dimensionCopy">
        #/// A dimensionCopy object previously instantiated using the current InventJournalTrans buffer; optional.
        #/// </param>
        #/// <returns>
        #/// Dimension set that can be applied to the InventJournalTrans.dimension field.
        #/// </returns>
        #public Dimension copyDimension(Dimension _dimension, DimensionCopy _dimensionCopy = DimensionCopy::newFromTable(this))
        #{
        #    return _dimensionCopy.copy(_dimension);
        #}
      ENDSOURCE
      SOURCE #delete
        #void delete()
        #{
        #    ;
        #    ttsbegin;
        #
        #    super();
        #
        #    if (this.JournalType == InventJournalType::Count)
        #        InventItemLocation::updateStopCountingJournal(this);
        #
        #    InventUpd_DeleteMovement::newMovement(InventMovement::construct(this)).updateNow();
        #    if (this.JournalType == InventJournalType::Transfer && this.ToInventTransId && this.ToInventTransId != this.InventTransId)
        #    {
        #        InventUpd_DeleteMovement::newMovement(InventMovement::construct(this,InventMovSubType::TransferReceipt)).updateNow();
        #    }
        #
        #    if (this.Voucher)
        #    {
        #        if (this.numOfVoucherLines() == 0)
        #            JournalError::deleteVoucher(tablenum(InventJournalTable),this.JournalId,this.Voucher);
        #    }
        #    ttscommit;
        #
        #}
      ENDSOURCE
      SOURCE #editReasonCode
        #/// <summary>
        #/// Gets and sets the reason code.
        #/// </summary>
        #/// <param name="_set">
        #/// true if the reason code is set; otherwise, false.
        #/// </param>
        #/// <param name="_reasonCode">
        #/// The new reason code when <paramref name="_set"/> is true.
        #/// </param>
        #/// <returns>
        #/// The reason code of the record in the ReasonTableRef table.
        #/// </returns>
        #//BP Deviation Documented
        #public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
        #{
        #    ReasonCode  reasonCode = _reasonCode;
        #    ;
        #    if (_set)
        #    {
        #        // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
        #        // otherwise, update the existing record.
        #        if (this.ReasonRefRecId == 0)
        #        {
        #            this.ReasonRefRecId = ReasonTableRef::createFromCode(reasonCode);
        #        }
        #        else
        #        {
        #            this.ReasonRefRecId = ReasonTableRef::updateCode(reasonCode,this.ReasonRefRecId);
        #        }
        #
        #        // Updated the reason comment with the default value for the updated reason code
        #        this.editReasonComment(_set,ReasonTable::find(reasonCode).Description);
        #    }
        #    else
        #    {
        #        reasonCode = ReasonTableRef::find(this.ReasonRefRecId).Reason;
        #    }
        #
        #    return reasonCode;
        #}
      ENDSOURCE
      SOURCE #editReasonComment
        #/// <summary>
        #/// Gets and sets the reason comment.
        #/// </summary>
        #/// <param name="_set">
        #/// true if the reason comment is set; otherwise, false.
        #/// </param>
        #/// <param name="_reasonComment">
        #/// The new reason comment when <paramref name="_set"/> is true.
        #/// </param>
        #/// <returns>
        #/// The reason comment of the record in the ReasonTableRef table.
        #/// </returns>
        #//BP Deviation Documented
        #public edit ReasonComment editReasonComment(boolean _set, ReasonComment _reasonComment)
        #{
        #    ReasonComment   reasonComment = _reasonComment;
        #    ;
        #    if (_set)
        #    {
        #        // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
        #        // otherwise, update the existing record.
        #        if (this.ReasonRefRecId == 0)
        #        {
        #           this.ReasonRefRecId = ReasonTableRef::createFromComment(reasonComment);
        #        }
        #        else
        #        {
        #           this.ReasonRefRecId = ReasonTableRef::updateComment(reasonComment,this.ReasonRefRecId);
        #        }
        #    }
        #    else
        #    {
        #        reasonComment = ReasonTableRef::find(this.ReasonRefRecId).ReasonComment;
        #    }
        #
        #    return reasonComment;
        #}
      ENDSOURCE
      SOURCE #financialIssueDimensions
        #Map financialIssueDimensions()
        #{
        #    Map                 dimensionMap = new Map(Types::String, Types::Real);
        #    InventTrans         inventTrans;
        #    InventDim           inventDim;
        #    InventDim           inventDimFinancial;
        #    InventDimGroupId    inventDimGroupId = this.inventTable().DimGroupId;
        #    InventDimParm       inventDimParmFinancial;
        #    InventQty           qty;
        #    ;
        #    inventDimParmFinancial.initFinancialInvent(inventDimGroupId);
        #
        #    while select Qty from inventTrans
        #        where inventTrans.InventTransId == this.InventTransId
        #           && inventTrans.StatusIssue   != StatusIssue::None
        #            join inventDim
        #                where inventDim.InventDimId == inventTrans.InventDimId
        #    {
        #        inventDimFinancial.data(inventDim.data());
        #        inventDimFinancial.clearNotSelectedDim(inventDimParmFinancial);
        #        inventDimFinancial = InventDim::findOrCreate(inventDimFinancial);
        #        if (dimensionMap.exists(inventDimFinancial.InventDimId))
        #        {
        #            qty = dimensionMap.lookup(inventDimFinancial.InventDimId);
        #        }
        #        else
        #        {
        #            qty = 0;
        #        }
        #        qty += inventTrans.Qty;
        #        dimensionMap.insert(inventDimFinancial.InventDimId, qty);
        #    }
        #
        #    return dimensionMap;
        #}
      ENDSOURCE
      SOURCE #getBOMLineInventTransIdParent
        #container getBOMLineInventTransIdParent()
        #{
        #    InventJournalTrans  bomParent;
        #    int                 numParents;
        #    ;
        #
        #    if (this.bomLine)
        #    {
        #        numParents = any2int((select count(RecId) from inventJournalTrans
        #                                index hint LineIdx
        #                                where inventJournalTrans.JournalId == this.JournalId &&
        #                                    inventJournalTrans.bomLine   == NoYes::No      &&
        #                                    inventJournalTrans.RecId     != this.RecId).RecId);
        #
        #        if (numParents)
        #        {
        #            select bomParent
        #                index hint LineIdx
        #                    where bomParent.JournalId == this.JournalId   &&
        #                          bomParent.bomLine   == NoYes::No        &&
        #                          bomParent.RecId     != this.RecId;
        #        }
        #        return [numParents,bomParent];
        #    }
        #
        #    return connull();
        #}
      ENDSOURCE
      SOURCE #InitFromBOM
        #void initFromBOM(BOM      bom)
        #{
        #    InventDim   inventDim;
        #    InventTable inventTable;
        #    ;
        #
        #    this.ItemId             = bom.ItemId;
        #
        #    if (this.InventDimId)
        #    {
        #        inventDim = InventDim::find(this.InventDimId);
        #    }
        #
        #    inventTable = this.inventTable();
        #    inventDim.copyItemDim(inventTable.DimGroupId, InventDim::find(bom.InventDimId));
        #
        #    inventDim.InventSiteId          = inventTable.inventInventSiteId(bom.inventDim().InventSiteId);
        #
        #    if(inventDim.InventSiteId)
        #    {
        #        inventDim.InventLocationId  = inventTable.inventLocationId(bom.inventDim().InventLocationId,
        #                                                                   InventDim::findOrCreate(inventDim).InventDimId,
        #                                                                   inventDim.InventSiteId);
        #    }
        #    else
        #    {
        #        inventDim.InventLocationId  = inventTable.inventLocationId(bom.inventDim().InventLocationId);
        #    }
        #
        #    if (inventDim.InventLocationId != bom.inventDim().InventLocationId)
        #    {
        #        inventDim.initFromInventLocation(inventDim.inventLocation(), inventTable.DimGroupId);
        #    }
        #
        #    this.setInventDimIdFromInventDim(inventDim);
        #}
        #
        #
        #
      ENDSOURCE
      SOURCE #initFromBOMparmReportFinish
        #void initFromBOMparmReportFinish(BOMParmReportFinish    bomParmReportFinish)
        #{
        #;
        #    this.TransDate              = bomParmReportFinish.TransDate;
        #    this.Qty                    = bomParmReportFinish.Qty;
        #    this.setInventDimId(bomParmReportFinish.InventDimId);
        #    this.ProfitSet              = bomParmReportFinish.ProfitSet;
        #    this.InventTransIdReturn    = bomParmReportFinish.InventTransIdReturn;
        #    if (bomParmReportFinish.OverrideDimension)
        #        this.Dimension        = this.copyDimension(bomParmReportFinish.Dimension);
        #
        #    this.setQtyUnit();
        #}
        #
        #
      ENDSOURCE
      SOURCE #initFromBOMReturnLotId
        #void initFromBOMReturnLotId(InventTransId _returnLotId)
        #{
        #    InventTrans     inventTrans = InventTrans::findTransId(_returnLotId);
        #    ;
        #
        #    this.ItemId                 =   inventTrans.ItemId;
        #    this.Dimension              =   this.copyDimension(inventTrans.dimensionFinancial());
        #    [this.Qty, this.CostAmount] =   InventTrans::calcInvoicedCostValue(inventTrans.InventTransId);
        #    this.Qty                    =   -this.Qty;
        #    this.CostAmount             =   -this.CostAmount;
        #    this.CostPrice              =   inventTrans.costPrice();
        #    this.PriceUnit              =   1;
        #
        #    this.setQtyUnit();
        #}
      ENDSOURCE
      SOURCE #InitFromInventJournalTable
        #void initFromInventJournalTable(InventJournalTable inventJournalTable)
        #{
        #    JournalTableData    journalTableData  = JournalTableData::newTable(inventJournalTable);
        #    ;
        #    journalTableData.journalStatic().newJournalTransData(this,journalTableData).initFromJournalTable();
        #}
        #
      ENDSOURCE
      SOURCE #initFromInventJournalTrans
        #void initFromInventJournalTrans(InventJournalTrans inventJournalTrans)
        #{
        #    this.JournalId              = inventJournalTrans.JournalId;
        #    this.LineNum                = inventJournalTrans.LineNum;
        #    this.TransDate              = inventJournalTrans.TransDate;
        #    this.Voucher                = inventJournalTrans.Voucher;
        #    this.ItemId                 = inventJournalTrans.ItemId;
        #    this.Qty                    = inventJournalTrans.Qty;
        #    this.CostPrice              = inventJournalTrans.CostPrice;
        #    this.PriceUnit              = inventJournalTrans.PriceUnit;
        #    this.CostMarkup             = inventJournalTrans.CostMarkup;
        #    this.CostAmount             = inventJournalTrans.CostAmount;
        #    this.SalesAmount            = inventJournalTrans.SalesAmount;
        #    this.LedgerAccountIdOffset  = inventJournalTrans.LedgerAccountIdOffset;
        #    this.InventOnHand           = inventJournalTrans.InventOnHand;
        #    this.Counted                = inventJournalTrans.Counted;
        #    this.Dimension              = this.copyDimension(inventJournalTrans.Dimension);
        #    this.bomLine                = inventJournalTrans.bomLine;
        #    this.setInventDimId(inventJournalTrans.InventDimId);
        #    this.ToInventDimId          = inventJournalTrans.ToInventDimId;
        #    this.ReqPOId                = inventJournalTrans.ReqPOId;
        #    this.EmplId                 = inventJournalTrans.EmplId;
        #    this.AssetTransType         = inventJournalTrans.AssetTransType;
        #    this.AssetId                = inventJournalTrans.AssetId;
        #
        #// project
        #    this.ProjCategoryId         = inventJournalTrans.ProjCategoryId;
        #    this.ProjId                 = inventJournalTrans.ProjId;
        #    this.ActivityNumber         = inventJournalTrans.ActivityNumber;
        #    this.ProjLinePropertyId     = inventJournalTrans.ProjLinePropertyId;
        #    this.ProjSalesCurrencyId    = inventJournalTrans.ProjSalesCurrencyId;
        #    this.ProjSalesPrice         = inventJournalTrans.ProjSalesPrice;
        #    this.ProjTaxGroupId         = inventJournalTrans.ProjTaxGroupId;
        #    this.ProjTaxItemGroupId     = inventJournalTrans.ProjTaxItemGroupId;
        #    this.ProjUnitID             = inventJournalTrans.ProjUnitID;
        #
        #    this.setQtyUnit();
        #
        #
        #}
        #
      ENDSOURCE
      SOURCE #InitFromInventSum
        #void initFromInventSum(InventSum inventSum)
        #{
        #    InventTable       inventTable           = this.inventTable();
        #    InventPriceMap    inventPriceMap        = inventTable.inventCostPriceMap(inventSum.InventDimId,null,null,this.TransDate);
        #    ;
        #
        #    this.ItemId             = inventSum.ItemId;
        #    this.setInventDimId(inventSum.InventDimId);
        #
        #    this.Dimension          = this.copyDimension(inventTable.Dimension);
        #
        #    this.CostPrice          = inventPriceMap.price();
        #    this.PriceUnit          = inventPriceMap.priceUnit();
        #    this.CostMarkup         = inventPriceMap.markup();
        #}
        #
        #
      ENDSOURCE
      SOURCE #InitFromInventTable
        #void initFromInventTable(   InventTable     inventTable,
        #                            boolean         initQty         = true,
        #                            boolean         initInventDim   = true,
        #                            boolean         initCostPrice   = true)
        #{
        #    InventDim   inventDim;
        #    ;
        #
        #    this.ItemId             = inventTable.ItemId;
        #
        #    // naski add 21/12/2012 - if counting don't copy dimension (cost center)
        #    if(this.JournalType != InventJournalType::Count){
        #        this.Dimension          = this.copyDimension(inventTable.Dimension);
        #    }
        #
        #
        #    this.ProjCategoryId     = inventTable.ProjCategoryId ? inventTable.ProjCategoryId : this.ProjCategoryId;
        #
        #    if (initInventDim)
        #    {
        #        if (this.InventDimId)
        #        {
        #            inventDim = InventDim::find(this.InventDimId);
        #        }
        #
        #        inventDim.initFromInventTable(inventTable,InventItemOrderSetupType::Invent,inventDim);
        #        inventDim.InventDimId   = InventDim::findOrCreate(inventDim).InventDimId;
        #        this.setInventDimId(inventDim.InventDimId, inventDim);
        #    }
        #
        #    if (initQty)
        #    {
        #        this.Qty = this.bomLine ? -inventTable.inventStandardQty(inventDim.InventDimId) : inventTable.inventStandardQty(inventDim.InventDimId);
        #        this.Unit               = '';
        #        this.QtyUnit            = this.Qty;
        #        this.setQtyUnit();
        #
        #    }
        #
        #    if (initCostPrice)
        #    {
        #        this.setCostPrice(this.InventDimId, inventDim, this.inventTableModuleInvent());
        #    }
        #
        #    if (this.bomLine)
        #        this.SalesAmount    = this.calcSalesAmountBOMLine();
        #}
        #
        #
      ENDSOURCE
      SOURCE #initFromProjActivity
        #public void initFromProjActivity(ProjActivity _projActivity)
        #{;
        #    if (!_projActivity || !_projActivity.CategoryDefault ||
        #            ProjCategory::find(_projActivity.CategoryDefault).CategoryType != ProjCategoryType::Item)
        #    {
        #        return;
        #    }
        #
        #    this.ProjCategoryId = _projActivity.CategoryDefault;
        #}
        #
        #
      ENDSOURCE
      SOURCE #initFromProjTable
        #void initFromProjTable(ProjTable       _projTable)
        #{
        #    ;
        #
        #    this.ProjSalesCurrencyId    = _projTable.currencyId();
        #    this.Dimension              = this.copyDimension(_projTable.Dimension);
        #    this.ProjLinePropertyId     = ProjLinePropertySetup::findLinePropertyId(this.ProjId,this.ProjCategoryId);
        #    this.ProjTaxGroupId         = ProjParameters::taxGroupInvoice(this.ProjId);
        #}
        #
      ENDSOURCE
      SOURCE #InitValue
        #void initValue()
        #{
        #    this.TransDate= systemdateget();
        #
        #    super();
        #}
      ENDSOURCE
      SOURCE #insert
        #server void insert(NoYes dropEstimated = NoYes::No)
        #{
        #    InventUpd_Estimated     estimated;
        #    InventUpd_Estimated     estimatedTransfer;
        #    ;
        #
        #    try
        #    {
        #        ttsbegin;
        #
        #        if (! this.LineNum)
        #            this.LineNum = InventJournalTrans::lastLineNum(this.JournalId) + 1;
        #
        #        this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
        #
        #        if (this.JournalType == InventJournalType::Transfer)
        #        {
        #            this.ToInventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
        #        }
        #
        #        if (this.ProjId && ! this.ProjTransId)
        #            this.ProjTransId    = ProjParameters::newTransId();
        #
        #        if (! dropEstimated)
        #        {
        #            estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(this));
        #            estimated.updateNow();
        #
        #            if (this.JournalType == InventJournalType::Transfer)
        #            {
        #                estimatedTransfer = InventUpd_Estimated::newInventMovement(InventMovement::construct(this,InventMovSubType::TransferReceipt));
        #                estimatedTransfer.updateNow();
        #            }
        #
        #        }
        #        super();
        #
        #        if (estimated)
        #            estimated.updateReservation();
        #
        #        if (estimatedTransfer)
        #            estimatedTransfer.updateReservation();
        #
        #        if (this.JournalType == InventJournalType::Count)
        #            InventItemLocation::updateStartCounting(this.ItemId,this.inventDim(), this.JournalId);
        #
        #        ttscommit;
        #    }
        #    catch (Exception::Error)
        #    {
        #        this.InventTransId = '';
        #    }
        #}
        #
        #
        #
      ENDSOURCE
      SOURCE #inventDim
        #InventDim inventDim(boolean _forUpdate = false)
        #{
        #    return InventDim::find(this.InventDimId,_forUpdate);
        #}
      ENDSOURCE
      SOURCE #InventJournalTable
        #InventJournalTable inventJournalTable(boolean _forUpdate = false)
        #{
        #    return InventJournalTable::find(this.JournalId,_forUpdate);
        #}
      ENDSOURCE
      SOURCE #InventMovement
        #InventMov_Journal inventMovement()
        #{
        #    return InventMovement::construct(this);
        #}
      ENDSOURCE
      SOURCE #InventTable
        #InventTable inventTable()
        #{
        #    return InventTable::find(this.ItemId);
        #
        #}
      ENDSOURCE
      SOURCE #inventTableModuleInvent
        #InventTableModule inventTableModuleInvent()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent);
        #}
      ENDSOURCE
      SOURCE #itemName
        #//BP Deviation documented
        #display ItemNameDisplay itemName()
        #{
        #    ItemNameDisplay test;
        #    ;
        #    test = inventtable::find(this.ItemId).itemname;
        #    //return InventTable::find(this.ItemId).itemName(this.inventDim());
        #    return inventtable::find(this.ItemId).itemname;
        #}
        #
        #
      ENDSOURCE
      SOURCE #linkInventDim2Dimension
        #/// <summary>
        #/// Defaults InventJournalTrans.dimension values based on the InventDim record buffer values.
        #/// </summary>
        #/// <param name="_newInventDim">
        #/// The InventDim record buffer linked to the current InventJournalTrans record buffer;
        #/// </param>
        #/// <param name="_oldInventDim">
        #/// The InventDim record buffer that was previously linked to the current InventJournalTrans record buffer;
        #/// </param>
        #public void linkInventDim2Dimension(InventDim _newInventDim, InventDim _oldInventDim)
        #{
        #    ;
        #    _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
        #}
      ENDSOURCE
      SOURCE #modifiedField
        #public void modifiedField(fieldId _fieldId)
        #{
        #    super(_fieldId);
        #
        #    switch (_fieldId)
        #    {
        #        case fieldnum(InventJournalTrans, QtyUnit):
        #            this.setQty();
        #            this.modifiedField(fieldnum(InventJournalTrans, Qty));
        #            break;
        #        case fieldnum(InventJournalTrans, Unit):
        #            this.setQty();
        #            this.modifiedField(fieldnum(InventJournalTrans, Qty));
        #            break;
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #numOfVoucherLines
        #Integer numOfVoucherLines()
        #{
        #    return any2int((select count(RecId) from inventJournalTrans
        #                      where inventJournalTrans.JournalId == this.JournalId &&
        #                            inventJournalTrans.Voucher   == this.Voucher).RecId);
        #}
        #
      ENDSOURCE
      SOURCE #PriceUnit
        #PriceUnit  priceUnit()
        #{
        #    return (this.PriceUnit ? this.PriceUnit : 1);
        #}
      ENDSOURCE
      SOURCE #projInventCostAmount
        #SalesCostValue projInventCostAmount(ProjAdjustRefId _projAdjustRefId)
        #{
        #    return InventTrans::projPackingSlipCostAmount(this.InventTransId,_projAdjustRefId);
        #}
      ENDSOURCE
      SOURCE #QtyItem
        #//BI 6May2014
        #display SalesQty QtyItem()
        #{
        #    return (select sum(QtyUnit) from InventJournalTrans
        #              where InventJournalTrans.JournalId == this.JournalId &&
        #                    InventJournalTrans.ItemId == this.ItemId).QtyUnit;
        #}
        #
      ENDSOURCE
      SOURCE #QtyItemFromLocation
        #//BI 6May2014
        #display SalesQty QtyItemFromLocation()
        #{
        #    InventDim           id;
        #    InventJournalTrans  ijt;
        #    WMSLocationId       loc;
        #    InventSiteId        site;
        #
        #    qty ret;
        #    ;
        #
        #    select id
        #        where id.inventDimId==this.InventDimId;
        #    loc=id.wMSLocationId;
        #    site=id.InventSiteId;
        #
        #    select sum(QtyUnit) from ijt
        #        where ijt.JournalId == this.JournalId
        #        && ijt.ItemId == this.ItemId
        #    join id
        #        where id.inventDimId == ijt.InventDimId
        #        && id.wMSLocationId == loc
        #        && id.InventSiteId == site;
        #
        #    ret = ijt.QtyUnit;
        #
        #//    while select * from ijt
        #//        where ijt.JournalId == this.JournalId
        #//        && ijt.ItemId == this.ItemId
        #//    join id
        #//        where id.inventDimId == ijt.InventDimId
        #//        && id.wMSLocationId == loc
        #//        && id.InventSiteId == site
        #//    {
        #//        ret += ijt.QtyUnit;
        #//    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #QtyItemToLocation
        #//BI 6May2014
        #display SalesQty QtyItemToLocation()
        #{
        #    InventDim           id;
        #    InventJournalTrans  ijt;
        #    WMSLocationId       loc;
        #    InventSiteId        site;
        #    ;
        #
        #    select id
        #        where id.inventDimId==this.ToInventDimId;
        #    loc=id.wMSLocationId;
        #    site=id.InventSiteId;
        #
        #    select sum(QtyUnit) from ijt join id
        #        where id.inventDimId==ijt.ToInventDimId && id.wMSLocationId==loc &&
        #                ijt.JournalId==this.JournalId && ijt.ItemId==this.ItemId &&
        #                id.InventSiteId==site;
        #
        #    return ijt.QtyUnit;
        #}
        #
      ENDSOURCE
      SOURCE #queryValueInventTransId
        #str queryValueInventTransId()
        #{
        #    str     s;
        #
        #    s = '(';
        #    s += '((' + fieldstr(InventTrans,InventTransId)+' == \"'+this.InventTransId+'\"))';
        #    if (this.ToInventTransId && this.ToInventTransId != this.InventTransId)
        #    {
        #        s += ' || ';
        #        s += '((' +fieldstr(InventTrans,InventTransId)+' == \"'+this.ToInventTransId+'\"))';
        #    }
        #
        #    s +=')';
        #
        #    return s;
        #}
        #
      ENDSOURCE
      SOURCE #setCostPrice
        #void setCostPrice(
        #    InventDimId             _inventDimId                = '',   // can be = '' if setting the _inventDim buffer
        #    InventDim               _inventDim                  = null, // set this parameter for better performance if avail
        #    InventTableModule       _inventTableModuleInvent    = null  // set this parameter for better performance if avail
        #    )
        #{
        #    CostAmount      returnValue;
        #    InventQty       returnQty;
        #
        #    InventPriceMap  inventPriceMap;
        #    InventMovement  inventMovement;
        #    ;
        #
        #    inventMovement = this.inventMovement();
        #
        #    if (inventMovement.isReturned(this.Qty * inventMovement.transSign()))
        #    {
        #        if (inventMovement.inventModelType().stdCostBased())
        #        {
        #            this.CostPrice = InventModelType_StdCost::calcReturnFinancialCostPricePcs(this.InventTransIdReturn,this.InventTransId);
        #        }
        #        else
        #        {
        #            [returnQty,returnValue] = InventTrans::calcReturnCostValue(this.InventTransIdReturn, this.InventTransId);
        #             this.CostPrice = returnQty != 0 ? returnValue /returnQty : 0;
        #        }
        #
        #        this.PriceUnit          = 1;
        #        this.CostMarkup         = 0;
        #    }
        #    else
        #    {
        #        inventPriceMap          = this.inventTable().inventCostPriceMap(_inventDimId ,_inventDim,_inventTableModuleInvent,this.TransDate);
        #
        #        this.CostPrice          = inventPriceMap.price();
        #        this.PriceUnit          = inventPriceMap.priceUnit();
        #        this.CostMarkup         = inventPriceMap.markup();
        #    }
        #
        #    this.CostAmount         = this.calcCostAmount();
        #}
        #
      ENDSOURCE
      SOURCE #setInventDimId
        #/// <summary>
        #/// Applies the InventDimId parameter to the InventJournalTrans.inventDimId field and defaults values based on the new inventory dimensions.
        #/// </summary>
        #/// <param name="_inventDimId">
        #/// The InventDimId value that should be applied to the InventJournalTrans.InventDimId field.
        #/// </param>
        #/// <param name="_inventDim">
        #/// The InventDim record buffer related to the InventDimId parameters; optional.
        #/// </param>
        #public void setInventDimId(InventDimId _inventDimId, InventDim _inventDim = InventDim::find(_inventDimId))
        #{
        #    InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();
        #    ;
        #    this.InventDimId = _inventDimId;
        #    this.linkInventDim2Dimension(_inventDim, currentInventDim);
        #}
      ENDSOURCE
      SOURCE #setInventDimIdFromBOM
        #/// <summary>
        #/// Sets the field inventDimId on the current TmpBOM record.
        #/// </summary>
        #/// <param name="_bom">
        #/// A record of type BOM.
        #/// </param>
        #/// <param name="_parentItemId">
        #/// A string that holds the parent itemID.
        #/// </param>
        #/// <param name="_parentInventDim">
        #/// A record of type inventDim that holds the inventory dimensions related to the parent item.
        #/// </param>
        #/// <param name="_routeId">
        #/// A string that hold the routeID which must be used to make the parent item.
        #/// </param>
        #public void setInventDimIdFromBOM(
        #    BOM         _bom,
        #    ItemId      _parentItemId,
        #    InventDim   _parentInventDim,
        #    RouteId     _routeId)
        #{
        #    InventDim   inventDimNew;
        #    ;
        #
        #    inventDimNew = _bom.BOMMap::inventDimFinal(_parentItemId,_parentInventDim,_routeId);
        #
        #    this.setInventDimId(inventDimNew.InventDimId,inventDimNew);
        #}
      ENDSOURCE
      SOURCE #setInventDimIdFromInventDim
        #/// <summary>
        #/// Finds or create an InventDimId for the InventDim parameter and applies the found InventDimId to the InventJournalTrans.inventDimId field.
        #/// </summary>
        #/// <param name="_inventDim">
        #/// An InventDim record buffer that should be referenced by the current InventJournalTrans record buffer.
        #/// </param>
        #public void setInventDimIdFromInventDim(InventDim _inventDim)
        #{
        #    InventDim   inventDim;
        #    ;
        #    inventDim = InventDim::findOrCreate(_inventDim);
        #    this.setInventDimId(inventDim.InventDimId, inventDim);
        #}
      ENDSOURCE
      SOURCE #setInventTransIdFather
        #void setInventTransIdFather()
        #{
        #    InventJournalTrans      bomParent;
        #    Integer                 numParents;
        #
        #    ;
        #
        #    if (this.bomLine)
        #    {
        #        if (this.InventTransIdFather)
        #            return ;
        #
        #        [numParents,bomParent] = this.getBOMLineInventTransIdParent();
        #
        #        if (numParents == 1)
        #           this.InventTransIdFather = bomParent.InventTransId;
        #    }
        #    else
        #    {
        #        this.InventTransIdFather = nullValue(this.InventTransIdFather);
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #setProjSalesPrice
        #void setProjSalesPrice(ProjTable    _projTable, InventDim _inventDim = this.inventDim())
        #{
        #    PriceDisc   priceDisc;
        #    CustTable   custTable;
        #    ;
        #
        #    if ((this.ProjId) && (this.ItemId))
        #    {
        #        priceDisc =  new PriceDisc(ModuleInventPurchSales::Sales,
        #                             this.ItemId,
        #                             _inventDim,
        #                             this.ProjUnitID,
        #                             this.TransDate,
        #                             this.Qty,
        #                             _projTable.CustAccount,
        #                             _projTable.currencyId());
        #
        #        custTable = CustTable::find(_projTable.CustAccount);
        #
        #        if (! priceDisc.findPrice(custTable.PriceGroup))
        #        {
        #            priceDisc.findItemPrice();
        #        }
        #
        #        this.ProjSalesPrice = priceDisc.price();
        #    }
        #}
      ENDSOURCE
      SOURCE #setQty
        #void setQty()
        #{
        #    if(!this.UnitInvent)
        #        this.UnitInvent = this.unitId();
        #
        #    if(!this.Unit)
        #        this.Unit    = this.UnitInvent;
        #
        #    this.Qty = UnitConvert::qty(this.QtyUnit, this.Unit, this.UnitInvent, this.ItemId);
        #}
      ENDSOURCE
      SOURCE #setQtyUnit
        #void setQtyUnit()
        #{
        #    if(!this.UnitInvent)
        #        this.UnitInvent = this.unitId();
        #
        #    if(!this.Unit)
        #        this.Unit    = this.UnitInvent;
        #
        #    this.QtyUnit = UnitConvert::qty(this.Qty, this.UnitInvent, this.Unit, this.ItemId);
        #}
      ENDSOURCE
      SOURCE #toDimension
        #Dimension toDimension(InventJournalTable _inventJournalTable, InventDim toInventDim)
        #{
        #    Dimension               toDimension = this.Dimension;
        #    InventTrans             inventTrans;
        #    InventSiteDimensionLink inventSiteDimensionLink;
        #    ;
        #    if (this.JournalType != InventJournalType::Transfer)
        #        return toDimension;
        #
        #    if (_inventJournalTable.Posted)
        #    {
        #        if (!this.ToInventTransId || this.ToInventTransId == this.InventTransId)
        #            return this.Dimension;
        #
        #        select firstonly InventTransId, Voucher, DateFinancial from inventTrans
        #            where inventTrans.InventTransId == this.ToInventTransId;
        #        return inventTrans.dimensionFinancial();
        #    }
        #
        #    if (toInventDim.InventSiteId)
        #    {
        #        inventSiteDimensionLink = InventSiteDimensionLink::newDimensionTables(this, toInventDim);
        #        toDimension = inventSiteDimensionLink.changeDimension(toDimension);
        #    }
        #
        #    return toDimension;
        #}
      ENDSOURCE
      SOURCE #toInventDim
        #InventDim toInventDim(boolean _forUpdate = false)
        #{
        #    return InventDim::find(this.ToInventDimId,_forUpdate);
        #}
        #
      ENDSOURCE
      SOURCE #unitId
        #//BP Deviation documented
        #display UnitID unitId()
        #{
        #    return this.inventTable().inventUnitId();
        #}
        #
      ENDSOURCE
      SOURCE #Update
        #void update(NoYes dropEstimated = NoYes::No)
        #{
        #    InventJournalTrans      this_Orig = this.orig();
        #    InventUpd_Estimated     estimated;
        #    InventUpd_Estimated     estimatedTransfer;
        #    ;
        #
        #    ttsbegin;
        #
        #    if (this.JournalType == InventJournalType::Count)
        #        InventItemLocation::updateStopCountingJournal(this_Orig);
        #
        #    if (! dropEstimated)
        #    {
        #        estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(this));
        #        estimated.updateNow();
        #
        #        if (this.JournalType == InventJournalType::Transfer)
        #        {
        #            estimatedTransfer = InventUpd_Estimated::newInventMovement(InventMovement::construct(this,InventMovSubType::TransferReceipt));
        #            estimatedTransfer.updateNow();
        #        }
        #    }
        #
        #    super();
        #
        #    if (estimated)
        #        estimated.updateReservation();
        #
        #    if (this.JournalType == InventJournalType::Count)
        #        InventItemLocation::updateStartCounting(this.ItemId,this.inventDim(), this.JournalId);
        #
        #    ttscommit;
        #}
        #
        #
      ENDSOURCE
      SOURCE #validateField
        #boolean validateField(fieldId id)
        #{
        #    boolean ret;
        #    ItemId              itemId;
        #    ;
        #    switch(id)
        #    {
        #        case fieldnum(InventJournalTrans, ItemId):
        #            itemId = this.ItemId;
        #            if (itemId && !InventTable::find(itemId))
        #                Barcode::validateItemBarcode(this, itemId);
        #            break;
        #    }
        #
        #    ret = super(id);
        #
        #    switch (id)
        #    {
        #        case fieldnum(InventJournalTrans,LedgerAccountIdOffset):
        #            ret = LedgerTable::checkTransactionAccount(this.LedgerAccountIdOffset) && ret;
        #            break;
        #
        #        case fieldnum(InventJournalTrans, ProjId):
        #            ret = ret && this.checkProjId();
        #            break;
        #
        #        case(fieldnum(InventJournalTrans, ProjCategoryId)):
        #            ret = ret && this.checkProjCategoryId();
        #            break;
        #
        #        case fieldnum(InventJournalTrans, ActivityNumber):
        #            ret = ret && this.checkActivity();
        #            break;
        #
        #        // add by nat (agreeya) - AGR_OTC_DOPickTransfer_Rev
        #        case fieldnum(InventJournalTrans, QtyUnit):
        #            if ( this.AGR_RefTableID != tablenum(VendPackingSlipTrans))
        #            {
        #                if(this.AGR_SummaryDONum != '')
        #                {
        #                    if(this.QtyUnit > this.AGR_DoQty)
        #                        ret = checkfailed('Quantity cannot be more than DO quantity');
        #                }
        #            }
        #            break;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateWrite
        #public boolean validateWrite()
        #{
        #    boolean             isValid;
        #    ProjValCheckTrans   projValCheckTrans;
        #    ReasonTable         reasonTable;
        #    // Retrieve the Reaon code from the reason reference table.
        #    ReasonCode          reasonCode;
        #    ;
        #
        #    isValid = super();
        #
        #    if (this.ReasonRefRecId)
        #    {
        #        reasonCode = ReasonTableRef::find(this.ReasonRefRecId).Reason;
        #    }
        #
        #    if (this.JournalType == InventJournalType::project)
        #    {
        #        if (! this.ProjId)
        #            isValid = checkFailed("@SYS74373");
        #
        #        if (! this.ProjCategoryId)
        #            isValid = checkFailed("@SYS76856");
        #
        #        if (! this.ProjLinePropertyId)
        #            isValid = checkFailed("@SYS76857");
        #
        #        if (! this.ProjUnitID)
        #            isValid = checkFailed("@SYS76858");
        #
        #        if (! this.ProjSalesCurrencyId)
        #            isValid = checkFailed("@SYS76866");
        #
        #        isValid = isValid && this.checkProjId() && this.checkProjCategoryId();
        #
        #        isValid = isValid && this.checkActivity();
        #
        #        if (isValid)
        #        {
        #            projValCheckTrans = new ProjValCheckTrans();
        #            isValid = projValCheckTrans.validateMandatory(this);
        #        }
        #    }
        #
        #    if (this.JournalType == InventJournalType::Count)
        #    {
        #        if (!this.RecId) // don't get consistency check errors for old journals
        #        {
        #            if (this.inventTable().AutoReportFinished)
        #                isValid = checkFailed(strfmt("@SYS83913", this.ItemId));
        #        }
        #    }
        #
        #    if (isValid)
        #    {
        #        isValid = appl.dimensionSetValidation().checkDimension(this, fieldnum(InventJournalTrans, Dimension), true);
        #    }
        #
        #    // General validation if Reason code is used.
        #    if (isValid && reasonCode != "")
        #    {
        #        reasonTable = ReasonTable::find(reasonCode);
        #        if (reasonTable.RecId == 0)
        #        {
        #              isValid = checkFailed(strfmt("@SYS112224", reasonCode, fieldpname(ReasonTable, Reason), tablepname(ReasonTable)));
        #        }
        #    }
        #
        #    // Validate Reason code for these journals.
        #    if (isValid && this.JournalType == InventJournalType::Asset)
        #    {
        #        if (reasonCode == "")
        #        {
        #            if (AssetParameters::transTypeRequiresValidation(this.AssetTransType))
        #            {
        #                // The Reason code required.
        #                isValid = checkFailed(strfmt("@SYS110217", "@SYS111246"));
        #            }
        #        }
        #        else
        #        {
        #            // If a Reason code is blank then these validations will not occur.
        #            if (reasonTable.Asset == NoYes::No)
        #            {
        #                // The Reason code is not active for 'Asset' transactions.
        #                isValid = checkFailed(strfmt("@SYS115522"));
        #            }
        #        }
        #    }
        #
        #    isValid = isValid && this.checkBatch();
        #
        #    return isValid;
        #}
        #
      ENDSOURCE
      SOURCE #ZeroQty
        #//BP Deviation documented
        #display InventQtyZero zeroQty()
        #{
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #adjustReleaseDate
        #/// <summary>
        #/// Updates the InventJournalTrans table ReleaseDate field values for records with the specified journal number and voucher.
        #/// </summary>
        #/// <param name="_inventJournalTrans">
        #/// The InventJournalTrans table record to be used as a basis for the upate.
        #/// </param>
        #/// <remarks>
        #/// This method updates all InventJournalTrans table records having the same journalID and
        #/// voucher as on the supplied InventJournalTrans table record.
        #/// It also sets the ReleaseDate field to the value from the specified InventJournalTrans table record.
        #/// </remarks>
        #public static void adjustReleaseDate(InventJournalTrans _inventJournalTrans)
        #{
        #    InventJournalTrans  inventJournalTransLocal;
        #    ;
        #
        #    // Replace the traditional while select for udpdate statement with update_recordset because
        #    // this command speeds up database processing beacuse of fewer calls to the database.
        #    update_recordset inventJournalTransLocal
        #        setting releaseDate = _inventJournalTrans.ReleaseDate
        #        where ((inventJournalTransLocal.JournalId == _inventJournalTrans.JournalId) &&
        #               (inventJournalTransLocal.RecId != _inventJournalTrans.RecId));
        #}
        #
      ENDSOURCE
      SOURCE #AGR_TransferLines
        #//Created By NAG 4/11/09 (Agreeya) AGR_OTCChange
        #static InventJournalTrans AGR_TransferLines(InventJournalId _journalId, InventTransId _transId, InventDimId _inventDimId, boolean _forUpdate = false)
        #{
        #    InventJournalTrans inventJournalTrans;
        #    ;
        #
        #    inventJournalTrans.selectForUpdate(_forUpdate);
        #
        #    if (_transId)
        #    {
        #        select firstonly inventJournalTrans
        #            //index hint TransIdIdx
        #            index hint JournalTransIdx // change by VLSP 23/09/2019
        #            where inventJournalTrans.JournalId      == _journalId   &&
        #                  //inventJournalTrans.InventTransId  == _transId     &&
        #                  inventJournalTrans.AGR_InventTransId  == _transId     &&
        #                  inventJournalTrans.InventDimId    == _inventDimId;
        #    }
        #
        #    return inventJournalTrans;
        #}
      ENDSOURCE
      SOURCE #findInventTransId
        #static InventJournalTrans findInventTransId(InventTransId _transId,boolean _forUpdate = false)
        #{
        #    InventJournalTrans inventJournalTrans;
        #    ;
        #
        #    inventJournalTrans.selectForUpdate(_forUpdate);
        #
        #    if (_transId)
        #    {
        #        select firstonly inventJournalTrans
        #            index hint TransIdIdx
        #            where inventJournalTrans.InventTransId == _transId;
        #    }
        #
        #    return inventJournalTrans;
        #}
      ENDSOURCE
      SOURCE #findToInventTransId
        #static InventJournalTrans findToInventTransId(InventTransId _transId,boolean _forUpdate = false)
        #{
        #    InventJournalTrans inventJournalTrans;
        #    ;
        #
        #    inventJournalTrans.selectForUpdate(_forUpdate);
        #
        #    if (_transId)
        #    {
        #        select firstonly inventJournalTrans
        #            where inventJournalTrans.ToInventTransId == _transId;
        #    }
        #
        #    return inventJournalTrans;
        #}
      ENDSOURCE
      SOURCE #lastLineNum
        #static LineNum lastLineNum(InventJournalId _journalId)
        #{
        #    return (select maxof(LineNum) from inventJournalTrans
        #                index hint LineIdx
        #                where inventJournalTrans.JournalId == _journalId).LineNum;
        #}
        #
      ENDSOURCE
      SOURCE #lookupInventTransIdFather
        #static void lookupInventTransIdFather(FormStringControl _ctrl, JournalId _journalId)
        #{
        #
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(InventJournalTrans),_ctrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource     = query.addDataSource(tablenum(InventJournalTrans));
        #    QueryBuildRange         queryBuildRangeBOMLine   = queryBuildDataSource.addRange(fieldnum(InventJournalTrans,bomLine));
        #    QueryBuildRange         queryBuildRangeJournalId = queryBuildDataSource.addRange(fieldnum(InventJournalTrans,JournalId));
        #    ;
        #
        #    queryBuildRangeBOMLine.value(queryValue(NoYes::No));
        #    queryBuildRangeJournalId.value(queryValue(_journalId));
        #
        #    sysTableLookup.addLookupfield(fieldnum(InventJournalTrans,InventTransId),true);
        #    sysTableLookup.addLookupfield(fieldnum(InventJournalTrans,ItemId));
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : InventJournalTable unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #InventJournalTable
    PROPERTIES
      Name                #InventJournalTable
      Label               #@SYS22111
      FormRef             #InventJournalTable
      TitleField1         #JournalId
      TitleField2         #Description
      ConfigurationKey    #LogisticsBasic
      SecurityKey         #InventTables
      CacheLookup         #NotInTTS
      TableGroup          #WorksheetHeader
      PrimaryIndex        #JournalIdx
      ClusterIndex        #JournalIdx
      DeveloperDocumentation  #@SYS123819
    ENDPROPERTIES
    
    FIELDS
      FIELD #JournalId
        STRING
        PROPERTIES
          Name                #JournalId
          Mandatory           #Yes
          AllowEdit           #No
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #InventJournalId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Description
        STRING
        PROPERTIES
          Name                #Description
          HelpText            #@SYS27840
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #JournalDescription
              #
            ENDARRAY
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #Posted
        ENUM
        PROPERTIES
          Name                #Posted
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #JournalPosted
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Reservation
        ENUM
        PROPERTIES
          Name                #Reservation
          Table               #InventJournalTable
          EnumType            #ItemReservation
        ENDPROPERTIES
        
      FIELD #SystemBlocked
        ENUM
        PROPERTIES
          Name                #SystemBlocked
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #JournalSystemBlocked
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #BlockUserId
        STRING
        PROPERTIES
          Name                #BlockUserId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #JournalBlockUserId
              #
            ENDARRAY
          StringSize          #5
        ENDPROPERTIES
        
      FIELD #SessionLoginDateTime
        DATETIME
        PROPERTIES
          Name                #SessionLoginDateTime
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #JournalSessionLoginDateTime
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #PostedDateTime
        DATETIME
        PROPERTIES
          Name                #PostedDateTime
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #JournalPostedDateTime
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #JournalType
        ENUM
        PROPERTIES
          Name                #JournalType
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTable
          EnumType            #InventJournalType
        ENDPROPERTIES
        
      FIELD #JournalNameId
        STRING
        PROPERTIES
          Name                #JournalNameId
          Mandatory           #Yes
          AllowEdit           #No
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #InventJournalNameId
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #InventDimFixed
        INT
        PROPERTIES
          Name                #InventDimFixed
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #InventDimFixed
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #EmplId
        STRING
        PROPERTIES
          Name                #EmplId
          HelpText            #@SYS62798
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #EmplId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #BlockUserGroupId
        STRING
        PROPERTIES
          Name                #BlockUserGroupId
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #JournalBlockUserGroupId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #VoucherDraw
        ENUM
        PROPERTIES
          Name                #VoucherDraw
          Table               #InventJournalTable
          EnumType            #JournalVoucherDraw
        ENDPROPERTIES
        
      FIELD #VoucherChange
        ENUM
        PROPERTIES
          Name                #VoucherChange
          Table               #InventJournalTable
          EnumType            #InventJournalVoucherChange
        ENDPROPERTIES
        
      FIELD #VoucherSeqId
        STRING
        PROPERTIES
          Name                #VoucherSeqId
          AllowEdit           #No
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #InventJournalVoucherSeqId
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #DEL_SessionLoginTime
        TIME
        PROPERTIES
          Name                #DEL_SessionLoginTime
          AllowEditOnCreate   #No
          AllowEdit           #No
          ConfigurationKey    #SysDeletedObjects41
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #DEL_JournalSessionLoginTime
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #DEL_SessionLoginDate
        DATE
        PROPERTIES
          Name                #DEL_SessionLoginDate
          AllowEditOnCreate   #No
          AllowEdit           #No
          ConfigurationKey    #SysDeletedObjects41
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #DEL_JournalSessionLoginDate
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #SessionId
        INT
        PROPERTIES
          Name                #SessionId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #JournalSessionId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #PostedUserId
        STRING
        PROPERTIES
          Name                #PostedUserId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #JournalPostedUserId
              #
            ENDARRAY
          StringSize          #5
        ENDPROPERTIES
        
      FIELD #DEL_PostedDate
        DATE
        PROPERTIES
          Name                #DEL_PostedDate
          AllowEditOnCreate   #No
          AllowEdit           #No
          ConfigurationKey    #SysDeletedObjects41
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #DEL_JournalPostedDate
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #NumOfLines
        INT
        PROPERTIES
          Name                #NumOfLines
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #JournalNumOfLines
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #JournalIdOrignal
        STRING
        PROPERTIES
          Name                #JournalIdOrignal
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #InventJournalIdOrignal
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #DetailSummary
        ENUM
        PROPERTIES
          Name                #DetailSummary
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #JournalDetailSummary
              #
            ENDARRAY
          EnumType            #DetailSummary
        ENDPROPERTIES
        
      FIELD #DeletePostedLines
        ENUM
        PROPERTIES
          Name                #DeletePostedLines
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #JournalDeletePostedLines
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #LedgerAccountIdOffset
        STRING
        PROPERTIES
          Name                #LedgerAccountIdOffset
          Label               #@Sys11162
          HelpText            #@SYS4451
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #LedgerAccount
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ApprovalStatus
        ENUM
        PROPERTIES
          Name                #ApprovalStatus
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #InventJourApprovalStatus
              #
            ENDARRAY
          EnumType            #ApprovalStatus
        ENDPROPERTIES
        
      FIELD #PurchId
        STRING
        PROPERTIES
          Name                #PurchId
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #PurchId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Notes
        STRING
        PROPERTIES
          Name                #Notes
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #NotesTxt
              #
            ENDARRAY
          StringSize          #80
        ENDPROPERTIES
        
      FIELD #AGR_SummaryDONum
        STRING
        PROPERTIES
          Name                #AGR_SummaryDONum
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #AGR_SummaryDONum
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #AGRPurchOriginId
        STRING
        PROPERTIES
          Name                #AGRPurchOriginId
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #PurchOriginId
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #AGRPurchInternalPackingSlipId
        STRING
        PROPERTIES
          Name                #AGRPurchInternalPackingSlipId
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #PurchInternalPackingSlipId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #AGR_DOReferenceType
        ENUM
        PROPERTIES
          Name                #AGR_DOReferenceType
          Table               #InventJournalTable
          EnumType            #AGR_DOReferenceType
        ENDPROPERTIES
        
      FIELD #ERL_ItemNum
        INT
        PROPERTIES
          Name                #ERL_ItemNum
          Table               #InventJournalTable
        ENDPROPERTIES
        
      FIELD #ERL_SummaryCOEId
        STRING
        PROPERTIES
          Name                #ERL_SummaryCOEId
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #ERL_SummaryRetId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ERL_SalesId
        STRING
        PROPERTIES
          Name                #ERL_SalesId
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #SalesId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #TCN_ConsOrderType
        ENUM
        PROPERTIES
          Name                #TCN_ConsOrderType
          Table               #InventJournalTable
          EnumType            #TCN_ConsOrderType
        ENDPROPERTIES
        
      FIELD #ERL_NRKonsinyasi
        STRING
        PROPERTIES
          Name                #ERL_NRKonsinyasi
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #ERL_NRKonsinyasi
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ERL_BarcodeId
        STRING
        PROPERTIES
          Name                #ERL_BarcodeId
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #ERL_BarcodeId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ERL_SummaryReturnId
        STRING
        PROPERTIES
          Name                #ERL_SummaryReturnId
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #ERL_SummaryReturnId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ERL_SalesUnitId
        STRING
        PROPERTIES
          Name                #ERL_SalesUnitId
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #smmSalesUnitId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ERL_SalesResponsible
        STRING
        PROPERTIES
          Name                #ERL_SalesResponsible
          Table               #InventJournalTable
          ExtendedDataType    
            ARRAY 
              #EmplId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #TCN_SOType
        ENUM
        PROPERTIES
          Name                #TCN_SOType
          Table               #InventJournalTable
          EnumType            #TCN_SOType
        ENDPROPERTIES
        
      FIELD #ERL_Printed
        ENUM
        PROPERTIES
          Name                #ERL_Printed
          Label               #Print Status
          Table               #InventJournalTable
          EnumType            #NoYes
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #JournalId
          #JournalType
          #JournalNameId
          #Description
          #NumOfLines
          #Posted
          #PostedDateTime
          #BlockUserId
          #SystemBlocked
          #Reservation
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Approval
        PROPERTIES
          Name                #Approval
          Label               #Approval status
        ENDPROPERTIES
        
        GROUPFIELDS
          #ApprovalStatus
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Blocking
        PROPERTIES
          Name                #Blocking
          Label               #@SYS50247
        ENDPROPERTIES
        
        GROUPFIELDS
          #BlockUserId
          #BlockUserGroupId
          #SystemBlocked
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Employee
        PROPERTIES
          Name                #Employee
          Label               #@SYS4705
        ENDPROPERTIES
        
        GROUPFIELDS
          #EmplId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #History
        PROPERTIES
          Name                #History
          Label               #@SYS10575
        ENDPROPERTIES
        
        GROUPFIELDS
          #Posted
          #PostedDateTime
          #PostedUserId
          #JournalIdOrignal
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@SYS5711
        ENDPROPERTIES
        
        GROUPFIELDS
          #JournalId
          #JournalType
          #JournalNameId
          #Description
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Inventory
        PROPERTIES
          Name                #Inventory
          Label               #@SYS981
        ENDPROPERTIES
        
        GROUPFIELDS
          #Reservation
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Notes
        PROPERTIES
          Name                #Notes
          Label               #Notes
        ENDPROPERTIES
        
        GROUPFIELDS
          #Notes
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Posting
        PROPERTIES
          Name                #Posting
          Label               #@SYS5943
        ENDPROPERTIES
        
        GROUPFIELDS
          #LedgerAccountIdOffset
          #DetailSummary
          #DeletePostedLines
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Purchase
        PROPERTIES
          Name                #Purchase
          Label               #Purchase
        ENDPROPERTIES
        
        GROUPFIELDS
          #PurchId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #System
        PROPERTIES
          Name                #System
          Label               #@SYS4278
        ENDPROPERTIES
        
        GROUPFIELDS
          #InventDimFixed
          #SessionLoginDateTime
          #SessionId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Totals
        PROPERTIES
          Name                #Totals
          Label               #@SYS8311
        ENDPROPERTIES
        
        GROUPFIELDS
          #NumOfLines
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Voucher
        PROPERTIES
          Name                #Voucher
          Label               #@SYS12371
        ENDPROPERTIES
        
        GROUPFIELDS
          #VoucherSeqId
          #VoucherDraw
          #VoucherChange
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #JournalIdx
      PROPERTIES
        Name                #JournalIdx
        AllowDuplicates     #No
      ENDPROPERTIES
      
      INDEXFIELDS
        #JournalId
      ENDINDEXFIELDS
      
      #PostedJouirnalIdx
      PROPERTIES
        Name                #PostedJouirnalIdx
        AllowDuplicates     #No
      ENDPROPERTIES
      
      INDEXFIELDS
        #Posted
        #JournalId
      ENDINDEXFIELDS
      
      #ERL_SalesIdIdx
      PROPERTIES
        Name                #ERL_SalesIdIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #JournalId
        #ERL_SalesId
        #TCN_ConsOrderType
      ENDINDEXFIELDS
      
      #ERL_ConsignmentIdx
      PROPERTIES
        Name                #ERL_ConsignmentIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #TCN_ConsOrderType
        #ERL_SalesId
      ENDINDEXFIELDS
      
      #JournalNameIdx
      PROPERTIES
        Name                #JournalNameIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #JournalNameId
      ENDINDEXFIELDS
      
      #AGR_SummaryDONumx
      PROPERTIES
        Name                #AGR_SummaryDONumx
      ENDPROPERTIES
      
      INDEXFIELDS
        #AGR_SummaryDONum
      ENDINDEXFIELDS
      
    ENDINDICES
    REFERENCES
      REFERENCE #JournalError
        PROPERTIES
          Name                #JournalError
          Table               #JournalError
          Validate            #No
          EntityRelationshipRole  #@SYS123820
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TableId
            RelatedField        #RefTableId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #JournalId
            RelatedField        #JournalId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #SalesTable
        PROPERTIES
          Name                #SalesTable
          Table               #SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #1
            Table               #SalesTable
            RelatedField        #TCN_SOType
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ERL_SalesId
            RelatedField        #SalesId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendPackingSlipJour
        PROPERTIES
          Name                #VendPackingSlipJour
          Table               #VendPackingSlipJour
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AGRPurchInternalPackingSlipId
            RelatedField        #InternalPackingSlipId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
      #InventJournalTrans_Tag
      PROPERTIES
        Table               #InventJournalTrans_Tag
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventJournalTrans
      PROPERTIES
        Table               #InventJournalTrans
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #JournalError
      PROPERTIES
        Table               #JournalError
        DeleteAction        #Cascade
      ENDPROPERTIES
      
    ENDDELETEACTIONS
    
    METHODS
      Version: 3
      SOURCE #checkSameToLocation
        #public boolean checkSameToLocation(AGR_SummaryDONum SDO, InventJournalId JournalId)
        #{
        #    boolean             ret = true;
        #    InventJournalTrans  JournalTrans;
        #    InventDim           InventDimReceipt;
        #    InventTransId       InventTransid;
        #    WMSLocationId       ToWmsLocationid;
        #    ;
        #
        #    while select AGR_SummaryDONum, AGR_InventTransId, ItemId, ToInventdimid from Journaltrans
        #        order by AGR_SummaryDONum, AGR_InventTransId, ItemId, ToInventdimid
        #        where JournalTrans.AGR_SummaryDONum == SDO
        #        Join wMSLocationId from InventDimReceipt
        #            where InventDimReceipt.inventDimId  == JournalTrans.ToInventDimId
        #    {
        #        if(JournalTrans.AGR_InventTransId == InventTransid)
        #        {
        #            if(ToWmsLocationid && InventDimReceipt.wMSLocationId != ToWmsLocationid)
        #            {
        #                if(JournalTrans.JournalId != JournalId)
        #                    ret = checkfailed(strfmt("To Location Item %1 for Journal %2 is different with %3. To Location for same Lot Id from same order number must be same.",
        #                                     Journaltrans.ItemId, JournalId, JournalTrans.JournalId));
        #                else
        #                    ret = checkfailed(strfmt("To Location Item %1 in Journal %2 is different. To Location for same Lot Id from same order number must be same.",
        #                                     Journaltrans.ItemId, JournalId));
        #                break;
        #            }
        #        }
        #
        #        InventTransid   = Journaltrans.AGR_InventTransId;
        #        ToWmsLocationid = InventDimReceipt.wMSLocationId;
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #delete
        #public void delete()
        #{
        #    SalesTable  sTable = this.salesTable(true);
        #    ERL_SRO     sro;
        #
        #    super();
        #
        #    // naski add 12/19/2017 - konsinyasi baru : update status consignment cso ketika
        #    if(sTable && this.ERL_SalesId && (this.TCN_ConsOrderType == TCN_ConsOrderType::Order)){
        #        ttsbegin;
        #        sTable.TCN_ConsignmentStatus = 0;
        #        sTable.update();
        #        ttscommit;
        #    }
        #
        #    // naski add 1/25/2018 - updating transfer flag on summary return
        #    while select forupdate sro where sro.JournalId == this.JournalId {
        #        ttsbegin;
        #        sro.JournalId = "";
        #        sro.update();
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #InitFromInventJournalName
        #void initFromInventJournalName(InventJournalName inventJournalName)
        #{
        #    ;
        #    JournalTableData::newTable(this).initFromJournalName(inventJournalName);
        #}
        #
      ENDSOURCE
      SOURCE #initValue
        #public void initValue()
        #{
        #    super();
        #
        #    this.Reservation = ItemReservation::Automatic;
        #}
      ENDSOURCE
      SOURCE #insert
        #void insert()
        #{
        #    ttsbegin;
        #
        #    if (!this.JournalId)
        #        this.JournalId = JournalTableData::newTable(this).nextJournalId();
        #
        #    super();
        #
        #    ttscommit;
        #}
        #
      ENDSOURCE
      SOURCE #inventJournalName
        #InventJournalName   inventJournalName()
        #{
        #    return InventJournalName::find(this.JournalNameId);
        #
        #}
        #
      ENDSOURCE
      SOURCE #salesTable
        #// naski add 12/19/2017 - konsinyasi baru
        #SalesTable salesTable(boolean _forupdate)
        #{
        #    SalesTable sTable;
        #    ;
        #    sTable = SalesTable::find(this.ERL_SalesId,_forupdate);
        #
        #    return sTable;
        #}
      ENDSOURCE
      SOURCE #transDate
        #Display JournalTransDate transDate()
        #{
        #    JournalTransDate    ret;
        #    InventJournalTrans  ijTrans;
        #    ;
        #    select minof(transDate) from ijTrans where ijTrans.JournalId == this.JournalId;
        #    ret = ijTrans.TransDate;
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #ValidateWrite
        #boolean validateWrite(JournalTableData  _journalTableData = JournalTableData::newTable(this))
        #{
        #    boolean ret = true;
        #
        #    ret = _journalTableData.validateWritePre(ret);
        #
        #    if (!this.VoucherSeqId && this.voucherSeqIdMandatory())
        #        ret = checkFailed(strfmt("@SYS26332", new DictField(this.TableId, fieldnum(InventJournalTable, VoucherSeqId)).label()));
        #
        #    ret = super() && ret;
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #voucherSeqIdMandatory
        #boolean voucherSeqIdMandatory()
        #{
        #    if (this.JournalType == InventJournalType::TagCounting)
        #        return false;
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkExist
        #static boolean checkExist(InventJournalId inventJournalId)
        #{
        #    if (inventJournalId && !InventJournalTable::exist(inventJournalId))
        #        return checkFailed(strfmt(InventJournalTable::txtNotExist(),inventJournalId));
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #exist
        #static boolean exist(InventJournalId inventJournalId)
        #{
        #    return inventJournalId && (select firstonly inventJournalTable
        #                index hint JournalIdx
        #                where inventJournalTable.JournalId == inventJournalId
        #           ).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #find
        #static InventJournalTable find(InventJournalId inventJournalId, boolean _forUpdate = false)
        #{
        #    InventJournalTable inventJournalTable;
        #    ;
        #    inventJournalTable.selectForUpdate(_forUpdate);
        #
        #    if (inventJournalId)
        #        select firstonly inventJournalTable
        #            index hint JournalIdx
        #            where inventJournalTable.JournalId == inventJournalId;
        #
        #    return inventJournalTable;
        #}
      ENDSOURCE
      SOURCE #findbySalesId
        #// naski add 12/19/2017 - konsinyasi baru
        #static InventJournalTable findbySalesId(SalesId     _salesId,
        #                                TCN_ConsOrderType   _consOrderType = TCN_ConsOrderType::Order,
        #                                boolean             _forUpdate = false)
        #{
        #
        #    InventJournalTable      inventJournalTable;
        #    ;
        #
        #    inventJournalTable.selectForUpdate(_forUpdate);
        #
        #    if (_salesId)
        #    {
        #        select firstonly inventJournalTable
        #            index hint ERL_ConsignmentIdx
        #            where
        #                inventJournalTable.ERL_SalesId == _salesId &&
        #                inventJournalTable.TCN_ConsOrderType == _consOrderType
        #            ;
        #    }
        #
        #    return inventJournalTable;
        #}
      ENDSOURCE
      SOURCE #initTotal
        #server static void initTotal(InventJournalTable _inventJournalTable)
        #{
        #    InventJournalTrans      inventJournalTrans;
        #    InventJournalTrans_Tag  inventJournalTrans_Tag;
        #    ;
        #    switch(_inventJournalTable.JournalType)
        #    {
        #        case InventJournalType::Movement:
        #        case InventJournalType::LossProfit:
        #        case InventJournalType::Transfer:
        #        case InventJournalType::BOM:
        #        case InventJournalType::Count:
        #        case InventJournalType::project:
        #            select count(RecId) from inventJournalTrans
        #                where inventJournalTrans.JournalId == _inventJournalTable.JournalId;
        #
        #            _inventJournalTable.NumOfLines     = any2int(inventJournalTrans.RecId);
        #            break;
        #        case InventJournalType::TagCounting:
        #            select count(RecId) from inventJournalTrans_Tag
        #                where inventJournalTrans_Tag.JournalId == _inventJournalTable.JournalId;
        #
        #            _inventJournalTable.NumOfLines     = any2int(inventJournalTrans_Tag.RecId);
        #            break;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #journalId2inventDimParm
        #static InventDimParm journalId2inventDimParm(InventJournalId inventJournalId)
        #{
        #    InventDimParm inventDimParm;
        #    ;
        #    InventDimFixedClass::inventDimFixed2InventDimParm(InventJournalTable::find(inventJournalId).InventDimFixed,inventDimParm);
        #    return inventDimParm;
        #}
      ENDSOURCE
      SOURCE #name
        #static Name name(InventJournalId inventJournalId)
        #{
        #    return InventJournalTable::find(inventJournalId).Description;
        #}
      ENDSOURCE
      SOURCE #txtNotExist
        #static TxtNotExist txtNotExist()
        #{
        #    return "@SYS17145";
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : InventItemLocation unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #InventItemLocation
    PROPERTIES
      Name                #InventItemLocation
      Label               #@SYS53618
      TitleField1         #ItemId
      TitleField2         #inventDimId
      ConfigurationKey    #LogisticsBasic
      SecurityKey         #InventTables
      CacheLookup         #NotInTTS
      TableGroup          #Main
      PrimaryIndex        #ItemDimIdx
      ClusterIndex        #ItemDimIdx
      DeveloperDocumentation  #@SYS123891
    ENDPROPERTIES
    
    FIELDS
      FIELD #ItemId
        STRING
        PROPERTIES
          Name                #ItemId
          Mandatory           #Yes
          AllowEdit           #No
          Table               #InventItemLocation
          ExtendedDataType    
            ARRAY 
              #ItemId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #CountGroupId
        STRING
        PROPERTIES
          Name                #CountGroupId
          Table               #InventItemLocation
          ExtendedDataType    
            ARRAY 
              #CountGroupId
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #wMSStoreZoneId
        STRING
        PROPERTIES
          Name                #wMSStoreZoneId
          Table               #InventItemLocation
          ExtendedDataType    
            ARRAY 
              #WMSStoreZoneId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #wMSPickingLocation
        STRING
        PROPERTIES
          Name                #wMSPickingLocation
          Table               #InventItemLocation
          ExtendedDataType    
            ARRAY 
              #WMSPickingLocation
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #CountingStarted
        ENUM
        PROPERTIES
          Name                #CountingStarted
          Table               #InventItemLocation
          ExtendedDataType    
            ARRAY 
              #InventCountingStarted
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #CountingJournalId
        STRING
        PROPERTIES
          Name                #CountingJournalId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventItemLocation
          ExtendedDataType    
            ARRAY 
              #InventJournalId_Counting
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #WMSLocationIdDefaultIssue
        STRING
        PROPERTIES
          Name                #WMSLocationIdDefaultIssue
          Table               #InventItemLocation
          ExtendedDataType    
            ARRAY 
              #WMSLocationIdDefaultIssue
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #WMSLocationIdDefaultReceipt
        STRING
        PROPERTIES
          Name                #WMSLocationIdDefaultReceipt
          Table               #InventItemLocation
          ExtendedDataType    
            ARRAY 
              #WMSLocationIdDefaultReceipt
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #inventDimId
        STRING
        PROPERTIES
          Name                #inventDimId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventItemLocation
          ExtendedDataType    
            ARRAY 
              #InventDimId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #useWMSOrder
        ENUM
        PROPERTIES
          Name                #useWMSOrder
          Table               #InventItemLocation
          EnumType            #InventInventLocationNoYes
        ENDPROPERTIES
        
      FIELD #pickingLocationRefillMin
        REAL
        PROPERTIES
          Name                #pickingLocationRefillMin
          ConfigurationKey    #WMSAdvanced
          Table               #InventItemLocation
          ExtendedDataType    
            ARRAY 
              #WMSPickingLocationRefillMin
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #PickingLocationMaxQty
        REAL
        PROPERTIES
          Name                #PickingLocationMaxQty
          Table               #InventItemLocation
          ExtendedDataType    
            ARRAY 
              #WMSMaxStorageQuantity
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #useEmptyPalletLocation
        ENUM
        PROPERTIES
          Name                #useEmptyPalletLocation
          Table               #InventItemLocation
          EnumType            #InventInventLocationNo
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemId
          #CountGroupId
          #wMSStoreZoneId
          #wMSPickingLocation
          #WMSLocationIdDefaultReceipt
          #WMSLocationIdDefaultIssue
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Counting
        PROPERTIES
          Name                #Counting
          Label               #@SYS2828
        ENDPROPERTIES
        
        GROUPFIELDS
          #CountGroupId
          #CountingStarted
          #CountingJournalId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@SYS5711
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PickingLocation
        PROPERTIES
          Name                #PickingLocation
          Label               #@SYS110125
        ENDPROPERTIES
        
        GROUPFIELDS
          #wMSPickingLocation
          #pickingLocationRefillMin
          #PickingLocationMaxQty
          #useEmptyPalletLocation
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #System
        PROPERTIES
          Name                #System
          Label               #@SYS4278
        ENDPROPERTIES
        
        GROUPFIELDS
          #inventDimId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #WarehouseManagement
        PROPERTIES
          Name                #WarehouseManagement
          Label               #@SYS50169
        ENDPROPERTIES
        
        GROUPFIELDS
          #wMSStoreZoneId
          #WMSLocationIdDefaultReceipt
          #WMSLocationIdDefaultIssue
          #useWMSOrder
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #wMSPickIdx
      PROPERTIES
        Name                #wMSPickIdx
        ConfigurationKey    #WMSBasic
      ENDPROPERTIES
      
      INDEXFIELDS
        #wMSPickingLocation
      ENDINDEXFIELDS
      
      #ItemDimIdx
      PROPERTIES
        Name                #ItemDimIdx
        AllowDuplicates     #No
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemId
        #inventDimId
      ENDINDEXFIELDS
      
    ENDINDICES
    REFERENCES
      REFERENCE #InventItemLocation
        PROPERTIES
          Name                #InventItemLocation
          Table               #InventItemLocation
          EntityRelationshipRole  #@SYS123892
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #inventDimId
            RelatedField        #inventDimId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemId
            RelatedField        #ItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventTable
        PROPERTIES
          Name                #InventTable
          Table               #InventTable
          EntityRelationshipRole  #@SYS123828
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemId
            RelatedField        #ItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #WMSLocationIdDefaultIssue
        PROPERTIES
          Name                #WMSLocationIdDefaultIssue
          Table               #WMSLocation
          EntityRelationshipRole  #@SYS123832
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #WMSLocationIdDefaultIssue
            RelatedField        #wMSLocationId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #WMSLocationIdDefaultReceipt
        PROPERTIES
          Name                #WMSLocationIdDefaultReceipt
          Table               #WMSLocation
          EntityRelationshipRole  #@SYS123833
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #WMSLocationIdDefaultReceipt
            RelatedField        #wMSLocationId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #WMSPickingLocation
        PROPERTIES
          Name                #WMSPickingLocation
          Table               #WMSLocation
          EntityRelationshipRole  #@SYS123893
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #1
            Table               #WMSLocation
            RelatedField        #locationType
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #wMSPickingLocation
            RelatedField        #wMSLocationId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      Version: 3
      SOURCE #checkDim
        #boolean checkDim(InventDim inventDim, boolean errorIfNotValid = true)
        #{
        #    InventDimSearch     _dimSearch  = new InventDimSearch();
        #    InventTable         inventTable = InventTable::find(this.ItemId);
        #    InventDimGroupId    dimGroupId  = inventTable.DimGroupId;
        #    boolean             ok = true;
        #    Integer             x;
        #    InventDim           inventDimTemp;
        #    Integer             itemDimActive;
        #    Integer             itemDimFilled;
        #    ;
        #    inventDimTemp.data(inventDim.data());
        #    inventDimTemp.InventLocationId = '';
        #
        #    if (_dimSearch.first(dimGroupId))
        #    do
        #    {
        #        x = _dimSearch.dimFieldId();
        #
        #        if (_dimSearch.dimActive())
        #        {
        #            if (_dimSearch.dimItemDimension())
        #                itemDimActive++;
        #
        #            if (_dimSearch.dimItemDimension() && inventDim.(x))
        #                itemDimFilled++;
        #
        #            if (inventDimTemp.(x) && !_dimSearch.dimItemDimension())
        #            {
        #                ok = false;
        #                if (errorIfNotValid)
        #                    checkFailed(strfmt("@SYS71543",fieldid2pname(tablenum(InventDim), x)));
        #            }
        #        }
        #    } while (_dimSearch.next(dimGroupId));
        #
        #    if (itemDimActive != itemDimFilled && itemDimFilled > 0)
        #        if (errorIfNotValid)
        #            ok = checkFailed(strfmt("@SYS74585"));
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #initFromInventTable
        #void initFromInventTable( InventTable inventTable)
        #{
        #    InventItemLocation  existingDefault;
        #    ;
        #    this.ItemId             = inventTable.ItemId;
        #    existingDefault = InventItemLocation::findDefault(this.ItemId);
        #    if (existingDefault)
        #    {
        #        this.CountGroupId       = existingDefault.CountGroupId;
        #        this.wmsStoreZoneId     = existingDefault.wmsStoreZoneId;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #initValue
        #void initValue()
        #{
        #    ;
        #    super();
        #
        #    if (this.ItemId)
        #    {
        #        this.initFromInventTable(InventTable::find(this.ItemId));
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #inventDim
        #InventDim inventDim()
        #{
        #    return InventDim::find(this.InventDimId);
        #}
      ENDSOURCE
      SOURCE #inventLocationID
        #InventLocationId inventLocationID()
        #{
        #    return this.inventDim().InventLocationId;
        #}
      ENDSOURCE
      SOURCE #inventTable
        #InventTable inventTable(boolean _forupdate = false)
        #{
        #    return InventTable::find(this.ItemId,_forupdate);
        #}
      ENDSOURCE
      SOURCE #modifiedField
        #public void modifiedField(fieldId _fieldId)
        #{
        #    super(_fieldId);
        #
        #    switch (_fieldId)
        #    {
        #        case fieldnum(InventItemLocation,wmsPickingLocation)    : if (!this.wmsPickingLocation)
        #                                                                    this.UseEmptyPalletLocation = InventInventLocationNo::InventLocation;
        #                                                                    break;
        #    }
        #}
      ENDSOURCE
      SOURCE #update
        #void update()
        #{
        #    if (! this.CountingStarted)
        #        this.CountingJournalId = '';
        #
        #    super();
        #
        #}
      ENDSOURCE
      SOURCE #useEmptyPalletLocation
        #/// <summary>
        #/// Used to determine if a pallet should be attempted to be moved to the location for empty pallets.
        #/// </summary>
        #/// <param name="_wmsLocationId">
        #/// WMSLocation where pallet is at.
        #/// </param>
        #/// <returns>
        #/// Return NoYes::Yes if the InventLocations settings for empty pallets should be used.
        #/// </returns>
        #NoYes useEmptyPalletLocation(WMSLocationId _wmsLocationId)
        #{
        #    ;
        #    if (!this.wmsPickingLocation)
        #        return NoYes::Yes;
        #
        #    if (this.wmsPickingLocation != _wmsLocationId)
        #        return NoYes::Yes;
        #
        #    return (this.UseEmptyPalletLocation == InventInventLocationNo::InventLocation);
        #}
      ENDSOURCE
      SOURCE #useWMSOrder
        #NoYes useWMSOrder(InventDim inventDim)
        #{
        #    ;
        #    switch(this.UseWMSOrder)
        #    {
        #        case InventInventLocationNoYes::InventLocation:
        #            if (inventDim.InventLocationId)
        #                return inventDim.inventLocation().useWMSOrder(this.ItemId);
        #            break;
        #        case InventInventLocationNoYes::No:
        #            return NoYes::No;
        #        case InventInventLocationNoYes::Yes:
        #            return NoYes::Yes;
        #    }
        #    return this.inventTable().inventModelGroup().MandatoryWMSOrder;
        #}
      ENDSOURCE
      SOURCE #validateDelete
        #public boolean validateDelete()
        #{
        #    boolean ret;
        #    InventDim   inventDimBlank = InventDim::find(InventDim::inventDimIdBlank());
        #
        #    ret = super();
        #
        #    if (this.RecId && InventDim::isInventDimEqual(this.inventDim(),  inventDimBlank))
        #        ret = ret && checkFailed("@SYS55206");
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #ValidateWrite
        #server boolean validateWrite(InventTable _inventTable = null)
        #{
        #    boolean         ret             = true;
        #    WMSLocation     wmsLocation;
        #    InventDimSetup  inventDimSetup  = InventDimSetup::find(this.inventTable().DimGroupId, fieldnum(InventDim, wmsLocationId));
        #    InventDim       inventDim       = this.inventDim();
        #    ;
        #
        #    ret = this.checkDim(inventDim);
        #
        #    if (inventDim.ConfigId)
        #        ret = ret && InventTable::checkConfig(this.ItemId,inventDim.ConfigId);
        #
        #    if (inventDim.InventSizeId)
        #        ret = ret && InventTable::checkSize(this.ItemId,inventDim.InventSizeId);
        #
        #    if (inventDim.InventColorId)
        #        ret = ret && InventTable::checkColor(this.ItemId,inventDim.InventColorId);
        #
        #    ret = ret && inventDim.validateWriteItemDimCombination(this.ItemId);
        #
        #    if (this.wmsPickingLocation)
        #    {
        #        wmsLocation = WMSLocation::find(this.wmsPickingLocation, inventDim.InventLocationId);
        #        if (!wmsLocation || wmsLocation.LocationType != WMSLocationType::Pick)
        #            ret = checkFailed(strfmt("@SYS50638", this.wmsPickingLocation));
        #    }
        #
        #    if (!this.wmsPickingLocation && this.UseEmptyPalletLocation == InventInventLocationNo::No)
        #        ret = checkFailed("@SYS114175");
        #
        #    if (inventDim.InventLocationId && this.wmsStoreZoneId)
        #    {
        #        if (!this.wmsStoreZone().hasLocations(inventDim.InventLocationId))
        #            info(strfmt("@SYS54208", this.wmsStoreZoneId, inventDim.InventLocationId));
        #    }
        #
        #    if (this.wmsLocationIdDefaultReceipt)
        #    {
        #        if (inventDimSetup.Active && inventDimSetup.AllowBlankReceipt)
        #            info("@SYS63216");
        #    }
        #
        #    if (this.wmsLocationIdDefaultIssue)
        #    {
        #        if (inventDimSetup.Active && inventDimSetup.AllowBlankIssue)
        #            info("@SYS63217");
        #    }
        #
        #    ret = super() && ret;
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #wMSPickingLocation
        #WMSLocation wmsPickingLocation(boolean _update = false)
        #{
        #    return WMSLocation::find(this.wmsPickingLocation, this.inventDim().InventLocationId, _update);
        #}
      ENDSOURCE
      SOURCE #wMSStoreZone
        #WMSStoreZone wmsStoreZone(boolean _forUpdate = false)
        #{
        #    return WMSStoreZone::find(this.wmsStoreZoneId ,_forUpdate);
        #}
      ENDSOURCE
      SOURCE #exist
        #static boolean exist(ItemId             itemId,
        #                     InventDimId        inventDimId)
        #{
        #    ;
        #    return itemId && (select firstonly RecId from inventItemLocation
        #                index hint ItemDimIdx
        #                where inventItemLocation.ItemId              == itemId    &&
        #                      inventItemLocation.InventDimId         == inventDimId
        #           ).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #find
        #static InventItemLocation find(ItemId               _itemId,
        #                               InventDimId          _inventDimId,
        #                               CountGroupId         _countGroupId = '',//if specified selection will be constrained based on this,but if blank it will not be taken into consideration
        #                               boolean              _forUpdate = false)
        #{
        #    InventItemLocation  inventItemLocation;
        #    InventItemLocation  inventItemLocationNull;
        #    InventDimId         inventDimId = _inventDimId;
        #    InventDim           inventDim;
        #    InventDim           inventDimFind;
        #    InventTable         inventTable;
        #
        #void findInventItemLocation()
        #{
        #    select firstonly inventItemLocation
        #        index hint ItemDimIdx
        #        where inventItemLocation.ItemId              == _itemId    &&
        #              inventItemLocation.InventDimId         == inventDimId&&
        #              (!_countGroupId || inventItemLocation.CountGroupId == _countGroupId);
        #}
        #    ;
        #
        #    if (!_inventDimId)
        #        throw(error(strfmt("@SYS23264", funcname())));
        #
        #
        #    inventItemLocation.selectForUpdate(_forUpdate);
        #
        #    if (!_itemId)
        #        return inventItemLocationNull;
        #
        #    inventDimId = _inventDimId;
        #
        #    findInventItemLocation();       // Try to find record with passed InventDimId
        #
        #    if (inventItemLocation.RecId)
        #        return inventItemLocation;
        #
        #    inventDim           = InventDim::find(inventDimId);
        #    inventTable         = InventTable::find(_itemId);
        #
        #    if (InventDim::hasItemDimActive(inventTable.DimGroupId))
        #    {
        #        inventDimFind.copyItemDim(inventTable.DimGroupId, inventDim);
        #        inventDimFind.InventLocationId = inventDim.InventLocationId;
        #
        #        if (inventDimFind.InventLocationId)
        #        {
        #            inventDimId = InventDim::findDim(inventDimFind).InventDimId;
        #
        #            if (inventDimId && _inventDimId != inventDimId)
        #            {
        #                findInventItemLocation();   // Try to find record with InventDimId with only Item Dimensions and InventLocationId
        #                if (inventItemLocation.RecId)
        #                    return inventItemLocation;
        #            }
        #        }
        #
        #        inventDimFind.InventLocationId = '';
        #        inventDimId = InventDim::findDim(inventDimFind).InventDimId;
        #        if (inventDimId && _inventDimId != inventDimId)
        #        {
        #            findInventItemLocation();   // Try to find record with InventDimId with only Item Dimensions
        #            if (inventItemLocation.RecId)
        #                return inventItemLocation;
        #        }
        #    }
        #    if (inventDim.InventLocationId)
        #    {
        #        inventDimFind.clear();
        #        inventDimFind.InventLocationId = inventDim.InventLocationId;
        #        inventDimId = InventDim::findDim(inventDimFind).InventDimId;
        #        if (inventDimId && _inventDimId != inventDimId)
        #        {
        #            findInventItemLocation();   // Try to find record with InventDimId with only InventLocationId
        #            if (inventItemLocation.RecId)
        #                return inventItemLocation;
        #        }
        #    }
        #
        #    inventDimId = InventDim::inventDimIdBlank();
        #    if (inventDimId && _inventDimId != inventDimId)
        #    {
        #        findInventItemLocation();       // Try to find record with InventDimId with no Dimensions
        #        if (inventItemLocation.RecId)
        #            return inventItemLocation;
        #    }
        #    return inventItemLocationNull;
        #}
      ENDSOURCE
      SOURCE #findDefault
        #static InventItemLocation findDefault(ItemId               itemId,
        #                                      boolean              _forUpdate = false)
        #{
        #    return InventItemLocation::find(itemId, InventDim::inventDimIdBlank(),'', _forUpdate);
        #}
        #
      ENDSOURCE
      SOURCE #findFixedWarehouse
        #static InventItemLocation findFixedWarehouse(   ItemId               _itemId,
        #                                                InventDimId          _inventDimId,
        #                                                boolean              _forUpdate = false)
        #{
        #    InventItemLocation  inventItemLocation;
        #    InventItemLocation  inventItemLocationNull;
        #    InventDimId         inventDimId = _inventDimId;
        #    InventDimId         inventDimIdItemDim;
        #    InventDim           inventDim;
        #    InventDim           inventDimFind;
        #    InventTable         inventTable;
        #
        #void findInventItemLocation()
        #{
        #    select firstonly inventItemLocation
        #        index hint ItemDimIdx
        #        where inventItemLocation.ItemId              == _itemId    &&
        #              inventItemLocation.InventDimId         == inventDimId;
        #}
        #    ;
        #
        #    if (!_inventDimId)
        #        throw(error(strfmt("@SYS23264", funcname())));
        #
        #
        #    inventItemLocation.selectForUpdate(_forUpdate);
        #
        #    if (!_itemId)
        #        return inventItemLocationNull;
        #
        #    inventDimId = _inventDimId;
        #
        #    findInventItemLocation();       // Try to find record with passed InventDimId
        #
        #    if (inventItemLocation.RecId)
        #        return inventItemLocation;
        #
        #    inventDim           = InventDim::find(inventDimId);
        #    if (!inventDim.InventLocationId)
        #        return inventItemLocationNull; // If inventLocationId hasn't been specified this method is used incorrectly and no record should be returned.
        #
        #    if (inventDim.InventSiteId)
        #    {
        #        inventDim.InventSiteId = ''; // Site is not used for finding inventItemLocation, so do not search with site
        #        inventDimId = InventDim::findDim(inventDim).InventDimId;
        #
        #        findInventItemLocation();   // Try to find record with InventDimId with only Item Dimensions and InventLocationId
        #        if (inventItemLocation.RecId)
        #            return inventItemLocation;
        #    }
        #
        #    inventTable         = InventTable::find(_itemId);
        #
        #    if (InventDim::hasItemDimActive(inventTable.DimGroupId))
        #    {
        #        inventDimFind.copyItemDim(inventTable.DimGroupId, inventDim);
        #        inventDimFind.InventLocationId = inventDim.InventLocationId;
        #
        #        inventDimId = InventDim::findDim(inventDimFind).InventDimId;
        #
        #        if (inventDimId && _inventDimId != inventDimId)
        #        {
        #            inventDimIdItemDim = inventDimId;
        #            findInventItemLocation();   // Try to find record with InventDimId with only Item Dimensions and InventLocationId
        #            if (inventItemLocation.RecId)
        #                return inventItemLocation;
        #        }
        #    }
        #
        #    inventDimFind.clear();
        #    inventDimFind.InventLocationId = inventDim.InventLocationId;
        #    inventDimId = InventDim::findDim(inventDimFind).InventDimId;
        #    if (inventDimId && _inventDimId != inventDimId && inventDimId != inventDimIdItemDim)
        #    {
        #        findInventItemLocation();   // Try to find record with InventDimId with only InventLocationId
        #        if (inventItemLocation.RecId)
        #            return inventItemLocation;
        #    }
        #
        #    return inventItemLocationNull;
        #}
      ENDSOURCE
      SOURCE #isCountingStarted
        #static server boolean isCountingStarted(
        #    ItemId                  itemId,
        #    InventDim               inventDim,
        #    InventJournalId         inventJournalId = ''    // if specified, return true if started by other journal else false
        #)
        #{
        #    InventItemLocation  inventItemLocation;
        #    ;
        #    if (!inventDim.InventDimId)
        #        inventDim = InventDim::findOrCreate(inventDim);
        #    inventItemLocation = InventItemLocation::find(itemId, inventDim.InventDimId);
        #
        #
        #    if (!inventItemLocation.RecId || !inventItemLocation.CountingStarted)
        #        return false;
        #    if (prmisdefault(inventJournalId))
        #        return true;
        #    return (inventItemLocation.CountingJournalId != inventJournalId);
        #}
      ENDSOURCE
      SOURCE #updateStartCounting
        #static server void updateStartCounting(
        #    ItemId                  itemId,
        #    InventDim               inventDim,
        #    InventJournalId         inventJournalId
        #)
        #{
        #    InventItemLocation  inventItemLocation;
        #    ;
        #    if (!inventDim.InventDimId)
        #        inventDim = InventDim::findOrCreate(inventDim);
        #
        #    inventItemLocation = InventItemLocation::find(itemId, inventDim.InventDimId,'',true);
        #
        #    if (inventItemLocation.RecId && !inventItemLocation.CountingStarted)
        #    {
        #        inventItemLocation.CountingStarted      = NoYes::Yes;
        #        inventItemLocation.CountingJournalId    = inventJournalId;
        #        inventItemLocation.update();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #updateStopCounting
        #static server void updateStopCounting(
        #    ItemId                  itemId,
        #    InventDim               inventDim
        #)
        #{
        #    InventItemLocation  inventItemLocation;
        #    ;
        #    if (!inventDim.InventDimId)
        #        inventDim = InventDim::findOrCreate(inventDim);
        #
        #    inventItemLocation = InventItemLocation::find(itemId, inventDim.InventDimId,'',true);
        #
        #    if (inventItemLocation.RecId && inventItemLocation.CountingStarted)
        #    {
        #        inventItemLocation.CountingStarted      = NoYes::No;
        #        inventItemLocation.CountingJournalId    = '';
        #        inventItemLocation.update();
        #    }
        #}
      ENDSOURCE
      SOURCE #updateStopCountingJournal
        #static server void updateStopCountingJournal(InventJournalTrans inventJournalTrans, boolean always = false)
        #{
        #    InventDim           inventDim           = inventJournalTrans.inventDim();
        #    InventItemLocation  inventItemLocation  = InventItemLocation::find(inventJournalTrans.ItemId, inventDim.InventDimId,'',true);
        #    boolean             doStop              = true;
        #    InventJournalTrans  otherTrans;
        #    InventItemLocation  otherInventItemLocation;
        #    ;
        #    if (inventItemLocation.RecId && inventItemLocation.CountingStarted && inventItemLocation.CountingJournalId == inventJournalTrans.JournalId)
        #    {
        #        if (!always)
        #        {
        #            while select otherTrans
        #                where otherTrans.JournalId      == inventJournalTrans.JournalId     &&
        #                      otherTrans.ItemId         == inventJournalTrans.ItemId        &&
        #                      otherTrans.RecId          != inventJournalTrans.RecId
        #            {
        #                otherInventItemLocation  = InventItemLocation::find(inventJournalTrans.ItemId, otherTrans.InventDimId);
        #                if (otherInventItemLocation.RecId == inventItemLocation.RecId)
        #                {
        #                    doStop = false;
        #                    break;
        #                }
        #            }
        #        }
        #
        #        if (doStop)
        #        {
        #            inventItemLocation.CountingStarted      = NoYes::No;
        #            inventItemLocation.CountingJournalId    = '';
        #            inventItemLocation.update();
        #        }
        #    }
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 5

FORM #InventItemLocation
  PROPERTIES
    Name                #InventItemLocation
  ENDPROPERTIES
  
  METHODS
    Version: 3
    SOURCE #ClassDeclaration
      #class FormRun extends ObjectRun
      #{
      #    InventDimCtrl_Frm   inventDimFormSetup;
      #}
    ENDSOURCE
    SOURCE #enableUseEmptyPalletLocation
      #void enableUseEmptyPalletLocation()
      #{
      #    ;
      #    inventItemLocation_ds.object(fieldnum(InventItemLocation, UseEmptyPalletLocation)).allowEdit(inventDim.InventLocationId && inventItemLocation.wmsPickingLocation);
      #}
    ENDSOURCE
    SOURCE #setWMSLocationIdEnabled
      #void setWMSLocationIdEnabled(InventDimGroupId inventDimGroupId)
      #{
      #    NoYes                   locationActive;
      #    InventDimSearch         dimSearch = inventDimFormSetup.dimSearch();
      #    ;
      #    dimSearch.find(inventDimGroupId, fieldnum(InventDim, wmsLocationId));
      #    locationActive = dimSearch.dimActive();
      #
      #    if (!inventDim.InventLocationId)
      #        locationActive = false;
      #
      #    inventItemLocation_ds.object(fieldnum(InventItemLocation, wmsPickingLocation)).allowEdit(locationActive);
      #    inventItemLocation_ds.object(fieldnum(InventItemLocation, wmsLocationIdDefaultIssue)).allowEdit(locationActive);
      #    inventItemLocation_ds.object(fieldnum(InventItemLocation, wmsLocationIdDefaultReceipt)).allowEdit(locationActive);
      #
      #}
    ENDSOURCE
    SOURCE #Init
      #void init()
      #{
      #
      #    super();
      #
      #    element.updateDesign(InventDimFormDesignUpdate::Init);
      #
      #    if (element.args().caller() && element.args().dataset() && fieldname2id(element.args().dataset(),fieldstr(InventTable,ItemId)))
      #    {
      #        inventItemLocation_ItemId.visible(false);
      #    }
      #
      #
      #}
    ENDSOURCE
    SOURCE #updateDesign
      #void updateDesign(InventDimFormDesignUpdate mode)
      #{
      #    InventTable     inventTable;
      #    InventDimParm   inventDimParmGrid;
      #    InventDimParm   inventDimParmEnabled;
      #    ;
      #    switch (mode)
      #    {
      #        case InventDimFormDesignUpdate::Init           :
      #            if (!inventDimFormSetup)
      #                inventDimFormSetup  = InventDimCtrl::newFromForm(element);
      #
      #            inventDimFormSetup.parmSkipOnHandLookUp(true);
      #            inventDimParmGrid.initItemDimAllGrp();
      #            inventDimParmGrid.InventLocationIdFlag = NoYes::Yes;
      #            inventDimFormSetup.parmDimParmVisibleGrid(inventDimParmGrid);
      #            // do continue
      #        case InventDimFormDesignUpdate::Active         :
      #            inventTable = InventTable::find(inventItemLocation.ItemId);
      #            inventDimFormSetup.formActiveSetup(inventTable.DimGroupId);
      #            inventDimParmEnabled.initItemDimension(inventTable.DimGroupId);
      #            inventDimParmEnabled.InventLocationIdFlag = NoYes::Yes;
      #            inventDimFormSetup.parmDimParmEnabled(inventDimParmEnabled);
      #            inventDimFormSetup.formSetControls(true);
      #            element.setWMSLocationIdEnabled(inventTable.DimGroupId);
      #            inventDim_ds.allowEdit(inventItemLocation.RecId == 0);
      #            break;
      #
      #        case InventDimFormDesignUpdate::FieldChange    :
      #            inventTable = InventTable::find(inventItemLocation.ItemId);
      #            inventDimFormSetup.formActiveSetup(inventTable.DimGroupId);
      #            inventDim.clearNotSelectedDim(inventDimFormSetup.parmDimParmEnabled());
      #            element.setWMSLocationIdEnabled(inventTable.DimGroupId);
      #            inventDimFormSetup.formSetControls(true);
      #            break;
      #
      #        default : throw error(strfmt("@SYS54195",funcname()));
      #    }
      #    element.enableUseEmptyPalletLocation();
      #}
      #
    ENDSOURCE
    SOURCE #inventDimSetupObject
      #Object inventDimSetupObject()
      #{
      #    return inventDimFormSetup;
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #InventItemLocation
          Table               #InventItemLocation
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD wMSPickingLocation
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              Version: 3
              SOURCE #modified
                #public void modified()
                #{
                #    super();
                #
                #    element.enableUseEmptyPalletLocation();
                #}
              ENDSOURCE
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    ;
                #        WMSLocation::lookupLocationIdType(_formControl, WMSLocationType::Pick, inventDim.InventLocationId, inventDim.InventSiteId);
                #    }
                #
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD ItemId
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              Version: 3
              SOURCE #modified
                #void modified()
                #{
                #
                #    super();
                #
                #    element.updateDesign(InventDimFormDesignUpdate::FieldChange);
                #
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        Version: 3
        SOURCE #validateWrite
          #//AOSRunmode::Client
          #public boolean validateWrite()
          #{
          #    boolean ret;
          #    ;
          #    inventItemLocation.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
          #
          #    ret = super();
          #
          #    return ret;
          #}
          #
        ENDSOURCE
        SOURCE #write
          #// AOSRunMode::Client
          #void write()
          #{
          #    ;
          #    ttsbegin;
          #
          #    inventItemLocation.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
          #
          #    super();
          #
          #    if (inventItemLocation.InventDimId != inventDim.InventDimId)
          #    {
          #        inventDim.data(InventDim::find(inventItemLocation.InventDimId));
          #        inventDim_ds.setCurrent();
          #    }
          #
          #    ttscommit;
          #}
        ENDSOURCE
        SOURCE #active
          #int active()
          #{
          #    int ret;
          #    ret = super();
          #    element.updateDesign(InventDimFormDesignUpdate::Active);
          #
          #    inventDim_DS.active();
          #
          #    return ret;
          #}
        ENDSOURCE
        SOURCE #init
          #void init()
          #{
          #
          #    Query                   query;
          #    QueryBuildDataSource    queryBuildDataSource, queryBuildDataSourceDim;
          #
          #    if (element.args().dataset() == tablenum(WMSLocation)       &&
          #       (element.args().parmEnumType()))
          #    {
          #        query = new Query();
          #
          #        queryBuildDataSource = query.addDataSource(tablenum(InventItemLocation));
          #        queryBuildDataSourceDim = queryBuildDataSource.addDataSource(tablenum(InventDim));
          #
          #        switch(element.args().parmEnum())
          #        {
          #            case WMSLocationType::InputPort:
          #                queryBuildDataSource.addDynalink(
          #                    fieldnum(InventItemLocation, wmsLocationIdDefaultReceipt),
          #                    element.args().record(),
          #                    fieldname2id(element.args().dataset(),fieldstr(WMSLocation,wmsLocationId)));
          #                break;
          #            case WMSLocationType::Pick:
          #                queryBuildDataSource.addDynalink(
          #                    fieldnum(InventItemLocation, wmsPickingLocation),
          #                    element.args().record(),
          #                    fieldname2id(element.args().dataset(),fieldstr(WMSLocation,wmsLocationId)));
          #                break;
          #            case WMSLocationType::OutputPort:
          #                break;
          #            case WMSLocationType::ProductionInput:
          #                queryBuildDataSource.addDynalink(
          #                    fieldnum(InventItemLocation, wmsLocationIdDefaultIssue),
          #                    element.args().record(),
          #                    fieldname2id(element.args().dataset(),fieldstr(WMSLocation,wmsLocationId)));
          #                break;
          #        }
          #        queryBuildDataSourceDim.addDynalink(
          #            fieldnum(InventDim, InventLocationId),
          #            element.args().record(),
          #            fieldname2id(element.args().dataset(),fieldstr(WMSLocation,InventLocationId)));
          #
          #        inventItemLocation_DS.query(query);
          #    }
          #
          #    super();
          #}
          #
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #InventDim
          Table               #InventDim
          JoinSource          #InventItemLocation
          LinkType            #InnerJoin
          DelayActive         #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD InventLocationId
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              Version: 3
              SOURCE #modified
                #public void modified()
                #{
                #    InventTable inventTable;
                #;
                #    super();
                #
                #    inventTable = InventTable::find(inventItemLocation.ItemId);
                #
                #    if (inventTable.RecId)
                #        element.setWMSLocationIdEnabled(inventTable.DimGroupId);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        Version: 3
        SOURCE #write
          #public void write()
          #{
          #//    super();
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  JOINS
    InventDim InventItemLocation
  ENDJOINS
  
  DESIGN
    PROPERTIES
      Caption             #@SYS53618
      TitleDatasource     #InventItemLocation
      HTMLHelpFile        #HTMLHelpFileIWorker
      HTMLHelpTopic       #AxShared.chm::/html/8DF0C66A-4B4D-4292-B3E3-269BE2F67905.htm
      DataSource          #InventItemLocation
      Columns             #Auto
    ENDPROPERTIES
    
    CONTAINER
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          Width               #Column width
          Height              #Column height
          Columns             #Auto
        ENDPROPERTIES
        
        CONTAINER
          CONTROL TABPAGE
            PROPERTIES
              Name                #Overview
              Caption             #@SYS9039
            ENDPROPERTIES
            
            CONTAINER
              CONTROL GRID
                PROPERTIES
                  Name                #Grid
                  Width               #Column width
                  Height              #Column height
                  DataSource          #InventItemLocation
                ENDPROPERTIES
                
                  CONTAINER
                    CONTROL STRINGEDIT
                      PROPERTIES
                        Name                #InventItemLocation_ItemId
                        AutoDeclaration     #Yes
                        HTMLHelpFile        #HTMLHelpFileAxShared
                        HTMLHelpTopic       #html/b70a9020-95f1-4ffe-8a7a-541fa83d464d.htm
                        DataSource          #InventItemLocation
                        DataField           #ItemId
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                    CONTROL GROUP
                      PROPERTIES
                        Name                #InventoryDimensionsGrid
                        HTMLHelpFile        #HTMLHelpFileAxShared
                        HTMLHelpTopic       #html/DD0FD5F7-82CE-4D24-975B-39ECE36F7A8C.htm
                        BackgroundColor     #Window background
                        DataSource          #InventDim
                        DataGroup           #InventoryDimensions
                        AutoDataGroup       #Yes
                      ENDPROPERTIES
                      
                        CONTAINER
                        ENDCONTAINER
                        
                    ENDCONTROL 
                    
                    CONTROL STRINGEDIT
                      PROPERTIES
                        Name                #InventItemLocation_CountGroupId
                        HTMLHelpFile        #HTMLHelpFileAxShared
                        HTMLHelpTopic       #html/877ae819-333f-418c-bd7f-02002dae84f7.htm
                        DataSource          #InventItemLocation
                        DataField           #CountGroupId
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                    CONTROL CHECKBOX
                      PROPERTIES
                        Name                #CopyOfCounting_CountingStarted
                        DataSource          #InventItemLocation
                        DataField           #CountingStarted
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                    CONTROL STRINGEDIT
                      PROPERTIES
                        Name                #CopyOfCounting_CountingJournalId
                        DataSource          #InventItemLocation
                        DataField           #CountingJournalId
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                  ENDCONTAINER
                  
              ENDCONTROL 
              
            ENDCONTAINER
            
          ENDCONTROL 
          
          CONTROL TABPAGE
            PROPERTIES
              Name                #General
              Caption             #@SYS2952
              Columns             #Auto
            ENDPROPERTIES
            
            CONTAINER
              CONTROL GROUP
                PROPERTIES
                  Name                #Identification
                  HTMLHelpFile        #HTMLHelpFileAxShared
                  HTMLHelpTopic       #html/87731FC8-B489-47D1-82FE-E62FBD7F2DA4.htm
                  DataSource          #InventItemLocation
                  DataGroup           #Identification
                  AutoDataGroup       #Yes
                ENDPROPERTIES
                
                  CONTAINER
                  ENDCONTAINER
                  
              ENDCONTROL 
              
              CONTROL GROUP
                PROPERTIES
                  Name                #InventoryDimensions
                  HTMLHelpFile        #HTMLHelpFileAxShared
                  HTMLHelpTopic       #html/FE715D1A-878B-4869-8A78-0E8484099B7E.htm
                  Caption             #@SYS54752
                  DataSource          #InventDim
                  DataGroup           #InventoryDimensions
                  AutoDataGroup       #Yes
                ENDPROPERTIES
                
                  CONTAINER
                  ENDCONTAINER
                  
              ENDCONTROL 
              
              CONTROL GROUP
                PROPERTIES
                  Name                #Counting
                  HTMLHelpFile        #HTMLHelpFileAxShared
                  HTMLHelpTopic       #html/7EA13C7B-CC1B-436E-A6E1-E2462A64909B.htm
                  DataSource          #InventItemLocation
                  DataGroup           #Counting
                  AutoDataGroup       #Yes
                ENDPROPERTIES
                
                  CONTAINER
                  ENDCONTAINER
                  
              ENDCONTROL 
              
            ENDCONTAINER
            
          ENDCONTROL 
          
          CONTROL TABPAGE
            PROPERTIES
              Name                #WMS
              Caption             #@SYS20394
            ENDPROPERTIES
            
            CONTAINER
              CONTROL GROUP
                PROPERTIES
                  Name                #WarehouseManagement
                  HTMLHelpFile        #HTMLHelpFileAxShared
                  HTMLHelpTopic       #html/4FA53EC5-F44A-4B96-9F6F-ECBA809C28B7.htm
                  DataSource          #InventItemLocation
                  DataGroup           #WarehouseManagement
                  AutoDataGroup       #Yes
                ENDPROPERTIES
                
                  CONTAINER
                  ENDCONTAINER
                  
              ENDCONTROL 
              
              CONTROL GROUP
                PROPERTIES
                  Name                #PickingLocation
                  DataSource          #InventItemLocation
                  DataGroup           #PickingLocation
                  AutoDataGroup       #Yes
                ENDPROPERTIES
                
                  CONTAINER
                  ENDCONTAINER
                  
              ENDCONTROL 
              
            ENDCONTAINER
            
          ENDCONTROL 
          
        ENDCONTAINER
        
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 5

FORM #ERL_ReleaseItemCounted
  PROPERTIES
    Name                #ERL_ReleaseItemCounted
  ENDPROPERTIES
  
  METHODS
    Version: 3
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    Dialog          dialog;
      #    DialogField     dSite;
      #    DialogField     dWH;
      #    DialogField     dItemId;
      #    DialogField     dJournal;
      #
      #    InventSiteId        site;
      #    InventLocationId    wh;
      #    ItemId              itemid;
      #    InventJournalId     journal;
      #}
    ENDSOURCE
    SOURCE #refresh
      #public void refresh()
      #{
      #    ERL_ReleaseItemCounted_ds.reread();
      #    ERL_ReleaseItemCounted_ds.research(true);
      #}
    ENDSOURCE
    SOURCE #initialize
      #void initialize()
      #{
      #    QueryBuildDataSource    qbds;
      #
      #    ;
      #
      #    qbds = ERL_ReleaseItemCounted_ds.query().dataSourceTable(tablenum(ERL_ReleaseItemCounted));
      #    qbds.clearRanges();
      #
      #    if(site!=""){
      #        qbds.addRange(fieldnum(ERL_ReleaseItemCounted, InventSiteId)).value(sysQuery::value(site));
      #    }
      #    if(itemId!=""){
      #        qbds.addRange(fieldnum(ERL_ReleaseItemCounted, ItemId)).value(sysQuery::value(itemid));
      #    }
      #
      #    if(journal!="") {
      #        qbds.addRange(fieldnum(ERL_ReleaseItemCounted, CountingJournalId)).value(sysQuery::value(journal));
      #    } else {
      #        qbds.addRange(fieldnum(ERL_ReleaseItemCounted, CountingJournalId)).value(sysQuery::valueNot(""));
      #    }
      #
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    InventSite       InventSite = InventSite::find(ERL_Global::getUserBU());
      #    ;
      #
      #    dialog = new Dialog("Release Item Counted");
      #
      #    dSite   = dialog.addFieldValue(typeid(InventSiteId), site);
      #    dSite.value(InventSite.SiteId);
      #    if(InventSite.SiteId != "50")
      #        dSite.active(false);
      #
      #    dJournal = dialog.addFieldValue(typeid(InventJournalid), journal);
      #    dWH     = dialog.addFieldValue(typeid(InventLocationId), wh);
      #    //dWH.value(InventSite.DefaultWhs);
      #    dItemId = dialog.addFieldValue(typeid(ItemId), itemid);
      #
      #    dialog.run();
      #    if(dialog.closedOk())
      #    {
      #        super();
      #        site = dSite.value();
      #        wh = dWH.value();
      #        itemid = ditemId.value();
      #        journal = dJournal.value();
      #        this.initialize();
      #    }
      #    else
      #    {
      #        super();
      #        this.close();
      #    }
      #
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #ERL_ReleaseItemCounted
          Table               #ERL_ReleaseItemCounted
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
    ENDDATASOURCE
  ENDOBJECTBANK
  
  JOINS
  ENDJOINS
  
  DESIGN
    PROPERTIES
      Caption             #Release Item Counted
    ENDPROPERTIES
    
    CONTAINER
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          Width               #Column width
          Height              #Column height
        ENDPROPERTIES
        
        CONTAINER
          CONTROL TABPAGE
            PROPERTIES
              Name                #Overview
              Caption             #Overview
            ENDPROPERTIES
            
            CONTAINER
              CONTROL GRID
                PROPERTIES
                  Name                #Grid
                  AllowEdit           #No
                  Width               #Column width
                  Height              #Column height
                  DataSource          #ERL_ReleaseItemCounted
                ENDPROPERTIES
                
                  CONTAINER
                    CONTROL STRINGEDIT
                      PROPERTIES
                        Name                #Grid_InventSiteId
                        DataSource          #ERL_ReleaseItemCounted
                        DataField           #InventSiteId
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                    CONTROL STRINGEDIT
                      PROPERTIES
                        Name                #Grid_inventDimId
                        DataSource          #ERL_ReleaseItemCounted
                        DataField           #inventDimId
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                    CONTROL STRINGEDIT
                      PROPERTIES
                        Name                #Grid_ItemId
                        DataSource          #ERL_ReleaseItemCounted
                        DataField           #ItemId
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                    CONTROL STRINGEDIT
                      PROPERTIES
                        Name                #Grid_InventLocationId
                        DataSource          #ERL_ReleaseItemCounted
                        DataField           #InventLocationId
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                    CONTROL STRINGEDIT
                      PROPERTIES
                        Name                #Grid_wMSLocationId
                        DataSource          #ERL_ReleaseItemCounted
                        DataField           #wMSLocationId
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                    CONTROL CHECKBOX
                      PROPERTIES
                        Name                #Grid_CountingStarted
                        BackgroundColor     #Window background
                        DataSource          #ERL_ReleaseItemCounted
                        DataField           #CountingStarted
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                    CONTROL STRINGEDIT
                      PROPERTIES
                        Name                #Grid_CountingJournalId
                        DataSource          #ERL_ReleaseItemCounted
                        DataField           #CountingJournalId
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                    CONTROL CHECKBOX
                      PROPERTIES
                        Name                #Grid_Posted
                        BackgroundColor     #Window background
                        DataSource          #ERL_ReleaseItemCounted
                        DataField           #Posted
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                    CONTROL STRINGEDIT
                      PROPERTIES
                        Name                #Grid_Description
                        DataSource          #ERL_ReleaseItemCounted
                        DataField           #Description
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                  ENDCONTAINER
                  
              ENDCONTROL 
              
            ENDCONTAINER
            
          ENDCONTROL 
          
          CONTROL TABPAGE
            PROPERTIES
              Name                #JourTab
              Caption             #Journal
            ENDPROPERTIES
            
            CONTAINER
              CONTROL GROUP
                PROPERTIES
                  Name                #Group
                  DataSource          #ERL_ReleaseItemCounted
                ENDPROPERTIES
                
                  CONTAINER
                    CONTROL STRINGEDIT
                      PROPERTIES
                        Name                #Group_JournalId
                        DataSource          #ERL_ReleaseItemCounted
                        DataField           #JournalId
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                    CONTROL CHECKBOX
                      PROPERTIES
                        Name                #Group_Posted
                        DataSource          #ERL_ReleaseItemCounted
                        DataField           #Posted
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                    CONTROL STRINGEDIT
                      PROPERTIES
                        Name                #Group_Description
                        DataSource          #ERL_ReleaseItemCounted
                        DataField           #Description
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                    CONTROL UTCDATETIMEEDIT
                      PROPERTIES
                        Name                #ERL_ReleaseItemCounted_PostedDateTime
                        DataSource          #ERL_ReleaseItemCounted
                        DataField           #PostedDateTime
                      ENDPROPERTIES
                      
                    ENDCONTROL 
                    
                  ENDCONTAINER
                  
              ENDCONTROL 
              
            ENDCONTAINER
            
          ENDCONTROL 
          
        ENDCONTAINER
        
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
        ENDPROPERTIES
        
        CONTAINER
          CONTROL MENUITEMBUTTON
            PROPERTIES
              Name                #ERL_ReleaseItem
              MenuItemType        #Action
              MenuItemName        #ERL_ReleaseItem
            ENDPROPERTIES
            
          ENDCONTROL 
          
        ENDCONTAINER
        
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
ENDFORM


***Element: PRN

; Microsoft Dynamics AX Project : ERL_IS_14Dec2019_ReleaseItemCounted unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #ERL_IS_14Dec2019_ReleaseItemCounted
   SHARED
  PROPERTIES
    Name                #ERL_IS_14Dec2019_ReleaseItemCounted
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #MenuItems
      PROPERTIES
        Name                #MenuItems
        ProjectGroupType    #MenuItems
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      GROUP #Action
        PROPERTIES
          Name                #Action
          ProjectGroupType    #Action
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #ERL_ReleaseItem
        ENDNODE
        ENDGROUP
        
      ENDGROUP
      
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50435
        NODETYPE 329
        NAME #ERL_ReleaseItem
      ENDNODE
      ENDGROUP
      
    GROUP #Queries
      PROPERTIES
        Name                #Queries
        ProjectGroupType    #Queries
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 20
        UTILOBJECTID 0
        NODETYPE 330
        NAME #ERL_ReleaseItemCounted
      ENDNODE
      ENDGROUP
      
    GROUP #Views
      PROPERTIES
        Name                #Views
        ProjectGroupType    #Views
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 51464
        NODETYPE 243
        NAME #ERL_ReleaseItemCounted
      ENDNODE
      ENDGROUP
      
    GROUP #Tables
      PROPERTIES
        Name                #Tables
        ProjectGroupType    #Tables
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 698
        NODETYPE 204
        NAME #InventDim
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 155
        NODETYPE 204
        NAME #InventJournalTrans
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 154
        NODETYPE 204
        NAME #InventJournalTable
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 659
        NODETYPE 204
        NAME #InventItemLocation
      ENDNODE
      ENDGROUP
      
    GROUP #Forms
      PROPERTIES
        Name                #Forms
        ProjectGroupType    #Forms
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #InventItemLocation
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #ERL_ReleaseItemCounted
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
